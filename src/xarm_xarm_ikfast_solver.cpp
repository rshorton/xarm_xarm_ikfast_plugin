/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-05-04 02:07:21.468178
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44;
x0=IKsin(j[0]);
x1=IKcos(j[3]);
x2=IKcos(j[0]);
x3=IKsin(j[3]);
x4=IKcos(j[2]);
x5=IKsin(j[1]);
x6=IKcos(j[1]);
x7=IKsin(j[2]);
x8=IKsin(j[5]);
x9=IKcos(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((0.12)*x4);
x13=((0.001205)*x0);
x14=((1.0)*x1);
x15=((0.05306)*x4);
x16=((0.05306)*x0);
x17=((1.0)*x0);
x18=((-1.0)*x3);
x19=(x2*x5);
x20=(x6*x7);
x21=(x4*x6);
x22=(x1*x11);
x23=(x2*x3);
x24=(x5*x7);
x25=(x4*x5);
x26=(x0*x5);
x27=(x1*x2);
x28=(x1*x10);
x29=((1.0)*x23);
x30=(x17*x3);
x31=(x25+x20);
x32=((((-1.0)*x24))+(((1.0)*x21)));
x33=((((-1.0)*x20))+(((-1.0)*x25)));
x34=(((x0*x24))+(((-1.0)*x17*x21)));
x35=((((-1.0)*x19*x7))+((x2*x21)));
x36=(x17*((x25+x20)));
x37=(x1*x35);
x38=((((-1.0)*x19*x4))+(((-1.0)*x2*x20)));
x39=(x3*x34);
x40=(x3*x35);
x41=(x1*x34);
x42=(x11*x38);
x43=(((x28*x31))+((x11*x32)));
x44=(((x10*(((((-1.0)*x29))+x41))))+((x11*x36)));
eerot[0]=(((x9*((x39+x27))))+((x44*x8)));
eerot[1]=(((x8*((((x18*x34))+(((-1.0)*x27))))))+((x44*x9)));
eerot[2]=(((x11*(((((-1.0)*x14*x34))+x29))))+((x10*x36)));
IkReal x45=((1.0)*x13);
eetrans[0]=((((0.0022)*x0))+(((0.097)*x26))+((x11*(((((-0.05306)*x41))+(((0.05306)*x23))))))+((x11*(((((-1.0)*x20*x45))+(((-1.0)*x25*x45))))))+(((0.12)*x0*x20))+((x10*(((((-0.001205)*x41))+(((0.001205)*x23))))))+((x12*x26))+((x10*((((x16*x20))+((x15*x26)))))));
eerot[3]=(((x8*((((x10*(((((-1.0)*x30))+x37))))+x42))))+((x9*((((x0*x1))+x40)))));
eerot[4]=(((x9*((x42+((x10*((((x0*x18))+x37))))))))+((x8*(((((-1.0)*x40))+(((-1.0)*x0*x14)))))));
eerot[5]=(((x11*(((((-1.0)*x14*x35))+x30))))+((x10*x38)));
IkReal x46=(x2*x20);
IkReal x47=((1.0)*x19);
eetrans[1]=(((x11*(((((-0.05306)*x37))+((x16*x3))))))+(((-0.097)*x19))+(((-0.0022)*x2))+((x10*(((((-0.001205)*x37))+((x13*x3))))))+(((-0.12)*x46))+((x11*(((((0.001205)*x46))+(((0.001205)*x19*x4))))))+(((-1.0)*x12*x47))+((x10*(((((-0.05306)*x46))+(((-1.0)*x15*x47)))))));
eerot[6]=(((x3*x31*x9))+((x43*x8)));
eerot[7]=(((x43*x9))+((x3*x33*x8)));
eerot[8]=(((x10*x32))+((x22*x33)));
eetrans[2]=((0.06798)+((x28*(((((-0.001205)*x20))+(((-0.001205)*x25))))))+((x10*(((((-0.05306)*x24))+((x15*x6))))))+(((0.097)*x6))+((x22*(((((-0.05306)*x20))+(((-1.0)*x15*x5))))))+(((-0.12)*x24))+((x12*x6))+((x11*(((((0.001205)*x24))+(((-0.001205)*x21)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.05306)*r02))+px);
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.05306)*r12))+py);
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.06798)+pz+(((-0.05306)*r22)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x48=((1.0)*px);
IkReal x49=((1.0)*pz);
IkReal x50=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x50))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x49)));
rxp0_2=((((-1.0)*r10*x48))+((py*r00)));
rxp1_0=((((-1.0)*r21*x50))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x49)));
rxp1_2=((((-1.0)*r11*x48))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x50)));
rxp2_1=((((-1.0)*r02*x49))+((px*r22)));
rxp2_2=((((-1.0)*r12*x48))+((py*r02)));
IkReal op[72], zeror[48];
int numroots;;
IkReal x51=(rxp2_2+(((-0.001205)*r20)));
IkReal x52=((0.00241)*r21);
IkReal x53=((0.001205)*r20);
IkReal x54=((5.302e-6)*r11);
IkReal x55=((0.00241)*npy);
IkReal x56=((0.24)*npz);
IkReal x57=((0.000528)*r12);
IkReal x58=((0.0044)*py);
IkReal x59=((1.0)*pp);
IkReal x60=((0.0044)*px);
IkReal x61=((5.302e-6)*r01);
IkReal x62=((0.000528)*r02);
IkReal x63=((1.0604e-5)*r00);
IkReal x64=((1.0604e-5)*r10);
IkReal x65=((0.00482)*npx);
IkReal x66=((2.0)*rxp1_2);
IkReal x67=((4.0)*rxp0_2);
IkReal x68=((0.001056)*r11);
IkReal x69=((0.48)*npy);
IkReal x70=((0.96)*npx);
IkReal x71=((0.002112)*r10);
IkReal x72=((0.001056)*r01);
IkReal x73=((1.0)*rxp2_2);
IkReal x74=(rxp2_2+x53);
IkReal x75=((-2.0)*rxp1_2);
IkReal x76=((-0.001056)*r01);
IkReal x77=((-0.002112)*r00);
IkReal x78=((((-1.0)*x73))+x53);
IkReal x79=((-0.00241)*r21);
IkReal x80=(x64+(((-1.0)*x65)));
IkReal x81=((-0.004997292025)+x57);
IkReal x82=((0.0005784)+x69);
IkReal x83=((-0.004997292025)+x55);
IkReal x84=((((-1.0)*x73))+(((-1.0)*x53)));
IkReal x85=((((-1.0)*x65))+(((-1.0)*x64)));
IkReal x86=(x54+x56);
IkReal x87=(x60+x61);
IkReal x88=(x59+x58);
IkReal x89=(x59+x55);
IkReal x90=(x87+(((-1.0)*x62)));
IkReal x91=(x60+(((-1.0)*x62))+(((-1.0)*x61)));
IkReal x92=(x60+x62+(((-1.0)*x61)));
IkReal x93=(x62+x87);
op[0]=x51;
op[1]=x51;
op[2]=x52;
op[3]=x52;
op[4]=x74;
op[5]=x74;
op[6]=(x56+x81+(((-1.0)*x88))+(((-1.0)*x54))+(((-1.0)*x55)));
op[7]=x90;
op[8]=x85;
op[9]=x63;
op[10]=(x55+x81+x86+(((-1.0)*x88)));
op[11]=x91;
op[12]=x90;
op[13]=((-0.004997292025)+x58+x86+(((-1.0)*x89))+(((-1.0)*x57)));
op[14]=x63;
op[15]=x80;
op[16]=x91;
op[17]=(x58+x56+x83+(((-1.0)*x59))+(((-1.0)*x57))+(((-1.0)*x54)));
op[18]=0;
op[19]=x51;
op[20]=0;
op[21]=x52;
op[22]=0;
op[23]=x74;
op[24]=x66;
op[25]=x66;
op[26]=x67;
op[27]=x67;
op[28]=x75;
op[29]=x75;
op[30]=(x68+x82);
op[31]=x76;
op[32]=(x71+x70);
op[33]=x77;
op[34]=((0.0005784)+(((-1.0)*x69))+(((-1.0)*x68)));
op[35]=x72;
op[36]=x76;
op[37]=(x82+(((-1.0)*x68)));
op[38]=x77;
op[39]=((((-1.0)*x71))+x70);
op[40]=x72;
op[41]=((0.0005784)+x68+(((-1.0)*x69)));
op[42]=0;
op[43]=x66;
op[44]=0;
op[45]=x67;
op[46]=0;
op[47]=x75;
op[48]=x78;
op[49]=x78;
op[50]=x79;
op[51]=x79;
op[52]=x84;
op[53]=x84;
op[54]=((-0.004997292025)+(((-1.0)*x88))+(((-1.0)*x86))+(((-1.0)*x57))+(((-1.0)*x55)));
op[55]=x93;
op[56]=x85;
op[57]=x63;
op[58]=(x54+x83+(((-1.0)*x88))+(((-1.0)*x56))+(((-1.0)*x57)));
op[59]=x92;
op[60]=x93;
op[61]=(x58+x54+x81+(((-1.0)*x89))+(((-1.0)*x56)));
op[62]=x63;
op[63]=x80;
op[64]=x92;
op[65]=(x58+x55+x81+(((-1.0)*x86))+(((-1.0)*x59)));
op[66]=0;
op[67]=x78;
op[68]=0;
op[69]=x79;
op[70]=0;
op[71]=x84;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16], j0array[16], cj0array[16], sj0array[16];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ij4 += 3)
{
IkReal htj4 = zeror[ij4+0], htj5 = zeror[ij4+1], htj0 = zeror[ij4+2];
if(isnan(htj4)||isnan(htj5)||isnan(htj0)){
continue;
}
j4array[numsolutions]=((2.0)*(atan(htj4)));
j5array[numsolutions]=((2.0)*(atan(htj5)));
j0array[numsolutions]=((2.0)*(atan(htj0)));
if(isinf(htj4)){
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
}
else{
IkReal x94=htj4*htj4;
CheckValue<IkReal> x95=IKPowWithIntegerCheck(((1.0)+x94),-1);
if(!x95.valid){
continue;
}
cj4array[numsolutions]=((x95.value)*(((1.0)+(((-1.0)*x94)))));
CheckValue<IkReal> x96=IKPowWithIntegerCheck(((1.0)+(htj4*htj4)),-1);
if(!x96.valid){
continue;
}
sj4array[numsolutions]=((2.0)*htj4*(x96.value));
}
if(isinf(htj5)){
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
}
else{
IkReal x97=htj5*htj5;
CheckValue<IkReal> x98=IKPowWithIntegerCheck(((1.0)+x97),-1);
if(!x98.valid){
continue;
}
cj5array[numsolutions]=((x98.value)*(((1.0)+(((-1.0)*x97)))));
CheckValue<IkReal> x99=IKPowWithIntegerCheck(((1.0)+(htj5*htj5)),-1);
if(!x99.valid){
continue;
}
sj5array[numsolutions]=((2.0)*htj5*(x99.value));
}
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x100=htj0*htj0;
CheckValue<IkReal> x101=IKPowWithIntegerCheck(((1.0)+x100),-1);
if(!x101.valid){
continue;
}
cj0array[numsolutions]=((x101.value)*(((1.0)+(((-1.0)*x100)))));
CheckValue<IkReal> x102=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x102.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x102.value));
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j4valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj4 = 16;
_nj5 = 1;
_nj0 = 1;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
_ij0[0] = 0; _ij0[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( !j4valid[iij4] ) { continue; }
if( IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij4]-cj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij4]-sj5array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(cj0array[ij4]-cj0array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij4]-sj0array[iij4]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j4valid[iij4]=false; _ij4[1] = iij4; _ij5[1] = 0; _ij0[1] = 0;  break; 
}
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

    j5 = j5array[ij4]; cj5 = cj5array[ij4]; sj5 = sj5array[ij4];

    j0 = j0array[ij4]; cj0 = cj0array[ij4]; sj0 = sj0array[ij4];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[3];
IkReal x103=(cj0*r21);
IkReal x104=((1.0)*cj5);
IkReal x105=(cj0*r20);
IkReal x106=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x106;
j3eval[1]=IKsign(x106);
j3eval[2]=((IKabs(((((-1.0)*x104*x105))+((sj5*x103)))))+(IKabs(((((-1.0)*cj4*sj5*x105))+((cj0*r22*sj4))+(((-1.0)*cj4*x103*x104))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
IkReal x107=(sj0*sj5);
IkReal x108=((1.0)*sj4);
IkReal x109=((1.0)*r20);
IkReal x110=(cj5*sj0);
IkReal x111=((1.0)*cj4);
IkReal x112=((((-1.0)*cj5*r01*x108))+(((-1.0)*r00*sj5*x108))+(((-1.0)*r02*x111)));
j3eval[0]=x112;
j3eval[1]=IKsign(x112);
j3eval[2]=((IKabs((((r21*x107))+(((-1.0)*x109*x110)))))+(IKabs((((r22*sj0*sj4))+(((-1.0)*cj4*x107*x109))+(((-1.0)*r21*x110*x111))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[2];
IkReal x113=((1.0)*sj4);
IkReal x114=((((-1.0)*cj4*r22))+(((-1.0)*r20*sj5*x113))+(((-1.0)*cj5*r21*x113)));
j3eval[0]=x114;
j3eval[1]=IKsign(x114);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x115=((1.0)*r20);
IkReal x116=(((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)));
j3eval[0]=x116;
j3eval[1]=IKsign(x116);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x115)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*sj5*x115))+(((-1.0)*cj4*cj5*r21))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x117=((1.0)*cj5);
IkReal x118=((1.0)*sj5);
IkReal x119=((((-1.0)*r20*sj4*x118))+(((-1.0)*r21*sj4*x117))+(((-1.0)*cj4*r22)));
j3eval[0]=x119;
j3eval[1]=IKsign(x119);
j3eval[2]=((IKabs(((((-1.0)*r10*x117))+((r11*sj5)))))+(IKabs(((((-1.0)*cj4*r10*x118))+(((-1.0)*cj4*r11*x117))+((r12*sj4))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x120=cj4*cj4;
IkReal x121=r00*r00;
IkReal x122=cj5*cj5;
IkReal x123=r01*r01;
IkReal x124=r02*r02;
IkReal x125=(r00*sj5);
IkReal x126=((1.0)*r01);
IkReal x127=((2.0)*cj5*r01);
IkReal x128=(cj4*r02*sj4);
IkReal x129=((1.0)*x122);
IkReal x130=(x120*x121);
IkReal x131=((((-1.0)*x123*x129))+((x121*x122))+(((-2.0)*x125*x128))+x130+x124+x123+((x120*x125*x127))+(((-1.0)*x125*x127))+(((-1.0)*x120*x124))+(((-1.0)*x129*x130))+(((-1.0)*x127*x128))+((x120*x122*x123)));
j3eval[0]=x131;
j3eval[1]=((IKabs(((((-1.0)*cj4*x125))+(((-1.0)*cj4*cj5*x126))+((r02*sj4)))))+(IKabs(((((-1.0)*sj5*x126))+((cj5*r00))))));
j3eval[2]=IKsign(x131);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x132=cj4*cj4;
IkReal x133=r00*r00;
IkReal x134=cj5*cj5;
IkReal x135=r01*r01;
IkReal x136=r02*r02;
IkReal x137=(r00*sj5);
IkReal x138=((1.0)*r01);
IkReal x139=((2.0)*cj5*r01);
IkReal x140=(cj4*r02*sj4);
IkReal x141=((1.0)*x134);
IkReal x142=(x132*x133);
CheckValue<IkReal> x143=IKPowWithIntegerCheck(IKsign(((((-1.0)*x137*x139))+(((-2.0)*x137*x140))+(((-1.0)*x139*x140))+x142+x135+x136+(((-1.0)*x132*x136))+(((-1.0)*x141*x142))+((x133*x134))+((x132*x134*x135))+((x132*x137*x139))+(((-1.0)*x135*x141)))),-1);
if(!x143.valid){
continue;
}
CheckValue<IkReal> x144 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*x137))+(((-1.0)*cj4*cj5*x138))+((r02*sj4)))),IkReal(((((-1.0)*sj5*x138))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x144.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x143.value)))+(x144.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x145=IKsin(j3);
IkReal x146=IKcos(j3);
IkReal x147=(cj4*cj5);
IkReal x148=(cj5*r00);
IkReal x149=(r02*sj4);
IkReal x150=((1.0)*x146);
IkReal x151=(r01*x145);
IkReal x152=((1.0)*x145);
IkReal x153=(sj5*x146);
IkReal x154=(cj4*sj5*x145);
evalcond[0]=((((-1.0)*r22*sj4*x152))+((r20*x154))+((r21*x153))+(((-1.0)*cj5*r20*x150))+((r21*x145*x147)));
evalcond[1]=(((r11*x145*x147))+(((-1.0)*cj5*r10*x150))+(((-1.0)*r12*sj4*x152))+((r11*x153))+((r10*x154)));
evalcond[2]=((1.0)+((r00*x154))+((r01*x153))+(((-1.0)*x148*x150))+((x147*x151))+(((-1.0)*x149*x152)));
evalcond[3]=(((sj5*x151))+(((-1.0)*cj4*r00*sj5*x150))+(((-1.0)*r01*x147*x150))+(((-1.0)*x148*x152))+((x146*x149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x155=(cj5*r11);
IkReal x156=((1.23711340206186)*sj4);
IkReal x157=(r10*sj5);
IkReal x158=(r20*sj5);
IkReal x159=(cj5*r21);
IkReal x160=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*py))+((x155*x156))+((x156*x157))+((r12*x160))+(((-0.0124226804123711)*x157))+(((-0.0124226804123711)*x155)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x160))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x158))+(((0.0124226804123711)*x159))+(((-1.0)*x156*x159))+(((-1.0)*x156*x158)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*py))+((x155*x156))+((x156*x157))+((r12*x160))+(((-0.0124226804123711)*x157))+(((-0.0124226804123711)*x155))))+IKsqr(((((-1.0)*r22*x160))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x158))+(((0.0124226804123711)*x159))+(((-1.0)*x156*x159))+(((-1.0)*x156*x158))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*py))+((x155*x156))+((x156*x157))+((r12*x160))+(((-0.0124226804123711)*x157))+(((-0.0124226804123711)*x155))), ((((-1.0)*r22*x160))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x158))+(((0.0124226804123711)*x159))+(((-1.0)*x156*x159))+(((-1.0)*x156*x158))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x161=((1.0)*py);
IkReal x162=((0.12)*r10);
IkReal x163=(sj4*sj5);
IkReal x164=(cj5*sj3);
IkReal x165=((0.12)*r11);
IkReal x166=(sj3*sj5);
IkReal x167=((0.001205)*cj5);
IkReal x168=(cj3*cj4);
IkReal x169=((0.001205)*sj5);
IkReal x170=((0.12)*r21);
IkReal x171=((0.12)*cj4);
IkReal x172=((0.12)*r20);
IkReal x173=(cj5*sj4);
IkReal x174=(r20*x169);
IkReal x175=(r21*x167);
IkReal x176=((0.097)*(IKcos(j1)));
IkReal x177=(r11*x167);
IkReal x178=(r10*x169);
IkReal x179=((0.097)*(IKsin(j1)));
IkReal x180=((0.12)*cj3*sj4);
IkReal x181=(x175+x174);
IkReal x182=(x179+x178+x177+x161);
evalcond[0]=(((r22*x171))+(((-1.0)*x181))+x176+(((-1.0)*pz))+((x170*x173))+((x163*x172)));
evalcond[1]=((-0.0022)+(((-1.0)*x182))+((x162*x163))+((x165*x173))+((r12*x171)));
evalcond[2]=((((-1.0)*cj5*x165*x168))+(((-1.0)*x176))+x181+(((-1.0)*sj5*x162*x168))+(((-1.0)*x162*x164))+pz+((r12*x180))+((x165*x166)));
evalcond[3]=((-0.0022)+(((-1.0)*x182))+(((-1.0)*cj5*x168*x170))+((x166*x170))+(((-1.0)*sj5*x168*x172))+(((-1.0)*x164*x172))+((r22*x180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x183=((1.0)*sj1);
IkReal x184=(sj4*sj5);
IkReal x185=(cj4*r22);
IkReal x186=(cj4*r12);
IkReal x187=((1.0)*cj1);
IkReal x188=(cj5*r21*sj4);
IkReal x189=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x186*x187))+(((-1.0)*x187*x189))+(((-1.0)*r10*x184*x187))+(((-1.0)*r20*x183*x184))+(((-1.0)*x183*x185))+(((-1.0)*x183*x188)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x184))+((cj1*x185))+((cj1*x188))+(((-1.0)*r10*x183*x184))+(((-1.0)*x183*x186))+(((-1.0)*x183*x189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x186*x187))+(((-1.0)*x187*x189))+(((-1.0)*r10*x184*x187))+(((-1.0)*r20*x183*x184))+(((-1.0)*x183*x185))+(((-1.0)*x183*x188))))+IKsqr((((cj1*r20*x184))+((cj1*x185))+((cj1*x188))+(((-1.0)*r10*x183*x184))+(((-1.0)*x183*x186))+(((-1.0)*x183*x189))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x186*x187))+(((-1.0)*x187*x189))+(((-1.0)*r10*x184*x187))+(((-1.0)*r20*x183*x184))+(((-1.0)*x183*x185))+(((-1.0)*x183*x188))), (((cj1*r20*x184))+((cj1*x185))+((cj1*x188))+(((-1.0)*r10*x183*x184))+(((-1.0)*x183*x186))+(((-1.0)*x183*x189))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x190=IKcos(j2);
IkReal x191=IKsin(j2);
IkReal x192=(sj3*sj5);
IkReal x193=((0.001205)*cj5);
IkReal x194=(r20*sj5);
IkReal x195=((1.0)*sj4);
IkReal x196=(r10*sj5);
IkReal x197=((1.0)*sj1);
IkReal x198=(cj5*r21);
IkReal x199=((1.0)*cj4);
IkReal x200=((0.12)*sj1);
IkReal x201=(cj3*sj4);
IkReal x202=(cj5*r11);
IkReal x203=(cj1*x190);
IkReal x204=((1.0)*cj5*sj3);
IkReal x205=(cj1*x191);
IkReal x206=(cj3*x199);
IkReal x207=(x191*x197);
evalcond[0]=((((-1.0)*x194*x195))+(((-1.0)*x195*x198))+(((-1.0)*r22*x199))+(((-1.0)*x207))+x203);
evalcond[1]=((((-1.0)*x191*x200))+(((-0.001205)*x194))+(((0.12)*x203))+(((-1.0)*pz))+(((0.097)*cj1))+(((-1.0)*r21*x193)));
evalcond[2]=((((-1.0)*x195*x202))+(((-1.0)*x195*x196))+(((-1.0)*r12*x199))+(((-1.0)*x190*x197))+(((-1.0)*x205)));
evalcond[3]=((-0.0022)+(((-1.0)*r11*x193))+(((-0.12)*x205))+(((-0.097)*sj1))+(((-1.0)*x190*x200))+(((-0.001205)*x196))+(((-1.0)*py)));
evalcond[4]=(((r22*x201))+(((-1.0)*x194*x206))+((sj1*x190))+x205+(((-1.0)*x198*x206))+(((-1.0)*r20*x204))+((r21*x192)));
evalcond[5]=((((-1.0)*x202*x206))+(((-1.0)*x207))+x203+(((-1.0)*r10*x204))+((r11*x192))+(((-1.0)*x196*x206))+((r12*x201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x208=((1.0)*cj5);
IkReal x209=((1.0)*sj5);
CheckValue<IkReal> x210 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x208)))),IkReal(((((-1.0)*cj4*r11*x208))+((r12*sj4))+(((-1.0)*cj4*r10*x209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x210.valid){
continue;
}
CheckValue<IkReal> x211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*sj4*x208))+(((-1.0)*r20*sj4*x209))+(((-1.0)*cj4*r22)))),-1);
if(!x211.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x210.value)+(((1.5707963267949)*(x211.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x212=IKsin(j3);
IkReal x213=IKcos(j3);
IkReal x214=(cj4*cj5);
IkReal x215=(cj5*r00);
IkReal x216=(r02*sj4);
IkReal x217=((1.0)*x213);
IkReal x218=(r01*x212);
IkReal x219=((1.0)*x212);
IkReal x220=(sj5*x213);
IkReal x221=(cj4*sj5*x212);
evalcond[0]=((((-1.0)*r22*sj4*x219))+((r21*x212*x214))+((r20*x221))+(((-1.0)*cj5*r20*x217))+((r21*x220)));
evalcond[1]=((((-1.0)*cj5*r10*x217))+((r11*x220))+((r10*x221))+(((-1.0)*r12*sj4*x219))+((r11*x212*x214)));
evalcond[2]=((1.0)+((x214*x218))+((r01*x220))+((r00*x221))+(((-1.0)*x216*x219))+(((-1.0)*x215*x217)));
evalcond[3]=((((-1.0)*cj4*r00*sj5*x217))+((x213*x216))+((sj5*x218))+(((-1.0)*r01*x214*x217))+(((-1.0)*x215*x219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x222=(cj5*r11);
IkReal x223=((1.23711340206186)*sj4);
IkReal x224=(r10*sj5);
IkReal x225=(r20*sj5);
IkReal x226=(cj5*r21);
IkReal x227=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*py))+((x222*x223))+(((-0.0124226804123711)*x222))+(((-0.0124226804123711)*x224))+((r12*x227))+((x223*x224)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((0.0124226804123711)*x226))+(((0.0124226804123711)*x225))+(((-1.0)*x223*x225))+(((-1.0)*x223*x226))+(((-1.0)*r22*x227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*py))+((x222*x223))+(((-0.0124226804123711)*x222))+(((-0.0124226804123711)*x224))+((r12*x227))+((x223*x224))))+IKsqr(((((10.3092783505155)*pz))+(((0.0124226804123711)*x226))+(((0.0124226804123711)*x225))+(((-1.0)*x223*x225))+(((-1.0)*x223*x226))+(((-1.0)*r22*x227))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*py))+((x222*x223))+(((-0.0124226804123711)*x222))+(((-0.0124226804123711)*x224))+((r12*x227))+((x223*x224))), ((((10.3092783505155)*pz))+(((0.0124226804123711)*x226))+(((0.0124226804123711)*x225))+(((-1.0)*x223*x225))+(((-1.0)*x223*x226))+(((-1.0)*r22*x227))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x228=((1.0)*py);
IkReal x229=((0.12)*r10);
IkReal x230=(sj4*sj5);
IkReal x231=(cj5*sj3);
IkReal x232=((0.12)*r11);
IkReal x233=(sj3*sj5);
IkReal x234=((0.001205)*cj5);
IkReal x235=(cj3*cj4);
IkReal x236=((0.001205)*sj5);
IkReal x237=((0.12)*r21);
IkReal x238=((0.12)*cj4);
IkReal x239=((0.12)*r20);
IkReal x240=(cj5*sj4);
IkReal x241=(r20*x236);
IkReal x242=(r21*x234);
IkReal x243=((0.097)*(IKcos(j1)));
IkReal x244=(r11*x234);
IkReal x245=(r10*x236);
IkReal x246=((0.097)*(IKsin(j1)));
IkReal x247=((0.12)*cj3*sj4);
IkReal x248=(x242+x241);
IkReal x249=(x228+x246+x245+x244);
evalcond[0]=(((x237*x240))+((x230*x239))+(((-1.0)*pz))+x243+(((-1.0)*x248))+((r22*x238)));
evalcond[1]=((-0.0022)+((x229*x230))+((x232*x240))+(((-1.0)*x249))+((r12*x238)));
evalcond[2]=(((x232*x233))+(((-1.0)*cj5*x232*x235))+x248+(((-1.0)*sj5*x229*x235))+((r12*x247))+pz+(((-1.0)*x243))+(((-1.0)*x229*x231)));
evalcond[3]=((-0.0022)+(((-1.0)*cj5*x235*x237))+(((-1.0)*sj5*x235*x239))+((r22*x247))+((x233*x237))+(((-1.0)*x231*x239))+(((-1.0)*x249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x250=((1.0)*sj1);
IkReal x251=(sj4*sj5);
IkReal x252=(cj4*r22);
IkReal x253=(cj4*r12);
IkReal x254=((1.0)*cj1);
IkReal x255=(cj5*r21*sj4);
IkReal x256=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x250*x255))+(((-1.0)*x250*x252))+(((-1.0)*r20*x250*x251))+(((-1.0)*x254*x256))+(((-1.0)*r10*x251*x254))+(((-1.0)*x253*x254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x251))+(((-1.0)*x250*x256))+(((-1.0)*x250*x253))+((cj1*x255))+((cj1*x252))+(((-1.0)*r10*x250*x251)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x250*x255))+(((-1.0)*x250*x252))+(((-1.0)*r20*x250*x251))+(((-1.0)*x254*x256))+(((-1.0)*r10*x251*x254))+(((-1.0)*x253*x254))))+IKsqr((((cj1*r20*x251))+(((-1.0)*x250*x256))+(((-1.0)*x250*x253))+((cj1*x255))+((cj1*x252))+(((-1.0)*r10*x250*x251))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x250*x255))+(((-1.0)*x250*x252))+(((-1.0)*r20*x250*x251))+(((-1.0)*x254*x256))+(((-1.0)*r10*x251*x254))+(((-1.0)*x253*x254))), (((cj1*r20*x251))+(((-1.0)*x250*x256))+(((-1.0)*x250*x253))+((cj1*x255))+((cj1*x252))+(((-1.0)*r10*x250*x251))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x257=IKcos(j2);
IkReal x258=IKsin(j2);
IkReal x259=(sj3*sj5);
IkReal x260=((0.001205)*cj5);
IkReal x261=(r20*sj5);
IkReal x262=((1.0)*sj4);
IkReal x263=(r10*sj5);
IkReal x264=((1.0)*sj1);
IkReal x265=(cj5*r21);
IkReal x266=((1.0)*cj4);
IkReal x267=((0.12)*sj1);
IkReal x268=(cj3*sj4);
IkReal x269=(cj5*r11);
IkReal x270=(cj1*x257);
IkReal x271=((1.0)*cj5*sj3);
IkReal x272=(cj1*x258);
IkReal x273=(cj3*x266);
IkReal x274=(x258*x264);
evalcond[0]=((((-1.0)*x262*x265))+x270+(((-1.0)*x261*x262))+(((-1.0)*x274))+(((-1.0)*r22*x266)));
evalcond[1]=((((-1.0)*x258*x267))+(((0.12)*x270))+(((-1.0)*pz))+(((0.097)*cj1))+(((-0.001205)*x261))+(((-1.0)*r21*x260)));
evalcond[2]=((((-1.0)*x262*x263))+(((-1.0)*x262*x269))+(((-1.0)*x272))+(((-1.0)*r12*x266))+(((-1.0)*x257*x264)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*r11*x260))+(((-1.0)*py))+(((-0.12)*x272))+(((-0.001205)*x263))+(((-1.0)*x257*x267)));
evalcond[4]=(((r21*x259))+((r22*x268))+((sj1*x257))+x272+(((-1.0)*x261*x273))+(((-1.0)*x265*x273))+(((-1.0)*r20*x271)));
evalcond[5]=((((-1.0)*x263*x273))+((r11*x259))+(((-1.0)*x269*x273))+(((-1.0)*r10*x271))+x270+((r12*x268))+(((-1.0)*x274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x275=((1.0)*r20);
CheckValue<IkReal> x276=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x276.valid){
continue;
}
CheckValue<IkReal> x277 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x275))+((r21*sj5)))),IkReal((((r22*sj4))+(((-1.0)*cj4*sj5*x275))+(((-1.0)*cj4*cj5*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x277.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x276.value)))+(x277.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x278=IKsin(j3);
IkReal x279=IKcos(j3);
IkReal x280=(cj4*cj5);
IkReal x281=(cj5*r00);
IkReal x282=(r02*sj4);
IkReal x283=((1.0)*x279);
IkReal x284=(r01*x278);
IkReal x285=((1.0)*x278);
IkReal x286=(sj5*x279);
IkReal x287=(cj4*sj5*x278);
evalcond[0]=((((-1.0)*cj5*r20*x283))+((r21*x286))+(((-1.0)*r22*sj4*x285))+((r21*x278*x280))+((r20*x287)));
evalcond[1]=(((r11*x278*x280))+((r10*x287))+(((-1.0)*cj5*r10*x283))+((r11*x286))+(((-1.0)*r12*sj4*x285)));
evalcond[2]=((1.0)+((r01*x286))+((r00*x287))+(((-1.0)*x281*x283))+(((-1.0)*x282*x285))+((x280*x284)));
evalcond[3]=(((x279*x282))+(((-1.0)*cj4*r00*sj5*x283))+(((-1.0)*x281*x285))+((sj5*x284))+(((-1.0)*r01*x280*x283)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x288=(cj5*r11);
IkReal x289=((1.23711340206186)*sj4);
IkReal x290=(r10*sj5);
IkReal x291=(r20*sj5);
IkReal x292=(cj5*r21);
IkReal x293=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+((x289*x290))+((r12*x293))+(((-0.0124226804123711)*x288))+(((-10.3092783505155)*py))+((x288*x289))+(((-0.0124226804123711)*x290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x289*x292))+(((-1.0)*x289*x291))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x292))+(((0.0124226804123711)*x291))+(((-1.0)*r22*x293)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+((x289*x290))+((r12*x293))+(((-0.0124226804123711)*x288))+(((-10.3092783505155)*py))+((x288*x289))+(((-0.0124226804123711)*x290))))+IKsqr(((((-1.0)*x289*x292))+(((-1.0)*x289*x291))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x292))+(((0.0124226804123711)*x291))+(((-1.0)*r22*x293))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+((x289*x290))+((r12*x293))+(((-0.0124226804123711)*x288))+(((-10.3092783505155)*py))+((x288*x289))+(((-0.0124226804123711)*x290))), ((((-1.0)*x289*x292))+(((-1.0)*x289*x291))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x292))+(((0.0124226804123711)*x291))+(((-1.0)*r22*x293))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x294=((1.0)*py);
IkReal x295=((0.12)*r10);
IkReal x296=(sj4*sj5);
IkReal x297=(cj5*sj3);
IkReal x298=((0.12)*r11);
IkReal x299=(sj3*sj5);
IkReal x300=((0.001205)*cj5);
IkReal x301=(cj3*cj4);
IkReal x302=((0.001205)*sj5);
IkReal x303=((0.12)*r21);
IkReal x304=((0.12)*cj4);
IkReal x305=((0.12)*r20);
IkReal x306=(cj5*sj4);
IkReal x307=(r20*x302);
IkReal x308=(r21*x300);
IkReal x309=((0.097)*(IKcos(j1)));
IkReal x310=(r11*x300);
IkReal x311=(r10*x302);
IkReal x312=((0.097)*(IKsin(j1)));
IkReal x313=((0.12)*cj3*sj4);
IkReal x314=(x308+x307);
IkReal x315=(x311+x310+x312+x294);
evalcond[0]=(((r22*x304))+((x303*x306))+x309+(((-1.0)*pz))+(((-1.0)*x314))+((x296*x305)));
evalcond[1]=((-0.0022)+((x298*x306))+(((-1.0)*x315))+((x295*x296))+((r12*x304)));
evalcond[2]=((((-1.0)*cj5*x298*x301))+x314+((x298*x299))+pz+(((-1.0)*x295*x297))+((r12*x313))+(((-1.0)*sj5*x295*x301))+(((-1.0)*x309)));
evalcond[3]=((-0.0022)+(((-1.0)*x297*x305))+((x299*x303))+(((-1.0)*sj5*x301*x305))+(((-1.0)*cj5*x301*x303))+(((-1.0)*x315))+((r22*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x316=((1.0)*sj1);
IkReal x317=(sj4*sj5);
IkReal x318=(cj4*r22);
IkReal x319=(cj4*r12);
IkReal x320=((1.0)*cj1);
IkReal x321=(cj5*r21*sj4);
IkReal x322=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x320*x322))+(((-1.0)*x319*x320))+(((-1.0)*x316*x321))+(((-1.0)*r10*x317*x320))+(((-1.0)*r20*x316*x317))+(((-1.0)*x316*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x321))+((cj1*x318))+(((-1.0)*x316*x322))+(((-1.0)*r10*x316*x317))+((cj1*r20*x317))+(((-1.0)*x316*x319)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x320*x322))+(((-1.0)*x319*x320))+(((-1.0)*x316*x321))+(((-1.0)*r10*x317*x320))+(((-1.0)*r20*x316*x317))+(((-1.0)*x316*x318))))+IKsqr((((cj1*x321))+((cj1*x318))+(((-1.0)*x316*x322))+(((-1.0)*r10*x316*x317))+((cj1*r20*x317))+(((-1.0)*x316*x319))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x320*x322))+(((-1.0)*x319*x320))+(((-1.0)*x316*x321))+(((-1.0)*r10*x317*x320))+(((-1.0)*r20*x316*x317))+(((-1.0)*x316*x318))), (((cj1*x321))+((cj1*x318))+(((-1.0)*x316*x322))+(((-1.0)*r10*x316*x317))+((cj1*r20*x317))+(((-1.0)*x316*x319))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x323=IKcos(j2);
IkReal x324=IKsin(j2);
IkReal x325=(sj3*sj5);
IkReal x326=((0.001205)*cj5);
IkReal x327=(r20*sj5);
IkReal x328=((1.0)*sj4);
IkReal x329=(r10*sj5);
IkReal x330=((1.0)*sj1);
IkReal x331=(cj5*r21);
IkReal x332=((1.0)*cj4);
IkReal x333=((0.12)*sj1);
IkReal x334=(cj3*sj4);
IkReal x335=(cj5*r11);
IkReal x336=(cj1*x323);
IkReal x337=((1.0)*cj5*sj3);
IkReal x338=(cj1*x324);
IkReal x339=(cj3*x332);
IkReal x340=(x324*x330);
evalcond[0]=((((-1.0)*x328*x331))+(((-1.0)*x327*x328))+x336+(((-1.0)*x340))+(((-1.0)*r22*x332)));
evalcond[1]=((((0.12)*x336))+(((-1.0)*x324*x333))+(((-1.0)*pz))+(((-0.001205)*x327))+(((0.097)*cj1))+(((-1.0)*r21*x326)));
evalcond[2]=((((-1.0)*x328*x335))+(((-1.0)*x338))+(((-1.0)*r12*x332))+(((-1.0)*x323*x330))+(((-1.0)*x328*x329)));
evalcond[3]=((-0.0022)+(((-1.0)*r11*x326))+(((-0.097)*sj1))+(((-0.12)*x338))+(((-1.0)*py))+(((-0.001205)*x329))+(((-1.0)*x323*x333)));
evalcond[4]=(((r22*x334))+((r21*x325))+(((-1.0)*r20*x337))+x338+((sj1*x323))+(((-1.0)*x331*x339))+(((-1.0)*x327*x339)));
evalcond[5]=(((r12*x334))+(((-1.0)*x329*x339))+((r11*x325))+x336+(((-1.0)*x340))+(((-1.0)*r10*x337))+(((-1.0)*x335*x339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x341=((1.0)*cj5);
IkReal x342=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x342;
j3eval[1]=IKsign(x342);
j3eval[2]=((IKabs(((((-1.0)*cj4*r10*sj5))+((r12*sj4))+(((-1.0)*cj4*r11*x341)))))+(IKabs((((r11*sj5))+(((-1.0)*r10*x341))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x343=((1.0)*sj5);
IkReal x344=((1.0)*cj5);
IkReal x345=((((-1.0)*r10*sj4*x343))+(((-1.0)*r11*sj4*x344))+(((-1.0)*cj4*r12)));
j3eval[0]=x345;
j3eval[1]=((IKabs(((((-1.0)*r20*x344))+((r21*sj5)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r20*x343))+(((-1.0)*cj4*r21*x344))))));
j3eval[2]=IKsign(x345);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x346=cj5*cj5;
IkReal x347=cj4*cj4;
IkReal x348=r00*r00;
IkReal x349=r01*r01;
IkReal x350=r02*r02;
IkReal x351=(r00*sj5);
IkReal x352=((1.0)*r01);
IkReal x353=((2.0)*cj5*r01);
IkReal x354=(cj4*r02*sj4);
IkReal x355=((1.0)*x349);
IkReal x356=(x346*x348);
IkReal x357=((((2.0)*x351*x354))+(((-1.0)*x347*x351*x353))+(((-1.0)*x355))+((x353*x354))+((x351*x353))+(((-1.0)*x356))+(((-1.0)*x350))+((x347*x350))+((x347*x356))+(((-1.0)*x346*x347*x355))+((x346*x349))+(((-1.0)*x347*x348)));
j3eval[0]=x357;
j3eval[1]=((IKabs(((((-1.0)*cj4*cj5*x352))+((r02*sj4))+(((-1.0)*cj4*x351)))))+(IKabs(((((-1.0)*sj5*x352))+((cj5*r00))))));
j3eval[2]=IKsign(x357);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x358=cj5*cj5;
IkReal x359=cj4*cj4;
IkReal x360=r00*r00;
IkReal x361=r01*r01;
IkReal x362=r02*r02;
IkReal x363=(cj5*r01);
IkReal x364=((1.0)*sj5);
IkReal x365=(r00*sj5);
IkReal x366=((1.0)*x360);
IkReal x367=((2.0)*cj4*r02*sj4);
IkReal x368=(x358*x361);
CheckValue<IkReal> x369 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r00*x364))+((r02*sj4))+(((-1.0)*cj4*x363)))),IkReal(((((-1.0)*r01*x364))+((cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x369.valid){
continue;
}
CheckValue<IkReal> x370=IKPowWithIntegerCheck(IKsign(((((-1.0)*x361))+(((-1.0)*x362))+(((-1.0)*x358*x366))+(((-2.0)*x359*x363*x365))+((x359*x362))+((x365*x367))+x368+(((-1.0)*x359*x368))+(((-1.0)*x359*x366))+(((2.0)*x363*x365))+((x363*x367))+((x358*x359*x360)))),-1);
if(!x370.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x369.value)+(((1.5707963267949)*(x370.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x371=IKsin(j3);
IkReal x372=IKcos(j3);
IkReal x373=(cj4*cj5);
IkReal x374=(cj5*r00);
IkReal x375=(r02*sj4);
IkReal x376=((1.0)*x372);
IkReal x377=(r01*x371);
IkReal x378=((1.0)*x371);
IkReal x379=(sj5*x372);
IkReal x380=(cj4*sj5*x371);
evalcond[0]=((((-1.0)*r22*sj4*x378))+((r20*x380))+((r21*x379))+((r21*x371*x373))+(((-1.0)*cj5*r20*x376)));
evalcond[1]=(((r11*x371*x373))+(((-1.0)*cj5*r10*x376))+((r10*x380))+((r11*x379))+(((-1.0)*r12*sj4*x378)));
evalcond[2]=((-1.0)+((r01*x379))+(((-1.0)*x374*x376))+(((-1.0)*x375*x378))+((x373*x377))+((r00*x380)));
evalcond[3]=((((-1.0)*r01*x373*x376))+((x372*x375))+(((-1.0)*x374*x378))+((sj5*x377))+(((-1.0)*cj4*r00*sj5*x376)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x381=((0.0124226804123711)*cj5);
IkReal x382=((0.0124226804123711)*sj5);
IkReal x383=((1.23711340206186)*sj4);
IkReal x384=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+((r11*x381))+(((-1.0)*cj5*r11*x383))+(((10.3092783505155)*py))+((r10*x382))+(((-1.0)*r10*sj5*x383))+(((-1.0)*r12*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x384))+(((10.3092783505155)*pz))+((r21*x381))+(((-1.0)*r20*sj5*x383))+(((-1.0)*cj5*r21*x383))+((r20*x382)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+((r11*x381))+(((-1.0)*cj5*r11*x383))+(((10.3092783505155)*py))+((r10*x382))+(((-1.0)*r10*sj5*x383))+(((-1.0)*r12*x384))))+IKsqr(((((-1.0)*r22*x384))+(((10.3092783505155)*pz))+((r21*x381))+(((-1.0)*r20*sj5*x383))+(((-1.0)*cj5*r21*x383))+((r20*x382))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+((r11*x381))+(((-1.0)*cj5*r11*x383))+(((10.3092783505155)*py))+((r10*x382))+(((-1.0)*r10*sj5*x383))+(((-1.0)*r12*x384))), ((((-1.0)*r22*x384))+(((10.3092783505155)*pz))+((r21*x381))+(((-1.0)*r20*sj5*x383))+(((-1.0)*cj5*r21*x383))+((r20*x382))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x385=((1.0)*pz);
IkReal x386=((0.12)*r10);
IkReal x387=(sj4*sj5);
IkReal x388=(cj5*sj3);
IkReal x389=((0.12)*r11);
IkReal x390=(sj3*sj5);
IkReal x391=((0.001205)*cj5);
IkReal x392=(cj3*cj4);
IkReal x393=((0.001205)*sj5);
IkReal x394=((0.12)*r21);
IkReal x395=((0.12)*cj4);
IkReal x396=((0.12)*r20);
IkReal x397=(cj5*sj4);
IkReal x398=((0.097)*(IKcos(j1)));
IkReal x399=(r20*x393);
IkReal x400=(r21*x391);
IkReal x401=((0.097)*(IKsin(j1)));
IkReal x402=(r11*x391);
IkReal x403=(r10*x393);
IkReal x404=((0.12)*cj3*sj4);
IkReal x405=(x403+x402);
IkReal x406=(x385+x399+x400);
evalcond[0]=((-0.0022)+(((-1.0)*x389*x397))+(((-1.0)*r12*x395))+x405+py+(((-1.0)*x386*x387))+(((-1.0)*x401)));
evalcond[1]=(((x394*x397))+x398+((r22*x395))+((x387*x396))+(((-1.0)*x406)));
evalcond[2]=(((r12*x404))+x398+(((-1.0)*x386*x388))+(((-1.0)*cj5*x389*x392))+(((-1.0)*sj5*x386*x392))+((x389*x390))+(((-1.0)*x406)));
evalcond[3]=((0.0022)+((sj5*x392*x396))+(((-1.0)*py))+x401+((cj5*x392*x394))+(((-1.0)*x390*x394))+(((-1.0)*x405))+(((-1.0)*r22*x404))+((x388*x396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x407=((1.0)*sj1);
IkReal x408=(sj4*sj5);
IkReal x409=(cj4*r12);
IkReal x410=(cj4*r22);
IkReal x411=(cj5*sj4);
IkReal x412=(cj1*x411);
if( IKabs((((r11*x412))+(((-1.0)*r20*x407*x408))+(((-1.0)*x407*x410))+(((-1.0)*r21*x407*x411))+((cj1*r10*x408))+((cj1*x409)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x409))+((r10*sj1*x408))+((cj1*r20*x408))+((r21*x412))+((r11*sj1*x411))+((cj1*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x412))+(((-1.0)*r20*x407*x408))+(((-1.0)*x407*x410))+(((-1.0)*r21*x407*x411))+((cj1*r10*x408))+((cj1*x409))))+IKsqr((((sj1*x409))+((r10*sj1*x408))+((cj1*r20*x408))+((r21*x412))+((r11*sj1*x411))+((cj1*x410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x412))+(((-1.0)*r20*x407*x408))+(((-1.0)*x407*x410))+(((-1.0)*r21*x407*x411))+((cj1*r10*x408))+((cj1*x409))), (((sj1*x409))+((r10*sj1*x408))+((cj1*r20*x408))+((r21*x412))+((r11*sj1*x411))+((cj1*x410))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x413=IKcos(j2);
IkReal x414=IKsin(j2);
IkReal x415=(sj3*sj5);
IkReal x416=((0.001205)*cj5);
IkReal x417=(r20*sj5);
IkReal x418=((1.0)*sj4);
IkReal x419=(r10*sj5);
IkReal x420=(cj5*r21);
IkReal x421=((1.0)*cj4);
IkReal x422=(cj3*sj4);
IkReal x423=(cj5*r11);
IkReal x424=(sj1*x413);
IkReal x425=(cj1*x414);
IkReal x426=(cj1*x413);
IkReal x427=((1.0)*cj5*sj3);
IkReal x428=(cj3*x421);
IkReal x429=(sj1*x414);
IkReal x430=(x425+x424);
evalcond[0]=((((-1.0)*x418*x419))+(((-1.0)*r12*x421))+x430+(((-1.0)*x418*x423)));
evalcond[1]=((((-1.0)*x417*x418))+(((-1.0)*x429))+x426+(((-1.0)*x418*x420))+(((-1.0)*r22*x421)));
evalcond[2]=((((-0.12)*x429))+(((-1.0)*r21*x416))+(((0.12)*x426))+(((-1.0)*pz))+(((-0.001205)*x417))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x424))+(((0.12)*x425))+(((-1.0)*py))+(((-0.001205)*x419))+(((-1.0)*r11*x416)));
evalcond[4]=((((-1.0)*x420*x428))+(((-1.0)*r20*x427))+((r21*x415))+x430+((r22*x422))+(((-1.0)*x417*x428)));
evalcond[5]=((((-1.0)*x426))+((r11*x415))+x429+(((-1.0)*x419*x428))+(((-1.0)*x423*x428))+((r12*x422))+(((-1.0)*r10*x427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x431=((1.0)*sj5);
IkReal x432=((1.0)*cj5);
CheckValue<IkReal> x433=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj4*x431))+(((-1.0)*r11*sj4*x432))+(((-1.0)*cj4*r12)))),-1);
if(!x433.valid){
continue;
}
CheckValue<IkReal> x434 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x432)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x432))+(((-1.0)*cj4*r20*x431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x434.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x433.value)))+(x434.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x435=IKsin(j3);
IkReal x436=IKcos(j3);
IkReal x437=(cj4*cj5);
IkReal x438=(cj5*r00);
IkReal x439=(r02*sj4);
IkReal x440=((1.0)*x436);
IkReal x441=(r01*x435);
IkReal x442=((1.0)*x435);
IkReal x443=(sj5*x436);
IkReal x444=(cj4*sj5*x435);
evalcond[0]=((((-1.0)*cj5*r20*x440))+((r21*x443))+(((-1.0)*r22*sj4*x442))+((r21*x435*x437))+((r20*x444)));
evalcond[1]=((((-1.0)*cj5*r10*x440))+((r11*x435*x437))+(((-1.0)*r12*sj4*x442))+((r10*x444))+((r11*x443)));
evalcond[2]=((-1.0)+(((-1.0)*x438*x440))+(((-1.0)*x439*x442))+((r01*x443))+((r00*x444))+((x437*x441)));
evalcond[3]=(((x436*x439))+(((-1.0)*x438*x442))+(((-1.0)*cj4*r00*sj5*x440))+((sj5*x441))+(((-1.0)*r01*x437*x440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x445=((0.0124226804123711)*cj5);
IkReal x446=((0.0124226804123711)*sj5);
IkReal x447=((1.23711340206186)*sj4);
IkReal x448=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-1.0)*cj5*r11*x447))+(((-1.0)*r12*x448))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x447))+((r10*x446))+((r11*x445)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x447))+(((10.3092783505155)*pz))+((r21*x445))+(((-1.0)*r22*x448))+(((-1.0)*r20*sj5*x447))+((r20*x446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*cj5*r11*x447))+(((-1.0)*r12*x448))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x447))+((r10*x446))+((r11*x445))))+IKsqr(((((-1.0)*cj5*r21*x447))+(((10.3092783505155)*pz))+((r21*x445))+(((-1.0)*r22*x448))+(((-1.0)*r20*sj5*x447))+((r20*x446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*cj5*r11*x447))+(((-1.0)*r12*x448))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x447))+((r10*x446))+((r11*x445))), ((((-1.0)*cj5*r21*x447))+(((10.3092783505155)*pz))+((r21*x445))+(((-1.0)*r22*x448))+(((-1.0)*r20*sj5*x447))+((r20*x446))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x449=((1.0)*pz);
IkReal x450=((0.12)*r10);
IkReal x451=(sj4*sj5);
IkReal x452=(cj5*sj3);
IkReal x453=((0.12)*r11);
IkReal x454=(sj3*sj5);
IkReal x455=((0.001205)*cj5);
IkReal x456=(cj3*cj4);
IkReal x457=((0.001205)*sj5);
IkReal x458=((0.12)*r21);
IkReal x459=((0.12)*cj4);
IkReal x460=((0.12)*r20);
IkReal x461=(cj5*sj4);
IkReal x462=((0.097)*(IKcos(j1)));
IkReal x463=(r20*x457);
IkReal x464=(r21*x455);
IkReal x465=((0.097)*(IKsin(j1)));
IkReal x466=(r11*x455);
IkReal x467=(r10*x457);
IkReal x468=((0.12)*cj3*sj4);
IkReal x469=(x467+x466);
IkReal x470=(x449+x463+x464);
evalcond[0]=((-0.0022)+(((-1.0)*x465))+(((-1.0)*r12*x459))+x469+(((-1.0)*x453*x461))+py+(((-1.0)*x450*x451)));
evalcond[1]=((((-1.0)*x470))+x462+((x451*x460))+((x458*x461))+((r22*x459)));
evalcond[2]=(((x453*x454))+(((-1.0)*x470))+((r12*x468))+x462+(((-1.0)*x450*x452))+(((-1.0)*cj5*x453*x456))+(((-1.0)*sj5*x450*x456)));
evalcond[3]=((0.0022)+((x452*x460))+((cj5*x456*x458))+((sj5*x456*x460))+(((-1.0)*x469))+(((-1.0)*x454*x458))+(((-1.0)*py))+x465+(((-1.0)*r22*x468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x471=((1.0)*sj1);
IkReal x472=(sj4*sj5);
IkReal x473=(cj4*r12);
IkReal x474=(cj4*r22);
IkReal x475=(cj5*sj4);
IkReal x476=(cj1*x475);
if( IKabs((((cj1*x473))+((cj1*r10*x472))+(((-1.0)*r20*x471*x472))+((r11*x476))+(((-1.0)*r21*x471*x475))+(((-1.0)*x471*x474)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x472))+((r21*x476))+((r11*sj1*x475))+((cj1*x474))+((sj1*x473))+((r10*sj1*x472)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x473))+((cj1*r10*x472))+(((-1.0)*r20*x471*x472))+((r11*x476))+(((-1.0)*r21*x471*x475))+(((-1.0)*x471*x474))))+IKsqr((((cj1*r20*x472))+((r21*x476))+((r11*sj1*x475))+((cj1*x474))+((sj1*x473))+((r10*sj1*x472))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x473))+((cj1*r10*x472))+(((-1.0)*r20*x471*x472))+((r11*x476))+(((-1.0)*r21*x471*x475))+(((-1.0)*x471*x474))), (((cj1*r20*x472))+((r21*x476))+((r11*sj1*x475))+((cj1*x474))+((sj1*x473))+((r10*sj1*x472))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x477=IKcos(j2);
IkReal x478=IKsin(j2);
IkReal x479=(sj3*sj5);
IkReal x480=((0.001205)*cj5);
IkReal x481=(r20*sj5);
IkReal x482=((1.0)*sj4);
IkReal x483=(r10*sj5);
IkReal x484=(cj5*r21);
IkReal x485=((1.0)*cj4);
IkReal x486=(cj3*sj4);
IkReal x487=(cj5*r11);
IkReal x488=(sj1*x477);
IkReal x489=(cj1*x478);
IkReal x490=(cj1*x477);
IkReal x491=((1.0)*cj5*sj3);
IkReal x492=(cj3*x485);
IkReal x493=(sj1*x478);
IkReal x494=(x489+x488);
evalcond[0]=(x494+(((-1.0)*x482*x487))+(((-1.0)*x482*x483))+(((-1.0)*r12*x485)));
evalcond[1]=((((-1.0)*x481*x482))+(((-1.0)*x493))+x490+(((-1.0)*r22*x485))+(((-1.0)*x482*x484)));
evalcond[2]=((((0.12)*x490))+(((-1.0)*pz))+(((-0.12)*x493))+(((0.097)*cj1))+(((-1.0)*r21*x480))+(((-0.001205)*x481)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*py))+(((0.12)*x488))+(((0.12)*x489))+(((-0.001205)*x483))+(((-1.0)*r11*x480)));
evalcond[4]=(((r21*x479))+((r22*x486))+x494+(((-1.0)*x481*x492))+(((-1.0)*x484*x492))+(((-1.0)*r20*x491)));
evalcond[5]=((((-1.0)*r10*x491))+((r12*x486))+(((-1.0)*x483*x492))+((r11*x479))+(((-1.0)*x490))+x493+(((-1.0)*x487*x492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x495=((1.0)*cj5);
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x495))+((r11*sj5)))),IkReal(((((-1.0)*cj4*r10*sj5))+((r12*sj4))+(((-1.0)*cj4*r11*x495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
CheckValue<IkReal> x497=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x497.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x496.value)+(((1.5707963267949)*(x497.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x498=IKsin(j3);
IkReal x499=IKcos(j3);
IkReal x500=(cj4*cj5);
IkReal x501=(cj5*r00);
IkReal x502=(r02*sj4);
IkReal x503=((1.0)*x499);
IkReal x504=(r01*x498);
IkReal x505=((1.0)*x498);
IkReal x506=(sj5*x499);
IkReal x507=(cj4*sj5*x498);
evalcond[0]=(((r20*x507))+((r21*x506))+(((-1.0)*r22*sj4*x505))+((r21*x498*x500))+(((-1.0)*cj5*r20*x503)));
evalcond[1]=(((r11*x498*x500))+(((-1.0)*cj5*r10*x503))+((r10*x507))+(((-1.0)*r12*sj4*x505))+((r11*x506)));
evalcond[2]=((-1.0)+((x500*x504))+(((-1.0)*x502*x505))+(((-1.0)*x501*x503))+((r01*x506))+((r00*x507)));
evalcond[3]=(((sj5*x504))+(((-1.0)*cj4*r00*sj5*x503))+(((-1.0)*x501*x505))+((x499*x502))+(((-1.0)*r01*x500*x503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x508=((0.0124226804123711)*cj5);
IkReal x509=((0.0124226804123711)*sj5);
IkReal x510=((1.23711340206186)*sj4);
IkReal x511=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+((r10*x509))+(((-1.0)*cj5*r11*x510))+(((10.3092783505155)*py))+(((-1.0)*r12*x511))+((r11*x508))+(((-1.0)*r10*sj5*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r20*x509))+(((-1.0)*r22*x511))+((r21*x508))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x510))+(((-1.0)*cj5*r21*x510)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+((r10*x509))+(((-1.0)*cj5*r11*x510))+(((10.3092783505155)*py))+(((-1.0)*r12*x511))+((r11*x508))+(((-1.0)*r10*sj5*x510))))+IKsqr((((r20*x509))+(((-1.0)*r22*x511))+((r21*x508))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x510))+(((-1.0)*cj5*r21*x510))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+((r10*x509))+(((-1.0)*cj5*r11*x510))+(((10.3092783505155)*py))+(((-1.0)*r12*x511))+((r11*x508))+(((-1.0)*r10*sj5*x510))), (((r20*x509))+(((-1.0)*r22*x511))+((r21*x508))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x510))+(((-1.0)*cj5*r21*x510))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x512=((1.0)*pz);
IkReal x513=((0.12)*r10);
IkReal x514=(sj4*sj5);
IkReal x515=(cj5*sj3);
IkReal x516=((0.12)*r11);
IkReal x517=(sj3*sj5);
IkReal x518=((0.001205)*cj5);
IkReal x519=(cj3*cj4);
IkReal x520=((0.001205)*sj5);
IkReal x521=((0.12)*r21);
IkReal x522=((0.12)*cj4);
IkReal x523=((0.12)*r20);
IkReal x524=(cj5*sj4);
IkReal x525=((0.097)*(IKcos(j1)));
IkReal x526=(r20*x520);
IkReal x527=(r21*x518);
IkReal x528=((0.097)*(IKsin(j1)));
IkReal x529=(r11*x518);
IkReal x530=(r10*x520);
IkReal x531=((0.12)*cj3*sj4);
IkReal x532=(x530+x529);
IkReal x533=(x526+x527+x512);
evalcond[0]=((-0.0022)+(((-1.0)*x528))+(((-1.0)*x513*x514))+py+x532+(((-1.0)*x516*x524))+(((-1.0)*r12*x522)));
evalcond[1]=((((-1.0)*x533))+((r22*x522))+((x521*x524))+x525+((x514*x523)));
evalcond[2]=(((r12*x531))+(((-1.0)*x533))+(((-1.0)*x513*x515))+(((-1.0)*sj5*x513*x519))+((x516*x517))+x525+(((-1.0)*cj5*x516*x519)));
evalcond[3]=((0.0022)+(((-1.0)*r22*x531))+((sj5*x519*x523))+((cj5*x519*x521))+((x515*x523))+(((-1.0)*x532))+(((-1.0)*py))+(((-1.0)*x517*x521))+x528);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x534=((1.0)*sj1);
IkReal x535=(sj4*sj5);
IkReal x536=(cj4*r12);
IkReal x537=(cj4*r22);
IkReal x538=(cj5*sj4);
IkReal x539=(cj1*x538);
if( IKabs(((((-1.0)*r20*x534*x535))+(((-1.0)*x534*x537))+((r11*x539))+((cj1*x536))+(((-1.0)*r21*x534*x538))+((cj1*r10*x535)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x535))+((r11*sj1*x538))+((sj1*x536))+((cj1*x537))+((r10*sj1*x535))+((r21*x539)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x534*x535))+(((-1.0)*x534*x537))+((r11*x539))+((cj1*x536))+(((-1.0)*r21*x534*x538))+((cj1*r10*x535))))+IKsqr((((cj1*r20*x535))+((r11*sj1*x538))+((sj1*x536))+((cj1*x537))+((r10*sj1*x535))+((r21*x539))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x534*x535))+(((-1.0)*x534*x537))+((r11*x539))+((cj1*x536))+(((-1.0)*r21*x534*x538))+((cj1*r10*x535))), (((cj1*r20*x535))+((r11*sj1*x538))+((sj1*x536))+((cj1*x537))+((r10*sj1*x535))+((r21*x539))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x540=IKcos(j2);
IkReal x541=IKsin(j2);
IkReal x542=(sj3*sj5);
IkReal x543=((0.001205)*cj5);
IkReal x544=(r20*sj5);
IkReal x545=((1.0)*sj4);
IkReal x546=(r10*sj5);
IkReal x547=(cj5*r21);
IkReal x548=((1.0)*cj4);
IkReal x549=(cj3*sj4);
IkReal x550=(cj5*r11);
IkReal x551=(sj1*x540);
IkReal x552=(cj1*x541);
IkReal x553=(cj1*x540);
IkReal x554=((1.0)*cj5*sj3);
IkReal x555=(cj3*x548);
IkReal x556=(sj1*x541);
IkReal x557=(x552+x551);
evalcond[0]=((((-1.0)*x545*x546))+(((-1.0)*x545*x550))+x557+(((-1.0)*r12*x548)));
evalcond[1]=((((-1.0)*r22*x548))+(((-1.0)*x544*x545))+(((-1.0)*x556))+(((-1.0)*x545*x547))+x553);
evalcond[2]=((((-0.12)*x556))+(((-1.0)*r21*x543))+(((-1.0)*pz))+(((0.12)*x553))+(((0.097)*cj1))+(((-0.001205)*x544)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*py))+(((0.12)*x551))+(((0.12)*x552))+(((-0.001205)*x546))+(((-1.0)*r11*x543)));
evalcond[4]=(((r21*x542))+(((-1.0)*x544*x555))+(((-1.0)*r20*x554))+(((-1.0)*x547*x555))+((r22*x549))+x557);
evalcond[5]=((((-1.0)*x553))+((r11*x542))+(((-1.0)*r10*x554))+(((-1.0)*x550*x555))+((r12*x549))+x556+(((-1.0)*x546*x555)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x558=((1.0)*r00);
IkReal x559=(((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)));
j3eval[0]=x559;
j3eval[1]=IKsign(x559);
j3eval[2]=((IKabs(((((-1.0)*cj4*cj5*r01))+((r02*sj4))+(((-1.0)*cj4*sj5*x558)))))+(IKabs(((((-1.0)*cj5*x558))+((r01*sj5))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x560=((1.0)*sj5);
IkReal x561=((1.0)*cj5);
IkReal x562=((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x560))+(((-1.0)*r01*sj4*x561)));
j3eval[0]=x562;
j3eval[1]=IKsign(x562);
j3eval[2]=((IKabs((((r21*sj5))+(((-1.0)*r20*x561)))))+(IKabs((((r22*sj4))+(((-1.0)*cj4*r21*x561))+(((-1.0)*cj4*r20*x560))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x563=cj4*cj4;
IkReal x564=r11*r11;
IkReal x565=cj5*cj5;
IkReal x566=r10*r10;
IkReal x567=r12*r12;
IkReal x568=(cj5*r11);
IkReal x569=((1.0)*cj4);
IkReal x570=((1.0)*x563);
IkReal x571=((2.0)*r10*sj5);
IkReal x572=(cj4*r12*sj4);
IkReal x573=(x565*x566);
IkReal x574=(x564*x565);
IkReal x575=((((-2.0)*x568*x572))+((x563*x574))+(((-1.0)*x570*x573))+(((-1.0)*x571*x572))+((x563*x566))+(((-1.0)*x574))+x573+x567+x564+(((-1.0)*x567*x570))+(((-1.0)*x568*x571))+((x563*x568*x571)));
j3eval[0]=x575;
j3eval[1]=((IKabs(((((-1.0)*r10*sj5*x569))+((r12*sj4))+(((-1.0)*x568*x569)))))+(IKabs((((cj5*r10))+(((-1.0)*r11*sj5))))));
j3eval[2]=IKsign(x575);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x576=cj4*cj4;
IkReal x577=r11*r11;
IkReal x578=cj5*cj5;
IkReal x579=r10*r10;
IkReal x580=r12*r12;
IkReal x581=(cj5*r11);
IkReal x582=((1.0)*sj5);
IkReal x583=((2.0)*r10*sj5);
IkReal x584=(cj4*r12*sj4);
IkReal x585=((1.0)*x576);
IkReal x586=(x578*x579);
IkReal x587=(x577*x578);
CheckValue<IkReal> x588=IKPowWithIntegerCheck(IKsign(((((-1.0)*x580*x585))+(((-1.0)*x587))+((x576*x579))+(((-1.0)*x583*x584))+((x576*x581*x583))+(((-1.0)*x585*x586))+x577+x580+x586+(((-2.0)*x581*x584))+((x576*x587))+(((-1.0)*x581*x583)))),-1);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589 = IKatan2WithCheck(IkReal(((((-1.0)*cj4*r10*x582))+((r12*sj4))+(((-1.0)*cj4*x581)))),IkReal((((cj5*r10))+(((-1.0)*r11*x582)))),IKFAST_ATAN2_MAGTHRESH);
if(!x589.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x588.value)))+(x589.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x590=IKsin(j3);
IkReal x591=IKcos(j3);
IkReal x592=(cj4*cj5);
IkReal x593=(r12*sj4);
IkReal x594=(cj5*r10);
IkReal x595=((1.0)*x591);
IkReal x596=(r11*x590);
IkReal x597=((1.0)*x590);
IkReal x598=(sj5*x591);
IkReal x599=(cj4*sj5*x590);
evalcond[0]=((((-1.0)*cj5*r20*x595))+((r21*x590*x592))+(((-1.0)*r22*sj4*x597))+((r21*x598))+((r20*x599)));
evalcond[1]=((((-1.0)*cj5*r00*x595))+(((-1.0)*r02*sj4*x597))+((r01*x598))+((r00*x599))+((r01*x590*x592)));
evalcond[2]=((1.0)+(((-1.0)*x593*x597))+(((-1.0)*x594*x595))+((r11*x598))+((r10*x599))+((x592*x596)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x595))+(((-1.0)*r11*x592*x595))+(((-1.0)*x594*x597))+((x591*x593))+((sj5*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x600=((1.23711340206186)*sj4);
IkReal x601=(cj5*r21);
IkReal x602=((1.23711340206186)*cj4);
IkReal x603=(r00*sj5);
IkReal x604=(r20*sj5);
IkReal x605=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x603))+(((0.0124226804123711)*x605))+(((-1.0)*x600*x603))+(((-1.0)*x600*x605))+(((-1.0)*r02*x602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*r22*x602))+(((0.0124226804123711)*x601))+(((0.0124226804123711)*x604))+(((-1.0)*x600*x601))+(((-1.0)*x600*x604)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x603))+(((0.0124226804123711)*x605))+(((-1.0)*x600*x603))+(((-1.0)*x600*x605))+(((-1.0)*r02*x602))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*r22*x602))+(((0.0124226804123711)*x601))+(((0.0124226804123711)*x604))+(((-1.0)*x600*x601))+(((-1.0)*x600*x604))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x603))+(((0.0124226804123711)*x605))+(((-1.0)*x600*x603))+(((-1.0)*x600*x605))+(((-1.0)*r02*x602))), ((((10.3092783505155)*pz))+(((-1.0)*r22*x602))+(((0.0124226804123711)*x601))+(((0.0124226804123711)*x604))+(((-1.0)*x600*x601))+(((-1.0)*x600*x604))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x606=((1.0)*pz);
IkReal x607=((0.12)*sj3);
IkReal x608=((0.12)*cj4);
IkReal x609=((0.001205)*cj5);
IkReal x610=(r20*sj5);
IkReal x611=((0.12)*sj4);
IkReal x612=(r00*sj5);
IkReal x613=(cj5*r01);
IkReal x614=(cj5*r21);
IkReal x615=((0.097)*(IKcos(j1)));
IkReal x616=((0.001205)*x610);
IkReal x617=(r21*x609);
IkReal x618=((0.097)*(IKsin(j1)));
IkReal x619=(r01*x609);
IkReal x620=((0.001205)*x612);
IkReal x621=(x619+x620);
IkReal x622=(x606+x616+x617);
evalcond[0]=((-0.0022)+(((-1.0)*x611*x612))+(((-1.0)*x611*x613))+px+(((-1.0)*x618))+x621+(((-1.0)*r02*x608)));
evalcond[1]=((((-1.0)*x622))+((x611*x614))+x615+((x610*x611))+((r22*x608)));
evalcond[2]=((((-1.0)*cj5*r00*x607))+(((-1.0)*cj3*x608*x612))+(((-1.0)*cj3*x608*x613))+(((-1.0)*x622))+((r01*sj5*x607))+x615+((cj3*r02*x611)));
evalcond[3]=((0.0022)+((cj5*r20*x607))+(((-1.0)*x621))+(((-1.0)*px))+x618+(((-1.0)*r21*sj5*x607))+((cj3*x608*x610))+((cj3*x608*x614))+(((-1.0)*cj3*r22*x611)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x623=(sj1*sj4);
IkReal x624=(cj5*r01);
IkReal x625=(r20*sj5);
IkReal x626=(cj4*sj1);
IkReal x627=(r00*sj5);
IkReal x628=(cj1*sj4);
IkReal x629=(cj5*r21);
IkReal x630=(cj1*cj4);
if( IKabs((((r02*x630))+(((-1.0)*x623*x629))+(((-1.0)*x623*x625))+(((-1.0)*r22*x626))+((x624*x628))+((x627*x628)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x626))+((x628*x629))+((r22*x630))+((x625*x628))+((x623*x624))+((x623*x627)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x630))+(((-1.0)*x623*x629))+(((-1.0)*x623*x625))+(((-1.0)*r22*x626))+((x624*x628))+((x627*x628))))+IKsqr((((r02*x626))+((x628*x629))+((r22*x630))+((x625*x628))+((x623*x624))+((x623*x627))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x630))+(((-1.0)*x623*x629))+(((-1.0)*x623*x625))+(((-1.0)*r22*x626))+((x624*x628))+((x627*x628))), (((r02*x626))+((x628*x629))+((r22*x630))+((x625*x628))+((x623*x624))+((x623*x627))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x631=IKcos(j2);
IkReal x632=IKsin(j2);
IkReal x633=(cj3*sj4);
IkReal x634=((1.0)*cj5);
IkReal x635=(cj3*cj4);
IkReal x636=((0.001205)*cj5);
IkReal x637=(sj3*sj5);
IkReal x638=(r20*sj5);
IkReal x639=((1.0)*sj4);
IkReal x640=(r00*sj5);
IkReal x641=((1.0)*cj4);
IkReal x642=(sj1*x631);
IkReal x643=(cj1*x632);
IkReal x644=(cj1*x631);
IkReal x645=(sj1*x632);
IkReal x646=(x643+x642);
evalcond[0]=((((-1.0)*x639*x640))+(((-1.0)*r02*x641))+x646+(((-1.0)*r01*sj4*x634)));
evalcond[1]=((((-1.0)*x645))+(((-1.0)*x638*x639))+(((-1.0)*r22*x641))+(((-1.0)*r21*sj4*x634))+x644);
evalcond[2]=((((-0.001205)*x638))+(((-1.0)*pz))+(((-1.0)*r21*x636))+(((-0.12)*x645))+(((0.097)*cj1))+(((0.12)*x644)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r01*x636))+(((-0.001205)*x640))+(((-1.0)*px))+(((0.12)*x642))+(((0.12)*x643)));
evalcond[4]=(((r21*x637))+(((-1.0)*r21*x634*x635))+((r22*x633))+(((-1.0)*x635*x638))+x646+(((-1.0)*r20*sj3*x634)));
evalcond[5]=((((-1.0)*r00*sj3*x634))+((r02*x633))+(((-1.0)*x644))+(((-1.0)*r01*x634*x635))+(((-1.0)*x635*x640))+((r01*x637))+x645);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x647=((1.0)*sj5);
IkReal x648=((1.0)*cj5);
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x648)))),IkReal((((r22*sj4))+(((-1.0)*cj4*r21*x648))+(((-1.0)*cj4*r20*x647)))),IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
CheckValue<IkReal> x650=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj4*r02))+(((-1.0)*r00*sj4*x647))+(((-1.0)*r01*sj4*x648)))),-1);
if(!x650.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x649.value)+(((1.5707963267949)*(x650.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x651=IKsin(j3);
IkReal x652=IKcos(j3);
IkReal x653=(cj4*cj5);
IkReal x654=(r12*sj4);
IkReal x655=(cj5*r10);
IkReal x656=((1.0)*x652);
IkReal x657=(r11*x651);
IkReal x658=((1.0)*x651);
IkReal x659=(sj5*x652);
IkReal x660=(cj4*sj5*x651);
evalcond[0]=(((r20*x660))+(((-1.0)*r22*sj4*x658))+((r21*x659))+(((-1.0)*cj5*r20*x656))+((r21*x651*x653)));
evalcond[1]=(((r00*x660))+(((-1.0)*cj5*r00*x656))+((r01*x651*x653))+(((-1.0)*r02*sj4*x658))+((r01*x659)));
evalcond[2]=((1.0)+(((-1.0)*x655*x656))+((x653*x657))+((r11*x659))+((r10*x660))+(((-1.0)*x654*x658)));
evalcond[3]=((((-1.0)*r11*x653*x656))+((x652*x654))+(((-1.0)*x655*x658))+((sj5*x657))+(((-1.0)*cj4*r10*sj5*x656)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x661=((1.23711340206186)*sj4);
IkReal x662=(cj5*r21);
IkReal x663=((1.23711340206186)*cj4);
IkReal x664=(r00*sj5);
IkReal x665=(r20*sj5);
IkReal x666=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((10.3092783505155)*px))+(((-1.0)*x661*x664))+(((-1.0)*x661*x666))+(((0.0124226804123711)*x666))+(((0.0124226804123711)*x664))+(((-1.0)*r02*x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x663))+(((10.3092783505155)*pz))+(((-1.0)*x661*x662))+(((-1.0)*x661*x665))+(((0.0124226804123711)*x665))+(((0.0124226804123711)*x662)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((10.3092783505155)*px))+(((-1.0)*x661*x664))+(((-1.0)*x661*x666))+(((0.0124226804123711)*x666))+(((0.0124226804123711)*x664))+(((-1.0)*r02*x663))))+IKsqr(((((-1.0)*r22*x663))+(((10.3092783505155)*pz))+(((-1.0)*x661*x662))+(((-1.0)*x661*x665))+(((0.0124226804123711)*x665))+(((0.0124226804123711)*x662))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((10.3092783505155)*px))+(((-1.0)*x661*x664))+(((-1.0)*x661*x666))+(((0.0124226804123711)*x666))+(((0.0124226804123711)*x664))+(((-1.0)*r02*x663))), ((((-1.0)*r22*x663))+(((10.3092783505155)*pz))+(((-1.0)*x661*x662))+(((-1.0)*x661*x665))+(((0.0124226804123711)*x665))+(((0.0124226804123711)*x662))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x667=((1.0)*pz);
IkReal x668=((0.12)*sj3);
IkReal x669=((0.12)*cj4);
IkReal x670=((0.001205)*cj5);
IkReal x671=(r20*sj5);
IkReal x672=((0.12)*sj4);
IkReal x673=(r00*sj5);
IkReal x674=(cj5*r01);
IkReal x675=(cj5*r21);
IkReal x676=((0.097)*(IKcos(j1)));
IkReal x677=((0.001205)*x671);
IkReal x678=(r21*x670);
IkReal x679=((0.097)*(IKsin(j1)));
IkReal x680=(r01*x670);
IkReal x681=((0.001205)*x673);
IkReal x682=(x681+x680);
IkReal x683=(x667+x678+x677);
evalcond[0]=((-0.0022)+px+x682+(((-1.0)*x672*x674))+(((-1.0)*x672*x673))+(((-1.0)*r02*x669))+(((-1.0)*x679)));
evalcond[1]=(((x672*x675))+((x671*x672))+(((-1.0)*x683))+x676+((r22*x669)));
evalcond[2]=((((-1.0)*x683))+(((-1.0)*cj5*r00*x668))+(((-1.0)*cj3*x669*x674))+(((-1.0)*cj3*x669*x673))+((cj3*r02*x672))+x676+((r01*sj5*x668)));
evalcond[3]=((0.0022)+((cj5*r20*x668))+(((-1.0)*x682))+((cj3*x669*x675))+((cj3*x669*x671))+(((-1.0)*px))+(((-1.0)*r21*sj5*x668))+x679+(((-1.0)*cj3*r22*x672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x684=(sj1*sj4);
IkReal x685=(cj5*r01);
IkReal x686=(r20*sj5);
IkReal x687=(cj4*sj1);
IkReal x688=(r00*sj5);
IkReal x689=(cj1*sj4);
IkReal x690=(cj5*r21);
IkReal x691=(cj1*cj4);
if( IKabs(((((-1.0)*x684*x686))+((x688*x689))+(((-1.0)*r22*x687))+((x685*x689))+((r02*x691))+(((-1.0)*x684*x690)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x686*x689))+((x689*x690))+((r22*x691))+((x684*x688))+((x684*x685))+((r02*x687)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x684*x686))+((x688*x689))+(((-1.0)*r22*x687))+((x685*x689))+((r02*x691))+(((-1.0)*x684*x690))))+IKsqr((((x686*x689))+((x689*x690))+((r22*x691))+((x684*x688))+((x684*x685))+((r02*x687))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x684*x686))+((x688*x689))+(((-1.0)*r22*x687))+((x685*x689))+((r02*x691))+(((-1.0)*x684*x690))), (((x686*x689))+((x689*x690))+((r22*x691))+((x684*x688))+((x684*x685))+((r02*x687))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x692=IKcos(j2);
IkReal x693=IKsin(j2);
IkReal x694=(cj3*sj4);
IkReal x695=((1.0)*cj5);
IkReal x696=(cj3*cj4);
IkReal x697=((0.001205)*cj5);
IkReal x698=(sj3*sj5);
IkReal x699=(r20*sj5);
IkReal x700=((1.0)*sj4);
IkReal x701=(r00*sj5);
IkReal x702=((1.0)*cj4);
IkReal x703=(sj1*x692);
IkReal x704=(cj1*x693);
IkReal x705=(cj1*x692);
IkReal x706=(sj1*x693);
IkReal x707=(x703+x704);
evalcond[0]=((((-1.0)*r02*x702))+x707+(((-1.0)*x700*x701))+(((-1.0)*r01*sj4*x695)));
evalcond[1]=((((-1.0)*r21*sj4*x695))+(((-1.0)*x706))+(((-1.0)*x699*x700))+x705+(((-1.0)*r22*x702)));
evalcond[2]=((((-0.001205)*x699))+(((-1.0)*pz))+(((0.097)*cj1))+(((0.12)*x705))+(((-1.0)*r21*x697))+(((-0.12)*x706)));
evalcond[3]=((0.0022)+(((-1.0)*r01*x697))+(((0.097)*sj1))+(((-1.0)*px))+(((0.12)*x703))+(((0.12)*x704))+(((-0.001205)*x701)));
evalcond[4]=((((-1.0)*x696*x699))+(((-1.0)*r20*sj3*x695))+(((-1.0)*r21*x695*x696))+((r22*x694))+x707+((r21*x698)));
evalcond[5]=((((-1.0)*x696*x701))+(((-1.0)*x705))+((r02*x694))+(((-1.0)*r01*x695*x696))+(((-1.0)*r00*sj3*x695))+x706+((r01*x698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x708=((1.0)*r00);
CheckValue<IkReal> x709=IKPowWithIntegerCheck(IKsign((((cj4*r22))+((cj5*r21*sj4))+((r20*sj4*sj5)))),-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*x708)))),IkReal(((((-1.0)*cj4*sj5*x708))+(((-1.0)*cj4*cj5*r01))+((r02*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x710.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x709.value)))+(x710.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x711=IKsin(j3);
IkReal x712=IKcos(j3);
IkReal x713=(cj4*cj5);
IkReal x714=(r12*sj4);
IkReal x715=(cj5*r10);
IkReal x716=((1.0)*x712);
IkReal x717=(r11*x711);
IkReal x718=((1.0)*x711);
IkReal x719=(sj5*x712);
IkReal x720=(cj4*sj5*x711);
evalcond[0]=((((-1.0)*cj5*r20*x716))+((r20*x720))+((r21*x719))+(((-1.0)*r22*sj4*x718))+((r21*x711*x713)));
evalcond[1]=(((r01*x719))+((r01*x711*x713))+((r00*x720))+(((-1.0)*cj5*r00*x716))+(((-1.0)*r02*sj4*x718)));
evalcond[2]=((1.0)+(((-1.0)*x714*x718))+((r11*x719))+((r10*x720))+((x713*x717))+(((-1.0)*x715*x716)));
evalcond[3]=((((-1.0)*r11*x713*x716))+((sj5*x717))+((x712*x714))+(((-1.0)*cj4*r10*sj5*x716))+(((-1.0)*x715*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x721=((1.23711340206186)*sj4);
IkReal x722=(cj5*r21);
IkReal x723=((1.23711340206186)*cj4);
IkReal x724=(r00*sj5);
IkReal x725=(r20*sj5);
IkReal x726=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-1.0)*r02*x723))+(((10.3092783505155)*px))+(((0.0124226804123711)*x726))+(((0.0124226804123711)*x724))+(((-1.0)*x721*x724))+(((-1.0)*x721*x726)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((0.0124226804123711)*x725))+(((0.0124226804123711)*x722))+(((-1.0)*x721*x725))+(((-1.0)*x721*x722))+(((-1.0)*r22*x723)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*r02*x723))+(((10.3092783505155)*px))+(((0.0124226804123711)*x726))+(((0.0124226804123711)*x724))+(((-1.0)*x721*x724))+(((-1.0)*x721*x726))))+IKsqr(((((10.3092783505155)*pz))+(((0.0124226804123711)*x725))+(((0.0124226804123711)*x722))+(((-1.0)*x721*x725))+(((-1.0)*x721*x722))+(((-1.0)*r22*x723))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*r02*x723))+(((10.3092783505155)*px))+(((0.0124226804123711)*x726))+(((0.0124226804123711)*x724))+(((-1.0)*x721*x724))+(((-1.0)*x721*x726))), ((((10.3092783505155)*pz))+(((0.0124226804123711)*x725))+(((0.0124226804123711)*x722))+(((-1.0)*x721*x725))+(((-1.0)*x721*x722))+(((-1.0)*r22*x723))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x727=((1.0)*pz);
IkReal x728=((0.12)*sj3);
IkReal x729=((0.12)*cj4);
IkReal x730=((0.001205)*cj5);
IkReal x731=(r20*sj5);
IkReal x732=((0.12)*sj4);
IkReal x733=(r00*sj5);
IkReal x734=(cj5*r01);
IkReal x735=(cj5*r21);
IkReal x736=((0.097)*(IKcos(j1)));
IkReal x737=((0.001205)*x731);
IkReal x738=(r21*x730);
IkReal x739=((0.097)*(IKsin(j1)));
IkReal x740=(r01*x730);
IkReal x741=((0.001205)*x733);
IkReal x742=(x740+x741);
IkReal x743=(x737+x738+x727);
evalcond[0]=((-0.0022)+(((-1.0)*x732*x733))+(((-1.0)*x732*x734))+(((-1.0)*r02*x729))+(((-1.0)*x739))+px+x742);
evalcond[1]=(((x731*x732))+x736+(((-1.0)*x743))+((r22*x729))+((x732*x735)));
evalcond[2]=(((r01*sj5*x728))+((cj3*r02*x732))+x736+(((-1.0)*x743))+(((-1.0)*cj5*r00*x728))+(((-1.0)*cj3*x729*x733))+(((-1.0)*cj3*x729*x734)));
evalcond[3]=((0.0022)+((cj5*r20*x728))+(((-1.0)*px))+x739+(((-1.0)*cj3*r22*x732))+(((-1.0)*x742))+((cj3*x729*x731))+((cj3*x729*x735))+(((-1.0)*r21*sj5*x728)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x744=(sj1*sj4);
IkReal x745=(cj5*r01);
IkReal x746=(r20*sj5);
IkReal x747=(cj4*sj1);
IkReal x748=(r00*sj5);
IkReal x749=(cj1*sj4);
IkReal x750=(cj5*r21);
IkReal x751=(cj1*cj4);
if( IKabs((((x745*x749))+((r02*x751))+(((-1.0)*x744*x746))+(((-1.0)*r22*x747))+(((-1.0)*x744*x750))+((x748*x749)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x747))+((r22*x751))+((x744*x745))+((x744*x748))+((x746*x749))+((x749*x750)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x745*x749))+((r02*x751))+(((-1.0)*x744*x746))+(((-1.0)*r22*x747))+(((-1.0)*x744*x750))+((x748*x749))))+IKsqr((((r02*x747))+((r22*x751))+((x744*x745))+((x744*x748))+((x746*x749))+((x749*x750))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x745*x749))+((r02*x751))+(((-1.0)*x744*x746))+(((-1.0)*r22*x747))+(((-1.0)*x744*x750))+((x748*x749))), (((r02*x747))+((r22*x751))+((x744*x745))+((x744*x748))+((x746*x749))+((x749*x750))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x752=IKcos(j2);
IkReal x753=IKsin(j2);
IkReal x754=(cj3*sj4);
IkReal x755=((1.0)*cj5);
IkReal x756=(cj3*cj4);
IkReal x757=((0.001205)*cj5);
IkReal x758=(sj3*sj5);
IkReal x759=(r20*sj5);
IkReal x760=((1.0)*sj4);
IkReal x761=(r00*sj5);
IkReal x762=((1.0)*cj4);
IkReal x763=(sj1*x752);
IkReal x764=(cj1*x753);
IkReal x765=(cj1*x752);
IkReal x766=(sj1*x753);
IkReal x767=(x764+x763);
evalcond[0]=((((-1.0)*r01*sj4*x755))+x767+(((-1.0)*r02*x762))+(((-1.0)*x760*x761)));
evalcond[1]=((((-1.0)*r21*sj4*x755))+(((-1.0)*x766))+x765+(((-1.0)*r22*x762))+(((-1.0)*x759*x760)));
evalcond[2]=((((-0.12)*x766))+(((-0.001205)*x759))+(((-1.0)*pz))+(((0.12)*x765))+(((0.097)*cj1))+(((-1.0)*r21*x757)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r01*x757))+(((-1.0)*px))+(((-0.001205)*x761))+(((0.12)*x763))+(((0.12)*x764)));
evalcond[4]=(((r22*x754))+(((-1.0)*x756*x759))+((r21*x758))+x767+(((-1.0)*r20*sj3*x755))+(((-1.0)*r21*x755*x756)));
evalcond[5]=(((r02*x754))+(((-1.0)*x756*x761))+(((-1.0)*r00*sj3*x755))+(((-1.0)*r01*x755*x756))+((r01*x758))+(((-1.0)*x765))+x766);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x768=((1.0)*r20);
IkReal x769=(((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)));
j3eval[0]=x769;
j3eval[1]=IKsign(x769);
j3eval[2]=((IKabs((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x768)))))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x768))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x770=((1.0)*sj4);
IkReal x771=((1.0)*cj4);
IkReal x772=((((-1.0)*r22*x771))+(((-1.0)*r20*sj5*x770))+(((-1.0)*cj5*r21*x770)));
j3eval[0]=x772;
j3eval[1]=((IKabs(((((-1.0)*r00*sj5*x771))+(((-1.0)*cj5*r01*x771))+((r02*sj4)))))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j3eval[2]=IKsign(x772);
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
{
IkReal j3eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x773=cj4*cj4;
IkReal x774=cj5*cj5;
IkReal x775=r10*r10;
IkReal x776=r11*r11;
IkReal x777=r12*r12;
IkReal x778=(cj5*r10);
IkReal x779=((1.0)*x773);
IkReal x780=(cj4*r10*sj5);
IkReal x781=((2.0)*r12*sj4);
IkReal x782=((2.0)*r11*sj5);
IkReal x783=(cj4*cj5*r11);
IkReal x784=(x774*x776);
IkReal x785=(x774*x775);
IkReal x786=(((x781*x783))+((x773*x785))+((x773*x777))+((x778*x782))+(((-1.0)*x775*x779))+((x780*x781))+x784+(((-1.0)*x785))+(((-1.0)*x777))+(((-1.0)*x776))+(((-1.0)*x773*x778*x782))+(((-1.0)*x779*x784)));
j3eval[0]=x786;
j3eval[1]=IKsign(x786);
j3eval[2]=((IKabs(((((-1.0)*r11*sj5))+x778)))+(IKabs((((r12*sj4))+(((-1.0)*x783))+(((-1.0)*x780))))));
if( IKabs(j3eval[0]) < 0.0000010000000000  || IKabs(j3eval[1]) < 0.0000010000000000  || IKabs(j3eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j1, j2, j3]

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x787=cj4*cj4;
IkReal x788=cj5*cj5;
IkReal x789=r10*r10;
IkReal x790=r11*r11;
IkReal x791=r12*r12;
IkReal x792=(cj5*r11);
IkReal x793=(r10*sj5);
IkReal x794=((1.0)*cj4);
IkReal x795=((1.0)*x787);
IkReal x796=(x788*x790);
IkReal x797=((2.0)*cj4*r12*sj4);
IkReal x798=(x788*x789);
CheckValue<IkReal> x799 = IKatan2WithCheck(IkReal(((((-1.0)*x792*x794))+(((-1.0)*x793*x794))+((r12*sj4)))),IkReal((((cj5*r10))+(((-1.0)*r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x799.valid){
continue;
}
CheckValue<IkReal> x800=IKPowWithIntegerCheck(IKsign(((((-1.0)*x795*x796))+((x793*x797))+(((-2.0)*x787*x792*x793))+((x787*x791))+((x787*x798))+(((2.0)*x792*x793))+((x792*x797))+(((-1.0)*x789*x795))+x796+(((-1.0)*x798))+(((-1.0)*x791))+(((-1.0)*x790)))),-1);
if(!x800.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x799.value)+(((1.5707963267949)*(x800.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x801=IKsin(j3);
IkReal x802=IKcos(j3);
IkReal x803=(cj4*cj5);
IkReal x804=(r12*sj4);
IkReal x805=(cj5*r10);
IkReal x806=((1.0)*x802);
IkReal x807=(r11*x801);
IkReal x808=((1.0)*x801);
IkReal x809=(sj5*x802);
IkReal x810=(cj4*sj5*x801);
evalcond[0]=(((r20*x810))+((r21*x809))+(((-1.0)*r22*sj4*x808))+((r21*x801*x803))+(((-1.0)*cj5*r20*x806)));
evalcond[1]=(((r01*x801*x803))+((r00*x810))+((r01*x809))+(((-1.0)*r02*sj4*x808))+(((-1.0)*cj5*r00*x806)));
evalcond[2]=((-1.0)+(((-1.0)*x804*x808))+(((-1.0)*x805*x806))+((r10*x810))+((x803*x807))+((r11*x809)));
evalcond[3]=((((-1.0)*x805*x808))+(((-1.0)*r11*x803*x806))+(((-1.0)*cj4*r10*sj5*x806))+((x802*x804))+((sj5*x807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x811=((1.23711340206186)*sj4);
IkReal x812=(cj5*r21);
IkReal x813=((1.23711340206186)*cj4);
IkReal x814=(r00*sj5);
IkReal x815=(r20*sj5);
IkReal x816=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*px))+(((-0.0124226804123711)*x814))+(((-0.0124226804123711)*x816))+((x811*x816))+((x811*x814))+((r02*x813)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*x811*x815))+(((-1.0)*x811*x812))+(((0.0124226804123711)*x812))+(((0.0124226804123711)*x815))+(((-1.0)*r22*x813)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*px))+(((-0.0124226804123711)*x814))+(((-0.0124226804123711)*x816))+((x811*x816))+((x811*x814))+((r02*x813))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*x811*x815))+(((-1.0)*x811*x812))+(((0.0124226804123711)*x812))+(((0.0124226804123711)*x815))+(((-1.0)*r22*x813))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*px))+(((-0.0124226804123711)*x814))+(((-0.0124226804123711)*x816))+((x811*x816))+((x811*x814))+((r02*x813))), ((((10.3092783505155)*pz))+(((-1.0)*x811*x815))+(((-1.0)*x811*x812))+(((0.0124226804123711)*x812))+(((0.0124226804123711)*x815))+(((-1.0)*r22*x813))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x817=((1.0)*px);
IkReal x818=((0.12)*sj3);
IkReal x819=((0.12)*cj4);
IkReal x820=((0.001205)*cj5);
IkReal x821=(r20*sj5);
IkReal x822=((0.12)*sj4);
IkReal x823=(r00*sj5);
IkReal x824=(cj5*r01);
IkReal x825=(cj5*r21);
IkReal x826=((0.001205)*x821);
IkReal x827=(r21*x820);
IkReal x828=((0.097)*(IKcos(j1)));
IkReal x829=(r01*x820);
IkReal x830=((0.097)*(IKsin(j1)));
IkReal x831=((0.001205)*x823);
IkReal x832=(x827+x826);
IkReal x833=(x817+x829+x830+x831);
evalcond[0]=(((x821*x822))+(((-1.0)*pz))+(((-1.0)*x832))+((x822*x825))+x828+((r22*x819)));
evalcond[1]=((-0.0022)+(((-1.0)*x833))+((x822*x823))+((x822*x824))+((r02*x819)));
evalcond[2]=((((-1.0)*x828))+(((-1.0)*cj5*r00*x818))+pz+((cj3*r02*x822))+x832+((r01*sj5*x818))+(((-1.0)*cj3*x819*x823))+(((-1.0)*cj3*x819*x824)));
evalcond[3]=((-0.0022)+((r21*sj5*x818))+((cj3*r22*x822))+(((-1.0)*cj5*r20*x818))+(((-1.0)*x833))+(((-1.0)*cj3*x819*x821))+(((-1.0)*cj3*x819*x825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x834=((1.0)*sj1);
IkReal x835=(sj4*sj5);
IkReal x836=(cj4*r22);
IkReal x837=(cj5*sj4);
IkReal x838=(cj4*r02);
IkReal x839=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x837*x839))+(((-1.0)*r00*x835*x839))+(((-1.0)*x834*x836))+(((-1.0)*r20*x834*x835))+(((-1.0)*x838*x839))+(((-1.0)*r21*x834*x837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x837))+((cj1*r20*x835))+(((-1.0)*x834*x838))+(((-1.0)*r01*x834*x837))+(((-1.0)*r00*x834*x835))+((cj1*x836)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x837*x839))+(((-1.0)*r00*x835*x839))+(((-1.0)*x834*x836))+(((-1.0)*r20*x834*x835))+(((-1.0)*x838*x839))+(((-1.0)*r21*x834*x837))))+IKsqr((((cj1*r21*x837))+((cj1*r20*x835))+(((-1.0)*x834*x838))+(((-1.0)*r01*x834*x837))+(((-1.0)*r00*x834*x835))+((cj1*x836))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x837*x839))+(((-1.0)*r00*x835*x839))+(((-1.0)*x834*x836))+(((-1.0)*r20*x834*x835))+(((-1.0)*x838*x839))+(((-1.0)*r21*x834*x837))), (((cj1*r21*x837))+((cj1*r20*x835))+(((-1.0)*x834*x838))+(((-1.0)*r01*x834*x837))+(((-1.0)*r00*x834*x835))+((cj1*x836))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x840=IKcos(j2);
IkReal x841=IKsin(j2);
IkReal x842=(cj3*sj4);
IkReal x843=((1.0)*cj5);
IkReal x844=(cj3*cj4);
IkReal x845=((0.001205)*cj5);
IkReal x846=(sj3*sj5);
IkReal x847=(r20*sj5);
IkReal x848=((1.0)*sj4);
IkReal x849=(r00*sj5);
IkReal x850=((1.0)*cj4);
IkReal x851=(cj1*x840);
IkReal x852=(cj1*x841);
IkReal x853=(sj1*x841);
IkReal x854=(sj1*x840);
IkReal x855=((1.0)*x853);
evalcond[0]=((((-1.0)*r22*x850))+(((-1.0)*x847*x848))+(((-1.0)*x855))+(((-1.0)*r21*sj4*x843))+x851);
evalcond[1]=((((-1.0)*r21*x845))+(((0.12)*x851))+(((-1.0)*pz))+(((-0.001205)*x847))+(((0.097)*cj1))+(((-0.12)*x853)));
evalcond[2]=((((-1.0)*r01*sj4*x843))+(((-1.0)*x854))+(((-1.0)*x852))+(((-1.0)*r02*x850))+(((-1.0)*x848*x849)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*px))+(((-0.001205)*x849))+(((-1.0)*r01*x845))+(((-0.12)*x854))+(((-0.12)*x852)));
evalcond[4]=(((r22*x842))+((r21*x846))+(((-1.0)*r21*x843*x844))+x852+x854+(((-1.0)*r20*sj3*x843))+(((-1.0)*x844*x847)));
evalcond[5]=((((-1.0)*x855))+(((-1.0)*r00*sj3*x843))+((r02*x842))+((r01*x846))+x851+(((-1.0)*x844*x849))+(((-1.0)*r01*x843*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x856=((1.0)*sj4);
IkReal x857=((1.0)*cj4);
CheckValue<IkReal> x858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r22*x857))+(((-1.0)*cj5*r21*x856))+(((-1.0)*r20*sj5*x856)))),-1);
if(!x858.valid){
continue;
}
CheckValue<IkReal> x859 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((((-1.0)*cj5*r01*x857))+((r02*sj4))+(((-1.0)*r00*sj5*x857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x859.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x858.value)))+(x859.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x860=IKsin(j3);
IkReal x861=IKcos(j3);
IkReal x862=(cj4*cj5);
IkReal x863=(r12*sj4);
IkReal x864=(cj5*r10);
IkReal x865=((1.0)*x861);
IkReal x866=(r11*x860);
IkReal x867=((1.0)*x860);
IkReal x868=(sj5*x861);
IkReal x869=(cj4*sj5*x860);
evalcond[0]=(((r21*x868))+(((-1.0)*cj5*r20*x865))+(((-1.0)*r22*sj4*x867))+((r20*x869))+((r21*x860*x862)));
evalcond[1]=(((r00*x869))+((r01*x868))+((r01*x860*x862))+(((-1.0)*cj5*r00*x865))+(((-1.0)*r02*sj4*x867)));
evalcond[2]=((-1.0)+((r10*x869))+((r11*x868))+(((-1.0)*x864*x865))+((x862*x866))+(((-1.0)*x863*x867)));
evalcond[3]=((((-1.0)*cj4*r10*sj5*x865))+((sj5*x866))+(((-1.0)*x864*x867))+(((-1.0)*r11*x862*x865))+((x861*x863)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x870=((1.23711340206186)*sj4);
IkReal x871=(cj5*r21);
IkReal x872=((1.23711340206186)*cj4);
IkReal x873=(r00*sj5);
IkReal x874=(r20*sj5);
IkReal x875=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*px))+((x870*x875))+((x870*x873))+((r02*x872))+(((-0.0124226804123711)*x873))+(((-0.0124226804123711)*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0124226804123711)*x871))+(((0.0124226804123711)*x874))+(((10.3092783505155)*pz))+(((-1.0)*x870*x871))+(((-1.0)*x870*x874))+(((-1.0)*r22*x872)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*px))+((x870*x875))+((x870*x873))+((r02*x872))+(((-0.0124226804123711)*x873))+(((-0.0124226804123711)*x875))))+IKsqr(((((0.0124226804123711)*x871))+(((0.0124226804123711)*x874))+(((10.3092783505155)*pz))+(((-1.0)*x870*x871))+(((-1.0)*x870*x874))+(((-1.0)*r22*x872))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*px))+((x870*x875))+((x870*x873))+((r02*x872))+(((-0.0124226804123711)*x873))+(((-0.0124226804123711)*x875))), ((((0.0124226804123711)*x871))+(((0.0124226804123711)*x874))+(((10.3092783505155)*pz))+(((-1.0)*x870*x871))+(((-1.0)*x870*x874))+(((-1.0)*r22*x872))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x876=((1.0)*px);
IkReal x877=((0.12)*sj3);
IkReal x878=((0.12)*cj4);
IkReal x879=((0.001205)*cj5);
IkReal x880=(r20*sj5);
IkReal x881=((0.12)*sj4);
IkReal x882=(r00*sj5);
IkReal x883=(cj5*r01);
IkReal x884=(cj5*r21);
IkReal x885=((0.001205)*x880);
IkReal x886=(r21*x879);
IkReal x887=((0.097)*(IKcos(j1)));
IkReal x888=(r01*x879);
IkReal x889=((0.097)*(IKsin(j1)));
IkReal x890=((0.001205)*x882);
IkReal x891=(x885+x886);
IkReal x892=(x876+x889+x888+x890);
evalcond[0]=(((x881*x884))+((x880*x881))+(((-1.0)*x891))+((r22*x878))+(((-1.0)*pz))+x887);
evalcond[1]=((-0.0022)+((x881*x883))+((x881*x882))+(((-1.0)*x892))+((r02*x878)));
evalcond[2]=(((r01*sj5*x877))+(((-1.0)*cj5*r00*x877))+(((-1.0)*cj3*x878*x882))+(((-1.0)*cj3*x878*x883))+(((-1.0)*x887))+pz+((cj3*r02*x881))+x891);
evalcond[3]=((-0.0022)+(((-1.0)*x892))+(((-1.0)*cj3*x878*x880))+(((-1.0)*cj3*x878*x884))+(((-1.0)*cj5*r20*x877))+((cj3*r22*x881))+((r21*sj5*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x893=((1.0)*sj1);
IkReal x894=(sj4*sj5);
IkReal x895=(cj4*r22);
IkReal x896=(cj5*sj4);
IkReal x897=(cj4*r02);
IkReal x898=((1.0)*cj1);
if( IKabs(((((-1.0)*r20*x893*x894))+(((-1.0)*r21*x893*x896))+(((-1.0)*r00*x894*x898))+(((-1.0)*r01*x896*x898))+(((-1.0)*x893*x895))+(((-1.0)*x897*x898)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x893*x896))+((cj1*r21*x896))+((cj1*r20*x894))+(((-1.0)*r00*x893*x894))+(((-1.0)*x893*x897))+((cj1*x895)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x893*x894))+(((-1.0)*r21*x893*x896))+(((-1.0)*r00*x894*x898))+(((-1.0)*r01*x896*x898))+(((-1.0)*x893*x895))+(((-1.0)*x897*x898))))+IKsqr(((((-1.0)*r01*x893*x896))+((cj1*r21*x896))+((cj1*r20*x894))+(((-1.0)*r00*x893*x894))+(((-1.0)*x893*x897))+((cj1*x895))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x893*x894))+(((-1.0)*r21*x893*x896))+(((-1.0)*r00*x894*x898))+(((-1.0)*r01*x896*x898))+(((-1.0)*x893*x895))+(((-1.0)*x897*x898))), ((((-1.0)*r01*x893*x896))+((cj1*r21*x896))+((cj1*r20*x894))+(((-1.0)*r00*x893*x894))+(((-1.0)*x893*x897))+((cj1*x895))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x899=IKcos(j2);
IkReal x900=IKsin(j2);
IkReal x901=(cj3*sj4);
IkReal x902=((1.0)*cj5);
IkReal x903=(cj3*cj4);
IkReal x904=((0.001205)*cj5);
IkReal x905=(sj3*sj5);
IkReal x906=(r20*sj5);
IkReal x907=((1.0)*sj4);
IkReal x908=(r00*sj5);
IkReal x909=((1.0)*cj4);
IkReal x910=(cj1*x899);
IkReal x911=(cj1*x900);
IkReal x912=(sj1*x900);
IkReal x913=(sj1*x899);
IkReal x914=((1.0)*x912);
evalcond[0]=((((-1.0)*r22*x909))+(((-1.0)*r21*sj4*x902))+(((-1.0)*x914))+x910+(((-1.0)*x906*x907)));
evalcond[1]=((((-0.12)*x912))+(((-0.001205)*x906))+(((-1.0)*r21*x904))+(((0.12)*x910))+(((-1.0)*pz))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*r01*sj4*x902))+(((-1.0)*r02*x909))+(((-1.0)*x913))+(((-1.0)*x911))+(((-1.0)*x907*x908)));
evalcond[3]=((-0.0022)+(((-0.12)*x913))+(((-0.12)*x911))+(((-0.001205)*x908))+(((-0.097)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x904)));
evalcond[4]=(((r21*x905))+(((-1.0)*r20*sj3*x902))+(((-1.0)*r21*x902*x903))+((r22*x901))+(((-1.0)*x903*x906))+x913+x911);
evalcond[5]=(((r01*x905))+((r02*x901))+(((-1.0)*x914))+(((-1.0)*r00*sj3*x902))+(((-1.0)*r01*x902*x903))+(((-1.0)*x903*x908))+x910);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x915=((1.0)*r20);
CheckValue<IkReal> x916=IKPowWithIntegerCheck(IKsign((((r00*sj4*sj5))+((cj5*r01*sj4))+((cj4*r02)))),-1);
if(!x916.valid){
continue;
}
CheckValue<IkReal> x917 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*x915)))),IkReal((((r22*sj4))+(((-1.0)*cj4*cj5*r21))+(((-1.0)*cj4*sj5*x915)))),IKFAST_ATAN2_MAGTHRESH);
if(!x917.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x916.value)))+(x917.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x918=IKsin(j3);
IkReal x919=IKcos(j3);
IkReal x920=(cj4*cj5);
IkReal x921=(r12*sj4);
IkReal x922=(cj5*r10);
IkReal x923=((1.0)*x919);
IkReal x924=(r11*x918);
IkReal x925=((1.0)*x918);
IkReal x926=(sj5*x919);
IkReal x927=(cj4*sj5*x918);
evalcond[0]=((((-1.0)*cj5*r20*x923))+((r21*x926))+((r21*x918*x920))+(((-1.0)*r22*sj4*x925))+((r20*x927)));
evalcond[1]=(((r01*x918*x920))+((r01*x926))+((r00*x927))+(((-1.0)*r02*sj4*x925))+(((-1.0)*cj5*r00*x923)));
evalcond[2]=((-1.0)+((x920*x924))+((r10*x927))+((r11*x926))+(((-1.0)*x921*x925))+(((-1.0)*x922*x923)));
evalcond[3]=(((sj5*x924))+((x919*x921))+(((-1.0)*cj4*r10*sj5*x923))+(((-1.0)*r11*x920*x923))+(((-1.0)*x922*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x928=((1.23711340206186)*sj4);
IkReal x929=(cj5*r21);
IkReal x930=((1.23711340206186)*cj4);
IkReal x931=(r00*sj5);
IkReal x932=(r20*sj5);
IkReal x933=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*px))+((x928*x931))+((x928*x933))+(((-0.0124226804123711)*x931))+(((-0.0124226804123711)*x933))+((r02*x930)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x930))+(((-1.0)*x928*x932))+(((-1.0)*x928*x929))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x932))+(((0.0124226804123711)*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*px))+((x928*x931))+((x928*x933))+(((-0.0124226804123711)*x931))+(((-0.0124226804123711)*x933))+((r02*x930))))+IKsqr(((((-1.0)*r22*x930))+(((-1.0)*x928*x932))+(((-1.0)*x928*x929))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x932))+(((0.0124226804123711)*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*px))+((x928*x931))+((x928*x933))+(((-0.0124226804123711)*x931))+(((-0.0124226804123711)*x933))+((r02*x930))), ((((-1.0)*r22*x930))+(((-1.0)*x928*x932))+(((-1.0)*x928*x929))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x932))+(((0.0124226804123711)*x929))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x934=((1.0)*px);
IkReal x935=((0.12)*sj3);
IkReal x936=((0.12)*cj4);
IkReal x937=((0.001205)*cj5);
IkReal x938=(r20*sj5);
IkReal x939=((0.12)*sj4);
IkReal x940=(r00*sj5);
IkReal x941=(cj5*r01);
IkReal x942=(cj5*r21);
IkReal x943=((0.001205)*x938);
IkReal x944=(r21*x937);
IkReal x945=((0.097)*(IKcos(j1)));
IkReal x946=(r01*x937);
IkReal x947=((0.097)*(IKsin(j1)));
IkReal x948=((0.001205)*x940);
IkReal x949=(x943+x944);
IkReal x950=(x934+x948+x946+x947);
evalcond[0]=((((-1.0)*x949))+((r22*x936))+((x939*x942))+(((-1.0)*pz))+((x938*x939))+x945);
evalcond[1]=((-0.0022)+((x939*x940))+((x939*x941))+(((-1.0)*x950))+((r02*x936)));
evalcond[2]=((((-1.0)*cj3*x936*x941))+(((-1.0)*cj3*x936*x940))+(((-1.0)*x945))+((cj3*r02*x939))+pz+x949+((r01*sj5*x935))+(((-1.0)*cj5*r00*x935)));
evalcond[3]=((-0.0022)+(((-1.0)*cj3*x936*x942))+(((-1.0)*cj5*r20*x935))+(((-1.0)*cj3*x936*x938))+((cj3*r22*x939))+(((-1.0)*x950))+((r21*sj5*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x951=((1.0)*sj1);
IkReal x952=(sj4*sj5);
IkReal x953=(cj4*r22);
IkReal x954=(cj5*sj4);
IkReal x955=(cj4*r02);
IkReal x956=((1.0)*cj1);
if( IKabs(((((-1.0)*r21*x951*x954))+(((-1.0)*r20*x951*x952))+(((-1.0)*r01*x954*x956))+(((-1.0)*r00*x952*x956))+(((-1.0)*x951*x953))+(((-1.0)*x955*x956)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r21*x954))+((cj1*x953))+(((-1.0)*r00*x951*x952))+(((-1.0)*x951*x955))+(((-1.0)*r01*x951*x954))+((cj1*r20*x952)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x951*x954))+(((-1.0)*r20*x951*x952))+(((-1.0)*r01*x954*x956))+(((-1.0)*r00*x952*x956))+(((-1.0)*x951*x953))+(((-1.0)*x955*x956))))+IKsqr((((cj1*r21*x954))+((cj1*x953))+(((-1.0)*r00*x951*x952))+(((-1.0)*x951*x955))+(((-1.0)*r01*x951*x954))+((cj1*r20*x952))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x951*x954))+(((-1.0)*r20*x951*x952))+(((-1.0)*r01*x954*x956))+(((-1.0)*r00*x952*x956))+(((-1.0)*x951*x953))+(((-1.0)*x955*x956))), (((cj1*r21*x954))+((cj1*x953))+(((-1.0)*r00*x951*x952))+(((-1.0)*x951*x955))+(((-1.0)*r01*x951*x954))+((cj1*r20*x952))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x957=IKcos(j2);
IkReal x958=IKsin(j2);
IkReal x959=(cj3*sj4);
IkReal x960=((1.0)*cj5);
IkReal x961=(cj3*cj4);
IkReal x962=((0.001205)*cj5);
IkReal x963=(sj3*sj5);
IkReal x964=(r20*sj5);
IkReal x965=((1.0)*sj4);
IkReal x966=(r00*sj5);
IkReal x967=((1.0)*cj4);
IkReal x968=(cj1*x957);
IkReal x969=(cj1*x958);
IkReal x970=(sj1*x958);
IkReal x971=(sj1*x957);
IkReal x972=((1.0)*x970);
evalcond[0]=((((-1.0)*x964*x965))+(((-1.0)*r22*x967))+(((-1.0)*r21*sj4*x960))+x968+(((-1.0)*x972)));
evalcond[1]=((((0.12)*x968))+(((-1.0)*r21*x962))+(((-1.0)*pz))+(((0.097)*cj1))+(((-0.12)*x970))+(((-0.001205)*x964)));
evalcond[2]=((((-1.0)*x971))+(((-1.0)*x965*x966))+(((-1.0)*r01*sj4*x960))+(((-1.0)*x969))+(((-1.0)*r02*x967)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*r01*x962))+(((-1.0)*px))+(((-0.12)*x971))+(((-0.001205)*x966))+(((-0.12)*x969)));
evalcond[4]=((((-1.0)*r20*sj3*x960))+((r22*x959))+(((-1.0)*r21*x960*x961))+(((-1.0)*x961*x964))+((r21*x963))+x971+x969);
evalcond[5]=((((-1.0)*x961*x966))+(((-1.0)*r01*x960*x961))+((r01*x963))+((r02*x959))+x968+(((-1.0)*r00*sj3*x960))+(((-1.0)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2, j3]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x973=((1.0)*sj4);
IkReal x974=(cj5*sj0);
IkReal x975=(cj0*sj5);
IkReal x976=(sj0*sj5);
IkReal x977=((1.0)*cj4);
IkReal x978=(cj0*cj5);
CheckValue<IkReal> x979 = IKatan2WithCheck(IkReal((((r00*x974))+(((-1.0)*r10*x978))+((r11*x975))+(((-1.0)*r01*x976)))),IkReal(((((-1.0)*r11*x977*x978))+((cj0*r12*sj4))+((cj4*r00*x976))+(((-1.0)*r02*sj0*x973))+((cj4*r01*x974))+(((-1.0)*r10*x975*x977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x979.valid){
continue;
}
CheckValue<IkReal> x980=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*sj5*x973))+(((-1.0)*cj5*r21*x973))+(((-1.0)*r22*x977)))),-1);
if(!x980.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x979.value)+(((1.5707963267949)*(x980.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x981=IKsin(j3);
IkReal x982=IKcos(j3);
IkReal x983=(sj5*x982);
IkReal x984=(cj4*cj5*x981);
IkReal x985=(cj4*sj5*x981);
IkReal x986=((1.0)*cj5*x982);
IkReal x987=((1.0)*sj4*x981);
evalcond[0]=((((-1.0)*r20*x986))+((r21*x983))+((r21*x984))+((r20*x985))+(((-1.0)*r22*x987)));
evalcond[1]=((((-1.0)*r00*x986))+cj0+((r00*x985))+((r01*x983))+((r01*x984))+(((-1.0)*r02*x987)));
evalcond[2]=((((-1.0)*r10*x986))+sj0+((r11*x984))+((r11*x983))+((r10*x985))+(((-1.0)*r12*x987)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x988=((1.23711340206186)*sj4);
IkReal x989=(cj5*r21);
IkReal x990=((1.23711340206186)*cj4);
IkReal x991=(r00*sj5);
IkReal x992=(r20*sj5);
IkReal x993=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x991))+(((0.0124226804123711)*x993))+(((-1.0)*r02*x990))+(((-1.0)*x988*x991))+(((-1.0)*x988*x993)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x990))+(((10.3092783505155)*pz))+(((-1.0)*x988*x989))+(((0.0124226804123711)*x992))+(((0.0124226804123711)*x989))+(((-1.0)*x988*x992)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x991))+(((0.0124226804123711)*x993))+(((-1.0)*r02*x990))+(((-1.0)*x988*x991))+(((-1.0)*x988*x993))))+IKsqr(((((-1.0)*r22*x990))+(((10.3092783505155)*pz))+(((-1.0)*x988*x989))+(((0.0124226804123711)*x992))+(((0.0124226804123711)*x989))+(((-1.0)*x988*x992))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((10.3092783505155)*px))+(((0.0124226804123711)*x991))+(((0.0124226804123711)*x993))+(((-1.0)*r02*x990))+(((-1.0)*x988*x991))+(((-1.0)*x988*x993))), ((((-1.0)*r22*x990))+(((10.3092783505155)*pz))+(((-1.0)*x988*x989))+(((0.0124226804123711)*x992))+(((0.0124226804123711)*x989))+(((-1.0)*x988*x992))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x994=((1.0)*pz);
IkReal x995=((0.12)*sj3);
IkReal x996=((0.12)*cj4);
IkReal x997=((0.001205)*cj5);
IkReal x998=(r20*sj5);
IkReal x999=((0.12)*sj4);
IkReal x1000=(r00*sj5);
IkReal x1001=(cj5*r01);
IkReal x1002=(cj5*r21);
IkReal x1003=((0.097)*(IKcos(j1)));
IkReal x1004=((0.001205)*x998);
IkReal x1005=(r21*x997);
IkReal x1006=((0.097)*(IKsin(j1)));
IkReal x1007=(r01*x997);
IkReal x1008=((0.001205)*x1000);
IkReal x1009=(x1008+x1007);
IkReal x1010=(x1005+x1004+x994);
evalcond[0]=((-0.0022)+x1009+(((-1.0)*x1006))+(((-1.0)*x1001*x999))+(((-1.0)*r02*x996))+px+(((-1.0)*x1000*x999)));
evalcond[1]=(((x998*x999))+x1003+(((-1.0)*x1010))+((x1002*x999))+((r22*x996)));
evalcond[2]=(x1003+(((-1.0)*x1010))+((cj3*r02*x999))+((r01*sj5*x995))+(((-1.0)*cj3*x1001*x996))+(((-1.0)*cj3*x1000*x996))+(((-1.0)*cj5*r00*x995)));
evalcond[3]=((0.0022)+x1006+((cj3*x996*x998))+(((-1.0)*x1009))+((cj3*x1002*x996))+(((-1.0)*px))+(((-1.0)*cj3*r22*x999))+(((-1.0)*r21*sj5*x995))+((cj5*r20*x995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1011=(sj1*sj4);
IkReal x1012=(cj5*r01);
IkReal x1013=(r20*sj5);
IkReal x1014=(cj4*sj1);
IkReal x1015=(r00*sj5);
IkReal x1016=(cj1*sj4);
IkReal x1017=(cj5*r21);
IkReal x1018=(cj1*cj4);
if( IKabs(((((-1.0)*x1011*x1017))+(((-1.0)*x1011*x1013))+((r02*x1018))+(((-1.0)*r22*x1014))+((x1012*x1016))+((x1015*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1016*x1017))+((r22*x1018))+((r02*x1014))+((x1013*x1016))+((x1011*x1015))+((x1011*x1012)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1011*x1017))+(((-1.0)*x1011*x1013))+((r02*x1018))+(((-1.0)*r22*x1014))+((x1012*x1016))+((x1015*x1016))))+IKsqr((((x1016*x1017))+((r22*x1018))+((r02*x1014))+((x1013*x1016))+((x1011*x1015))+((x1011*x1012))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1011*x1017))+(((-1.0)*x1011*x1013))+((r02*x1018))+(((-1.0)*r22*x1014))+((x1012*x1016))+((x1015*x1016))), (((x1016*x1017))+((r22*x1018))+((r02*x1014))+((x1013*x1016))+((x1011*x1015))+((x1011*x1012))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1019=IKcos(j2);
IkReal x1020=IKsin(j2);
IkReal x1021=(cj3*sj4);
IkReal x1022=((1.0)*cj5);
IkReal x1023=(cj3*cj4);
IkReal x1024=((0.001205)*cj5);
IkReal x1025=(sj3*sj5);
IkReal x1026=(r20*sj5);
IkReal x1027=((1.0)*sj4);
IkReal x1028=(r00*sj5);
IkReal x1029=((1.0)*cj4);
IkReal x1030=(sj1*x1019);
IkReal x1031=(cj1*x1020);
IkReal x1032=(cj1*x1019);
IkReal x1033=(sj1*x1020);
IkReal x1034=(x1030+x1031);
evalcond[0]=(x1034+(((-1.0)*r01*sj4*x1022))+(((-1.0)*r02*x1029))+(((-1.0)*x1027*x1028)));
evalcond[1]=((((-1.0)*r22*x1029))+x1032+(((-1.0)*x1033))+(((-1.0)*x1026*x1027))+(((-1.0)*r21*sj4*x1022)));
evalcond[2]=((((-0.001205)*x1026))+(((-1.0)*pz))+(((-1.0)*r21*x1024))+(((0.12)*x1032))+(((0.097)*cj1))+(((-0.12)*x1033)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-0.001205)*x1028))+(((-1.0)*px))+(((0.12)*x1030))+(((0.12)*x1031))+(((-1.0)*r01*x1024)));
evalcond[4]=((((-1.0)*r20*sj3*x1022))+((r21*x1025))+x1034+(((-1.0)*r21*x1022*x1023))+((r22*x1021))+(((-1.0)*x1023*x1026)));
evalcond[5]=(((r01*x1025))+(((-1.0)*r00*sj3*x1022))+x1033+(((-1.0)*x1032))+(((-1.0)*r01*x1022*x1023))+((r02*x1021))+(((-1.0)*x1023*x1028)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1035=((1.23711340206186)*sj4);
IkReal x1036=(cj5*r21);
IkReal x1037=((1.23711340206186)*cj4);
IkReal x1038=(r00*sj5);
IkReal x1039=(r20*sj5);
IkReal x1040=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*px))+((r02*x1037))+((x1035*x1040))+(((-0.0124226804123711)*x1040))+((x1035*x1038))+(((-0.0124226804123711)*x1038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1035*x1039))+(((-1.0)*x1035*x1036))+(((0.0124226804123711)*x1039))+(((0.0124226804123711)*x1036))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1037)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*px))+((r02*x1037))+((x1035*x1040))+(((-0.0124226804123711)*x1040))+((x1035*x1038))+(((-0.0124226804123711)*x1038))))+IKsqr(((((-1.0)*x1035*x1039))+(((-1.0)*x1035*x1036))+(((0.0124226804123711)*x1039))+(((0.0124226804123711)*x1036))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1037))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*px))+((r02*x1037))+((x1035*x1040))+(((-0.0124226804123711)*x1040))+((x1035*x1038))+(((-0.0124226804123711)*x1038))), ((((-1.0)*x1035*x1039))+(((-1.0)*x1035*x1036))+(((0.0124226804123711)*x1039))+(((0.0124226804123711)*x1036))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1037))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1041=((1.0)*px);
IkReal x1042=((0.12)*sj3);
IkReal x1043=((0.12)*cj4);
IkReal x1044=((0.001205)*cj5);
IkReal x1045=(r20*sj5);
IkReal x1046=((0.12)*sj4);
IkReal x1047=(r00*sj5);
IkReal x1048=(cj5*r01);
IkReal x1049=(cj5*r21);
IkReal x1050=((0.001205)*x1045);
IkReal x1051=(r21*x1044);
IkReal x1052=((0.097)*(IKcos(j1)));
IkReal x1053=(r01*x1044);
IkReal x1054=((0.097)*(IKsin(j1)));
IkReal x1055=((0.001205)*x1047);
IkReal x1056=(x1050+x1051);
IkReal x1057=(x1053+x1054+x1055+x1041);
evalcond[0]=((((-1.0)*x1056))+x1052+(((-1.0)*pz))+((x1045*x1046))+((r22*x1043))+((x1046*x1049)));
evalcond[1]=((-0.0022)+(((-1.0)*x1057))+((r02*x1043))+((x1046*x1048))+((x1046*x1047)));
evalcond[2]=((((-1.0)*cj3*x1043*x1047))+(((-1.0)*cj3*x1043*x1048))+(((-1.0)*x1052))+((cj3*r02*x1046))+x1056+((r01*sj5*x1042))+(((-1.0)*cj5*r00*x1042))+pz);
evalcond[3]=((-0.0022)+(((-1.0)*cj3*x1043*x1045))+(((-1.0)*cj3*x1043*x1049))+(((-1.0)*x1057))+(((-1.0)*cj5*r20*x1042))+((r21*sj5*x1042))+((cj3*r22*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1058=((1.0)*sj1);
IkReal x1059=(sj4*sj5);
IkReal x1060=(cj4*r22);
IkReal x1061=(cj5*sj4);
IkReal x1062=(cj4*r02);
IkReal x1063=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x1059*x1063))+(((-1.0)*x1058*x1060))+(((-1.0)*x1062*x1063))+(((-1.0)*r01*x1061*x1063))+(((-1.0)*r20*x1058*x1059))+(((-1.0)*r21*x1058*x1061)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1058*x1059))+((cj1*r21*x1061))+(((-1.0)*x1058*x1062))+((cj1*r20*x1059))+(((-1.0)*r01*x1058*x1061))+((cj1*x1060)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1059*x1063))+(((-1.0)*x1058*x1060))+(((-1.0)*x1062*x1063))+(((-1.0)*r01*x1061*x1063))+(((-1.0)*r20*x1058*x1059))+(((-1.0)*r21*x1058*x1061))))+IKsqr(((((-1.0)*r00*x1058*x1059))+((cj1*r21*x1061))+(((-1.0)*x1058*x1062))+((cj1*r20*x1059))+(((-1.0)*r01*x1058*x1061))+((cj1*x1060))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x1059*x1063))+(((-1.0)*x1058*x1060))+(((-1.0)*x1062*x1063))+(((-1.0)*r01*x1061*x1063))+(((-1.0)*r20*x1058*x1059))+(((-1.0)*r21*x1058*x1061))), ((((-1.0)*r00*x1058*x1059))+((cj1*r21*x1061))+(((-1.0)*x1058*x1062))+((cj1*r20*x1059))+(((-1.0)*r01*x1058*x1061))+((cj1*x1060))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1064=IKcos(j2);
IkReal x1065=IKsin(j2);
IkReal x1066=(cj3*sj4);
IkReal x1067=((1.0)*cj5);
IkReal x1068=(cj3*cj4);
IkReal x1069=((0.001205)*cj5);
IkReal x1070=(sj3*sj5);
IkReal x1071=(r20*sj5);
IkReal x1072=((1.0)*sj4);
IkReal x1073=(r00*sj5);
IkReal x1074=((1.0)*cj4);
IkReal x1075=(cj1*x1064);
IkReal x1076=(cj1*x1065);
IkReal x1077=(sj1*x1065);
IkReal x1078=(sj1*x1064);
IkReal x1079=((1.0)*x1077);
evalcond[0]=(x1075+(((-1.0)*r21*sj4*x1067))+(((-1.0)*x1071*x1072))+(((-1.0)*r22*x1074))+(((-1.0)*x1079)));
evalcond[1]=((((-1.0)*r21*x1069))+(((-1.0)*pz))+(((-0.001205)*x1071))+(((-0.12)*x1077))+(((0.097)*cj1))+(((0.12)*x1075)));
evalcond[2]=((((-1.0)*r01*sj4*x1067))+(((-1.0)*r02*x1074))+(((-1.0)*x1078))+(((-1.0)*x1076))+(((-1.0)*x1072*x1073)));
evalcond[3]=((-0.0022)+(((-1.0)*r01*x1069))+(((-0.097)*sj1))+(((-1.0)*px))+(((-0.001205)*x1073))+(((-0.12)*x1078))+(((-0.12)*x1076)));
evalcond[4]=((((-1.0)*r21*x1067*x1068))+x1078+x1076+(((-1.0)*r20*sj3*x1067))+((r22*x1066))+(((-1.0)*x1068*x1071))+((r21*x1070)));
evalcond[5]=(x1075+(((-1.0)*r00*sj3*x1067))+(((-1.0)*r01*x1067*x1068))+(((-1.0)*x1068*x1073))+((r01*x1070))+(((-1.0)*x1079))+((r02*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1080=(cj5*r11);
IkReal x1081=((1.23711340206186)*sj4);
IkReal x1082=(r10*sj5);
IkReal x1083=(r20*sj5);
IkReal x1084=(cj5*r21);
IkReal x1085=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*py))+((x1081*x1082))+((r12*x1085))+(((-0.0124226804123711)*x1082))+(((-0.0124226804123711)*x1080))+((x1080*x1081)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*x1081*x1084))+(((-1.0)*x1081*x1083))+(((0.0124226804123711)*x1083))+(((0.0124226804123711)*x1084))+(((-1.0)*r22*x1085)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*py))+((x1081*x1082))+((r12*x1085))+(((-0.0124226804123711)*x1082))+(((-0.0124226804123711)*x1080))+((x1080*x1081))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*x1081*x1084))+(((-1.0)*x1081*x1083))+(((0.0124226804123711)*x1083))+(((0.0124226804123711)*x1084))+(((-1.0)*r22*x1085))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*py))+((x1081*x1082))+((r12*x1085))+(((-0.0124226804123711)*x1082))+(((-0.0124226804123711)*x1080))+((x1080*x1081))), ((((10.3092783505155)*pz))+(((-1.0)*x1081*x1084))+(((-1.0)*x1081*x1083))+(((0.0124226804123711)*x1083))+(((0.0124226804123711)*x1084))+(((-1.0)*r22*x1085))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1086=((1.0)*py);
IkReal x1087=((0.12)*r10);
IkReal x1088=(sj4*sj5);
IkReal x1089=(cj5*sj3);
IkReal x1090=((0.12)*r11);
IkReal x1091=(sj3*sj5);
IkReal x1092=((0.001205)*cj5);
IkReal x1093=(cj3*cj4);
IkReal x1094=((0.001205)*sj5);
IkReal x1095=((0.12)*r21);
IkReal x1096=((0.12)*cj4);
IkReal x1097=((0.12)*r20);
IkReal x1098=(cj5*sj4);
IkReal x1099=(r20*x1094);
IkReal x1100=(r21*x1092);
IkReal x1101=((0.097)*(IKcos(j1)));
IkReal x1102=(r11*x1092);
IkReal x1103=(r10*x1094);
IkReal x1104=((0.097)*(IKsin(j1)));
IkReal x1105=((0.12)*cj3*sj4);
IkReal x1106=(x1100+x1099);
IkReal x1107=(x1104+x1102+x1103+x1086);
evalcond[0]=(x1101+((x1095*x1098))+((r22*x1096))+((x1088*x1097))+(((-1.0)*pz))+(((-1.0)*x1106)));
evalcond[1]=((-0.0022)+((x1087*x1088))+((r12*x1096))+(((-1.0)*x1107))+((x1090*x1098)));
evalcond[2]=(x1106+(((-1.0)*cj5*x1090*x1093))+(((-1.0)*x1087*x1089))+pz+((r12*x1105))+(((-1.0)*sj5*x1087*x1093))+(((-1.0)*x1101))+((x1090*x1091)));
evalcond[3]=((-0.0022)+(((-1.0)*sj5*x1093*x1097))+(((-1.0)*x1089*x1097))+((r22*x1105))+((x1091*x1095))+(((-1.0)*x1107))+(((-1.0)*cj5*x1093*x1095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1108=((1.0)*sj1);
IkReal x1109=(sj4*sj5);
IkReal x1110=(cj4*r22);
IkReal x1111=(cj4*r12);
IkReal x1112=((1.0)*cj1);
IkReal x1113=(cj5*r21*sj4);
IkReal x1114=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x1108*x1109))+(((-1.0)*r10*x1109*x1112))+(((-1.0)*x1112*x1114))+(((-1.0)*x1108*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1111*x1112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1110))+((cj1*x1113))+(((-1.0)*x1108*x1114))+(((-1.0)*x1108*x1111))+(((-1.0)*r10*x1108*x1109))+((cj1*r20*x1109)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1108*x1109))+(((-1.0)*r10*x1109*x1112))+(((-1.0)*x1112*x1114))+(((-1.0)*x1108*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1111*x1112))))+IKsqr((((cj1*x1110))+((cj1*x1113))+(((-1.0)*x1108*x1114))+(((-1.0)*x1108*x1111))+(((-1.0)*r10*x1108*x1109))+((cj1*r20*x1109))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1108*x1109))+(((-1.0)*r10*x1109*x1112))+(((-1.0)*x1112*x1114))+(((-1.0)*x1108*x1113))+(((-1.0)*x1108*x1110))+(((-1.0)*x1111*x1112))), (((cj1*x1110))+((cj1*x1113))+(((-1.0)*x1108*x1114))+(((-1.0)*x1108*x1111))+(((-1.0)*r10*x1108*x1109))+((cj1*r20*x1109))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1115=IKcos(j2);
IkReal x1116=IKsin(j2);
IkReal x1117=(sj3*sj5);
IkReal x1118=((0.001205)*cj5);
IkReal x1119=(r20*sj5);
IkReal x1120=((1.0)*sj4);
IkReal x1121=(r10*sj5);
IkReal x1122=((1.0)*sj1);
IkReal x1123=(cj5*r21);
IkReal x1124=((1.0)*cj4);
IkReal x1125=((0.12)*sj1);
IkReal x1126=(cj3*sj4);
IkReal x1127=(cj5*r11);
IkReal x1128=(cj1*x1115);
IkReal x1129=((1.0)*cj5*sj3);
IkReal x1130=(cj1*x1116);
IkReal x1131=(cj3*x1124);
IkReal x1132=(x1116*x1122);
evalcond[0]=(x1128+(((-1.0)*x1132))+(((-1.0)*r22*x1124))+(((-1.0)*x1119*x1120))+(((-1.0)*x1120*x1123)));
evalcond[1]=((((-1.0)*x1116*x1125))+(((-1.0)*r21*x1118))+(((-0.001205)*x1119))+(((-1.0)*pz))+(((0.12)*x1128))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*r12*x1124))+(((-1.0)*x1130))+(((-1.0)*x1120*x1127))+(((-1.0)*x1120*x1121))+(((-1.0)*x1115*x1122)));
evalcond[3]=((-0.0022)+(((-1.0)*r11*x1118))+(((-0.001205)*x1121))+(((-0.097)*sj1))+(((-0.12)*x1130))+(((-1.0)*py))+(((-1.0)*x1115*x1125)));
evalcond[4]=(x1130+(((-1.0)*x1123*x1131))+((r22*x1126))+((sj1*x1115))+((r21*x1117))+(((-1.0)*r20*x1129))+(((-1.0)*x1119*x1131)));
evalcond[5]=(x1128+(((-1.0)*x1121*x1131))+(((-1.0)*r10*x1129))+(((-1.0)*x1127*x1131))+(((-1.0)*x1132))+((r12*x1126))+((r11*x1117)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1133=((0.0124226804123711)*cj5);
IkReal x1134=((0.0124226804123711)*sj5);
IkReal x1135=((1.23711340206186)*sj4);
IkReal x1136=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-1.0)*cj5*r11*x1135))+(((-1.0)*r12*x1136))+(((-1.0)*r10*sj5*x1135))+((r10*x1134))+(((10.3092783505155)*py))+((r11*x1133)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj5*r21*x1135))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x1135))+((r21*x1133))+(((-1.0)*r22*x1136))+((r20*x1134)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*cj5*r11*x1135))+(((-1.0)*r12*x1136))+(((-1.0)*r10*sj5*x1135))+((r10*x1134))+(((10.3092783505155)*py))+((r11*x1133))))+IKsqr(((((-1.0)*cj5*r21*x1135))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x1135))+((r21*x1133))+(((-1.0)*r22*x1136))+((r20*x1134))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*cj5*r11*x1135))+(((-1.0)*r12*x1136))+(((-1.0)*r10*sj5*x1135))+((r10*x1134))+(((10.3092783505155)*py))+((r11*x1133))), ((((-1.0)*cj5*r21*x1135))+(((10.3092783505155)*pz))+(((-1.0)*r20*sj5*x1135))+((r21*x1133))+(((-1.0)*r22*x1136))+((r20*x1134))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1137=((1.0)*pz);
IkReal x1138=((0.12)*r10);
IkReal x1139=(sj4*sj5);
IkReal x1140=(cj5*sj3);
IkReal x1141=((0.12)*r11);
IkReal x1142=(sj3*sj5);
IkReal x1143=((0.001205)*cj5);
IkReal x1144=(cj3*cj4);
IkReal x1145=((0.001205)*sj5);
IkReal x1146=((0.12)*r21);
IkReal x1147=((0.12)*cj4);
IkReal x1148=((0.12)*r20);
IkReal x1149=(cj5*sj4);
IkReal x1150=((0.097)*(IKcos(j1)));
IkReal x1151=(r20*x1145);
IkReal x1152=(r21*x1143);
IkReal x1153=((0.097)*(IKsin(j1)));
IkReal x1154=(r11*x1143);
IkReal x1155=(r10*x1145);
IkReal x1156=((0.12)*cj3*sj4);
IkReal x1157=(x1155+x1154);
IkReal x1158=(x1151+x1152+x1137);
evalcond[0]=((-0.0022)+x1157+(((-1.0)*x1153))+(((-1.0)*x1141*x1149))+py+(((-1.0)*x1138*x1139))+(((-1.0)*r12*x1147)));
evalcond[1]=(x1150+((x1146*x1149))+(((-1.0)*x1158))+((r22*x1147))+((x1139*x1148)));
evalcond[2]=(x1150+((r12*x1156))+(((-1.0)*x1158))+((x1141*x1142))+(((-1.0)*sj5*x1138*x1144))+(((-1.0)*cj5*x1141*x1144))+(((-1.0)*x1138*x1140)));
evalcond[3]=((0.0022)+((x1140*x1148))+x1153+(((-1.0)*x1157))+((cj5*x1144*x1146))+(((-1.0)*py))+(((-1.0)*r22*x1156))+(((-1.0)*x1142*x1146))+((sj5*x1144*x1148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1159=((1.0)*sj1);
IkReal x1160=(sj4*sj5);
IkReal x1161=(cj4*r12);
IkReal x1162=(cj4*r22);
IkReal x1163=(cj5*sj4);
IkReal x1164=(cj1*x1163);
if( IKabs((((cj1*x1161))+(((-1.0)*x1159*x1162))+((r11*x1164))+(((-1.0)*r21*x1159*x1163))+(((-1.0)*r20*x1159*x1160))+((cj1*r10*x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1162))+((sj1*x1161))+((r11*sj1*x1163))+((r21*x1164))+((cj1*r20*x1160))+((r10*sj1*x1160)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1161))+(((-1.0)*x1159*x1162))+((r11*x1164))+(((-1.0)*r21*x1159*x1163))+(((-1.0)*r20*x1159*x1160))+((cj1*r10*x1160))))+IKsqr((((cj1*x1162))+((sj1*x1161))+((r11*sj1*x1163))+((r21*x1164))+((cj1*r20*x1160))+((r10*sj1*x1160))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1161))+(((-1.0)*x1159*x1162))+((r11*x1164))+(((-1.0)*r21*x1159*x1163))+(((-1.0)*r20*x1159*x1160))+((cj1*r10*x1160))), (((cj1*x1162))+((sj1*x1161))+((r11*sj1*x1163))+((r21*x1164))+((cj1*r20*x1160))+((r10*sj1*x1160))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1165=IKcos(j2);
IkReal x1166=IKsin(j2);
IkReal x1167=(sj3*sj5);
IkReal x1168=((0.001205)*cj5);
IkReal x1169=(r20*sj5);
IkReal x1170=((1.0)*sj4);
IkReal x1171=(r10*sj5);
IkReal x1172=(cj5*r21);
IkReal x1173=((1.0)*cj4);
IkReal x1174=(cj3*sj4);
IkReal x1175=(cj5*r11);
IkReal x1176=(sj1*x1165);
IkReal x1177=(cj1*x1166);
IkReal x1178=(cj1*x1165);
IkReal x1179=((1.0)*cj5*sj3);
IkReal x1180=(cj3*x1173);
IkReal x1181=(sj1*x1166);
IkReal x1182=(x1177+x1176);
evalcond[0]=(x1182+(((-1.0)*r12*x1173))+(((-1.0)*x1170*x1171))+(((-1.0)*x1170*x1175)));
evalcond[1]=(x1178+(((-1.0)*r22*x1173))+(((-1.0)*x1170*x1172))+(((-1.0)*x1169*x1170))+(((-1.0)*x1181)));
evalcond[2]=((((-1.0)*r21*x1168))+(((0.12)*x1178))+(((-0.001205)*x1169))+(((-1.0)*pz))+(((-0.12)*x1181))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x1177))+(((0.12)*x1176))+(((-0.001205)*x1171))+(((-1.0)*r11*x1168))+(((-1.0)*py)));
evalcond[4]=(x1182+(((-1.0)*r20*x1179))+((r21*x1167))+(((-1.0)*x1169*x1180))+(((-1.0)*x1172*x1180))+((r22*x1174)));
evalcond[5]=((((-1.0)*x1171*x1180))+(((-1.0)*x1175*x1180))+x1181+((r12*x1174))+((r11*x1167))+(((-1.0)*r10*x1179))+(((-1.0)*x1178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1183=(cj5*r21);
IkReal x1184=((1.23711340206186)*sj4);
IkReal x1185=(r20*sj5);
IkReal x1186=((0.001205)*cj0);
IkReal x1187=(r10*sj5);
IkReal x1188=(cj5*r11);
IkReal x1189=((0.12)*cj0);
CheckValue<IkReal> x1190=IKPowWithIntegerCheck(cj0,-2);
if(!x1190.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x1190.value)*(((((-0.0022)*(cj0*cj0)))+((sj4*x1188*x1189))+(((-1.0)*x1186*x1188))+(((-1.0)*x1186*x1187))+((sj4*x1187*x1189))+((cj4*r12*x1189))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*x1184*x1185))+(((-1.0)*x1183*x1184))+(((0.0124226804123711)*x1183))+(((0.0124226804123711)*x1185))+(((-1.23711340206186)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x1190.value)*(((((-0.0022)*(cj0*cj0)))+((sj4*x1188*x1189))+(((-1.0)*x1186*x1188))+(((-1.0)*x1186*x1187))+((sj4*x1187*x1189))+((cj4*r12*x1189))+(((-1.0)*cj0*py))))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*x1184*x1185))+(((-1.0)*x1183*x1184))+(((0.0124226804123711)*x1183))+(((0.0124226804123711)*x1185))+(((-1.23711340206186)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x1190.value)*(((((-0.0022)*(cj0*cj0)))+((sj4*x1188*x1189))+(((-1.0)*x1186*x1188))+(((-1.0)*x1186*x1187))+((sj4*x1187*x1189))+((cj4*r12*x1189))+(((-1.0)*cj0*py))))), ((((10.3092783505155)*pz))+(((-1.0)*x1184*x1185))+(((-1.0)*x1183*x1184))+(((0.0124226804123711)*x1183))+(((0.0124226804123711)*x1185))+(((-1.23711340206186)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1191=cj0*cj0;
IkReal x1192=sj0*sj0;
IkReal x1193=IKsin(j1);
IkReal x1194=IKcos(j1);
IkReal x1195=(r00*sj4);
IkReal x1196=(cj3*cj4);
IkReal x1197=((1.0)*py);
IkReal x1198=(cj0*sj0);
IkReal x1199=((0.12)*sj3);
IkReal x1200=(sj0*sj5);
IkReal x1201=((0.001205)*cj5);
IkReal x1202=((1.0)*px);
IkReal x1203=((0.12)*sj0);
IkReal x1204=(cj3*sj4);
IkReal x1205=((0.001205)*sj5);
IkReal x1206=((1.0)*pz);
IkReal x1207=(cj4*r12);
IkReal x1208=((0.12)*sj5);
IkReal x1209=((0.12)*r22);
IkReal x1210=(cj0*sj4);
IkReal x1211=(cj0*r21);
IkReal x1212=(cj5*r01);
IkReal x1213=((0.12)*cj5);
IkReal x1214=(r10*sj4);
IkReal x1215=(cj5*r20);
IkReal x1216=((0.0022)*x1198);
IkReal x1217=(sj0*x1201);
IkReal x1218=(cj0*x1208);
IkReal x1219=((0.097)*x1193);
IkReal x1220=((0.12)*cj4*r02);
IkReal x1221=(cj0*x1205);
IkReal x1222=(r11*x1213);
IkReal x1223=((0.097)*x1194);
IkReal x1224=(x1198*x1219);
IkReal x1225=(x1224+x1216);
evalcond[0]=(((r20*sj4*x1208))+x1223+((r21*sj4*x1213))+(((-1.0)*r21*x1201))+(((-1.0)*x1206))+(((-1.0)*r20*x1205))+((cj4*x1209)));
evalcond[1]=((((-1.0)*cj0*r11*x1201))+(((-0.0022)*x1191))+((r10*x1208*x1210))+(((-1.0)*r10*x1221))+((x1210*x1222))+(((-1.0)*cj0*x1197))+(((-1.0)*x1191*x1219))+(((0.12)*cj0*x1207)));
evalcond[2]=((((0.001205)*r00*x1200))+(((-1.0)*x1192*x1219))+(((-1.0)*cj4*r02*x1203))+(((-0.0022)*x1192))+(((-0.12)*x1195*x1200))+((r01*x1217))+((px*sj0))+(((-1.0)*sj4*x1203*x1212)));
evalcond[3]=(((r20*x1221))+(((0.12)*r12*x1204))+(((-1.0)*cj0*x1223))+(((-1.0)*cj5*r10*x1199))+((r11*sj5*x1199))+((x1201*x1211))+(((-1.0)*x1196*x1222))+((cj0*pz))+(((-1.0)*r10*x1196*x1208)));
evalcond[4]=(((sj0*x1223))+((r01*sj5*x1199))+(((-0.12)*x1196*x1212))+(((-0.001205)*r20*x1200))+(((-1.0)*sj0*x1206))+(((-1.0)*r00*x1196*x1208))+(((0.12)*r02*x1204))+(((-1.0)*r21*x1217))+(((-1.0)*cj5*r00*x1199)));
evalcond[5]=(((sj5*x1199*x1211))+(((-1.0)*r10*x1205))+(((-1.0)*r20*x1196*x1218))+(((-1.0)*x1196*x1211*x1213))+(((-1.0)*x1197))+((cj0*x1204*x1209))+(((-1.0)*r11*x1201))+(((-1.0)*cj0*x1219))+(((-0.0022)*cj0))+(((-1.0)*cj0*x1199*x1215)));
evalcond[6]=((((0.12)*r20*x1196*x1200))+((cj5*r21*x1196*x1203))+((sj0*x1199*x1215))+(((0.0022)*sj0))+(((-1.0)*r01*x1201))+(((-1.0)*r00*x1205))+(((-1.0)*r22*x1203*x1204))+((sj0*x1219))+(((-1.0)*x1202))+(((-1.0)*r21*x1199*x1200)));
evalcond[7]=(x1225+((r11*x1217))+(((0.001205)*r10*x1200))+((cj0*x1220))+((py*sj0))+(((0.12)*x1210*x1212))+((x1195*x1218)));
evalcond[8]=(x1225+(((-1.0)*r00*x1221))+(((-1.0)*cj0*r01*x1201))+(((-1.0)*x1203*x1207))+(((-0.12)*x1200*x1214))+(((-1.0)*cj0*x1202))+(((-1.0)*cj5*r11*sj4*x1203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1226=(sj1*sj4);
IkReal x1227=(cj5*r01);
IkReal x1228=(r20*sj5);
IkReal x1229=(cj4*sj1);
IkReal x1230=(r00*sj5);
IkReal x1231=(cj1*sj4);
IkReal x1232=(cj5*r21);
IkReal x1233=(cj1*cj4);
if( IKabs(((((-1.0)*r22*x1229))+(((-1.0)*x1226*x1228))+(((-1.0)*x1226*x1232))+((r02*x1233))+((x1227*x1231))+((x1230*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1229))+((r22*x1233))+((x1226*x1230))+((x1226*x1227))+((x1231*x1232))+((x1228*x1231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r22*x1229))+(((-1.0)*x1226*x1228))+(((-1.0)*x1226*x1232))+((r02*x1233))+((x1227*x1231))+((x1230*x1231))))+IKsqr((((r02*x1229))+((r22*x1233))+((x1226*x1230))+((x1226*x1227))+((x1231*x1232))+((x1228*x1231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r22*x1229))+(((-1.0)*x1226*x1228))+(((-1.0)*x1226*x1232))+((r02*x1233))+((x1227*x1231))+((x1230*x1231))), (((r02*x1229))+((r22*x1233))+((x1226*x1230))+((x1226*x1227))+((x1231*x1232))+((x1228*x1231))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1234=IKcos(j2);
IkReal x1235=IKsin(j2);
IkReal x1236=(cj3*sj4);
IkReal x1237=((1.0)*cj5);
IkReal x1238=(cj3*cj4);
IkReal x1239=((0.001205)*cj5);
IkReal x1240=(sj3*sj5);
IkReal x1241=(r20*sj5);
IkReal x1242=((1.0)*sj4);
IkReal x1243=(r00*sj5);
IkReal x1244=((1.0)*cj4);
IkReal x1245=(sj1*x1234);
IkReal x1246=(cj1*x1235);
IkReal x1247=(cj1*x1234);
IkReal x1248=(sj1*x1235);
IkReal x1249=(x1245+x1246);
evalcond[0]=((((-1.0)*r02*x1244))+x1249+(((-1.0)*x1242*x1243))+(((-1.0)*r01*sj4*x1237)));
evalcond[1]=((((-1.0)*r21*sj4*x1237))+x1247+(((-1.0)*x1248))+(((-1.0)*r22*x1244))+(((-1.0)*x1241*x1242)));
evalcond[2]=((((0.12)*x1247))+(((-1.0)*r21*x1239))+(((-1.0)*pz))+(((-0.12)*x1248))+(((-0.001205)*x1241))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x1245))+(((0.12)*x1246))+(((-1.0)*r01*x1239))+(((-1.0)*px))+(((-0.001205)*x1243)));
evalcond[4]=(x1249+(((-1.0)*r20*sj3*x1237))+(((-1.0)*r21*x1237*x1238))+((r22*x1236))+((r21*x1240))+(((-1.0)*x1238*x1241)));
evalcond[5]=(x1248+(((-1.0)*x1247))+(((-1.0)*r01*x1237*x1238))+((r01*x1240))+(((-1.0)*r00*sj3*x1237))+((r02*x1236))+(((-1.0)*x1238*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1250=((1.0)*sj1);
IkReal x1251=(sj4*sj5);
IkReal x1252=(cj4*r22);
IkReal x1253=(cj5*sj4);
IkReal x1254=(cj4*r02);
IkReal x1255=((1.0)*cj1);
if( IKabs(((((-1.0)*r21*x1250*x1253))+(((-1.0)*r20*x1250*x1251))+(((-1.0)*x1254*x1255))+(((-1.0)*r01*x1253*x1255))+(((-1.0)*x1250*x1252))+(((-1.0)*r00*x1251*x1255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1250*x1251))+((cj1*r20*x1251))+((cj1*r21*x1253))+((cj1*x1252))+(((-1.0)*x1250*x1254))+(((-1.0)*r01*x1250*x1253)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x1250*x1253))+(((-1.0)*r20*x1250*x1251))+(((-1.0)*x1254*x1255))+(((-1.0)*r01*x1253*x1255))+(((-1.0)*x1250*x1252))+(((-1.0)*r00*x1251*x1255))))+IKsqr(((((-1.0)*r00*x1250*x1251))+((cj1*r20*x1251))+((cj1*r21*x1253))+((cj1*x1252))+(((-1.0)*x1250*x1254))+(((-1.0)*r01*x1250*x1253))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x1250*x1253))+(((-1.0)*r20*x1250*x1251))+(((-1.0)*x1254*x1255))+(((-1.0)*r01*x1253*x1255))+(((-1.0)*x1250*x1252))+(((-1.0)*r00*x1251*x1255))), ((((-1.0)*r00*x1250*x1251))+((cj1*r20*x1251))+((cj1*r21*x1253))+((cj1*x1252))+(((-1.0)*x1250*x1254))+(((-1.0)*r01*x1250*x1253))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1256=IKcos(j2);
IkReal x1257=IKsin(j2);
IkReal x1258=(cj3*sj4);
IkReal x1259=((1.0)*cj5);
IkReal x1260=(cj3*cj4);
IkReal x1261=((0.001205)*cj5);
IkReal x1262=(sj3*sj5);
IkReal x1263=(r20*sj5);
IkReal x1264=((1.0)*sj4);
IkReal x1265=(r00*sj5);
IkReal x1266=((1.0)*cj4);
IkReal x1267=(cj1*x1256);
IkReal x1268=(cj1*x1257);
IkReal x1269=(sj1*x1257);
IkReal x1270=(sj1*x1256);
IkReal x1271=((1.0)*x1269);
evalcond[0]=(x1267+(((-1.0)*x1271))+(((-1.0)*r22*x1266))+(((-1.0)*r21*sj4*x1259))+(((-1.0)*x1263*x1264)));
evalcond[1]=((((-1.0)*r21*x1261))+(((-0.12)*x1269))+(((-0.001205)*x1263))+(((-1.0)*pz))+(((0.12)*x1267))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*x1264*x1265))+(((-1.0)*r01*sj4*x1259))+(((-1.0)*r02*x1266))+(((-1.0)*x1270))+(((-1.0)*x1268)));
evalcond[3]=((-0.0022)+(((-0.12)*x1270))+(((-0.12)*x1268))+(((-0.001205)*x1265))+(((-0.097)*sj1))+(((-1.0)*r01*x1261))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*r21*x1259*x1260))+x1270+x1268+((r22*x1258))+((r21*x1262))+(((-1.0)*r20*sj3*x1259))+(((-1.0)*x1260*x1263)));
evalcond[5]=(x1267+(((-1.0)*x1271))+((r02*x1258))+(((-1.0)*r01*x1259*x1260))+(((-1.0)*x1260*x1265))+(((-1.0)*r00*sj3*x1259))+((r01*x1262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1272=((1.0)*sj1);
IkReal x1273=(sj4*sj5);
IkReal x1274=(cj4*r22);
IkReal x1275=(cj4*r12);
IkReal x1276=((1.0)*cj1);
IkReal x1277=(cj5*r21*sj4);
IkReal x1278=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x1275*x1276))+(((-1.0)*x1276*x1278))+(((-1.0)*x1272*x1277))+(((-1.0)*x1272*x1274))+(((-1.0)*r20*x1272*x1273))+(((-1.0)*r10*x1273*x1276)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1272*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1277))+((cj1*x1274))+((cj1*r20*x1273))+(((-1.0)*r10*x1272*x1273)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1275*x1276))+(((-1.0)*x1276*x1278))+(((-1.0)*x1272*x1277))+(((-1.0)*x1272*x1274))+(((-1.0)*r20*x1272*x1273))+(((-1.0)*r10*x1273*x1276))))+IKsqr(((((-1.0)*x1272*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1277))+((cj1*x1274))+((cj1*r20*x1273))+(((-1.0)*r10*x1272*x1273))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1275*x1276))+(((-1.0)*x1276*x1278))+(((-1.0)*x1272*x1277))+(((-1.0)*x1272*x1274))+(((-1.0)*r20*x1272*x1273))+(((-1.0)*r10*x1273*x1276))), ((((-1.0)*x1272*x1275))+(((-1.0)*x1272*x1278))+((cj1*x1277))+((cj1*x1274))+((cj1*r20*x1273))+(((-1.0)*r10*x1272*x1273))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1279=IKcos(j2);
IkReal x1280=IKsin(j2);
IkReal x1281=(sj3*sj5);
IkReal x1282=((0.001205)*cj5);
IkReal x1283=(r20*sj5);
IkReal x1284=((1.0)*sj4);
IkReal x1285=(r10*sj5);
IkReal x1286=((1.0)*sj1);
IkReal x1287=(cj5*r21);
IkReal x1288=((1.0)*cj4);
IkReal x1289=((0.12)*sj1);
IkReal x1290=(cj3*sj4);
IkReal x1291=(cj5*r11);
IkReal x1292=(cj1*x1279);
IkReal x1293=((1.0)*cj5*sj3);
IkReal x1294=(cj1*x1280);
IkReal x1295=(cj3*x1288);
IkReal x1296=(x1280*x1286);
evalcond[0]=(x1292+(((-1.0)*x1296))+(((-1.0)*r22*x1288))+(((-1.0)*x1284*x1287))+(((-1.0)*x1283*x1284)));
evalcond[1]=((((0.12)*x1292))+(((-1.0)*pz))+(((-1.0)*r21*x1282))+(((0.097)*cj1))+(((-1.0)*x1280*x1289))+(((-0.001205)*x1283)));
evalcond[2]=((((-1.0)*x1284*x1291))+(((-1.0)*x1284*x1285))+(((-1.0)*x1294))+(((-1.0)*x1279*x1286))+(((-1.0)*r12*x1288)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*py))+(((-0.12)*x1294))+(((-1.0)*x1279*x1289))+(((-1.0)*r11*x1282))+(((-0.001205)*x1285)));
evalcond[4]=(x1294+(((-1.0)*x1287*x1295))+((sj1*x1279))+(((-1.0)*x1283*x1295))+(((-1.0)*r20*x1293))+((r21*x1281))+((r22*x1290)));
evalcond[5]=(x1292+(((-1.0)*x1296))+((r11*x1281))+((r12*x1290))+(((-1.0)*x1285*x1295))+(((-1.0)*x1291*x1295))+(((-1.0)*r10*x1293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1297=((1.0)*sj1);
IkReal x1298=(sj4*sj5);
IkReal x1299=(cj4*r12);
IkReal x1300=(cj4*r22);
IkReal x1301=(cj5*sj4);
IkReal x1302=(cj1*x1301);
if( IKabs((((cj1*r10*x1298))+(((-1.0)*r21*x1297*x1301))+(((-1.0)*x1297*x1300))+((cj1*x1299))+((r11*x1302))+(((-1.0)*r20*x1297*x1298)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x1301))+((cj1*r20*x1298))+((sj1*x1299))+((r21*x1302))+((r10*sj1*x1298))+((cj1*x1300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1298))+(((-1.0)*r21*x1297*x1301))+(((-1.0)*x1297*x1300))+((cj1*x1299))+((r11*x1302))+(((-1.0)*r20*x1297*x1298))))+IKsqr((((r11*sj1*x1301))+((cj1*r20*x1298))+((sj1*x1299))+((r21*x1302))+((r10*sj1*x1298))+((cj1*x1300))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1298))+(((-1.0)*r21*x1297*x1301))+(((-1.0)*x1297*x1300))+((cj1*x1299))+((r11*x1302))+(((-1.0)*r20*x1297*x1298))), (((r11*sj1*x1301))+((cj1*r20*x1298))+((sj1*x1299))+((r21*x1302))+((r10*sj1*x1298))+((cj1*x1300))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1303=IKcos(j2);
IkReal x1304=IKsin(j2);
IkReal x1305=(sj3*sj5);
IkReal x1306=((0.001205)*cj5);
IkReal x1307=(r20*sj5);
IkReal x1308=((1.0)*sj4);
IkReal x1309=(r10*sj5);
IkReal x1310=(cj5*r21);
IkReal x1311=((1.0)*cj4);
IkReal x1312=(cj3*sj4);
IkReal x1313=(cj5*r11);
IkReal x1314=(sj1*x1303);
IkReal x1315=(cj1*x1304);
IkReal x1316=(cj1*x1303);
IkReal x1317=((1.0)*cj5*sj3);
IkReal x1318=(cj3*x1311);
IkReal x1319=(sj1*x1304);
IkReal x1320=(x1315+x1314);
evalcond[0]=(x1320+(((-1.0)*x1308*x1313))+(((-1.0)*x1308*x1309))+(((-1.0)*r12*x1311)));
evalcond[1]=(x1316+(((-1.0)*x1307*x1308))+(((-1.0)*x1308*x1310))+(((-1.0)*r22*x1311))+(((-1.0)*x1319)));
evalcond[2]=((((-0.12)*x1319))+(((-1.0)*r21*x1306))+(((-1.0)*pz))+(((0.12)*x1316))+(((0.097)*cj1))+(((-0.001205)*x1307)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*py))+(((-1.0)*r11*x1306))+(((0.12)*x1314))+(((0.12)*x1315))+(((-0.001205)*x1309)));
evalcond[4]=(x1320+(((-1.0)*x1307*x1318))+((r22*x1312))+((r21*x1305))+(((-1.0)*r20*x1317))+(((-1.0)*x1310*x1318)));
evalcond[5]=(x1319+(((-1.0)*x1313*x1318))+(((-1.0)*x1316))+((r11*x1305))+((r12*x1312))+(((-1.0)*r10*x1317))+(((-1.0)*x1309*x1318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1321=((1.0)*sj1);
IkReal x1322=(sj4*sj5);
IkReal x1323=(cj0*r20);
IkReal x1324=(cj4*r12);
IkReal x1325=(cj0*cj1);
IkReal x1326=(cj4*r22);
IkReal x1327=((1.0)*cj1);
IkReal x1328=(cj5*sj4);
CheckValue<IkReal> x1329 = IKatan2WithCheck(IkReal(((((-1.0)*x1324*x1327))+(((-1.0)*x1321*x1322*x1323))+(((-1.0)*r11*x1327*x1328))+(((-1.0)*r10*x1322*x1327))+(((-1.0)*cj0*r21*x1321*x1328))+(((-1.0)*cj0*x1321*x1326)))),IkReal((((r21*x1325*x1328))+((cj1*x1322*x1323))+(((-1.0)*r11*x1321*x1328))+(((-1.0)*x1321*x1324))+((x1325*x1326))+(((-1.0)*r10*x1321*x1322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1329.valid){
continue;
}
CheckValue<IkReal> x1330=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1330.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1329.value)+(((1.5707963267949)*(x1330.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1331=IKcos(j2);
IkReal x1332=IKsin(j2);
IkReal x1333=(cj3*sj4);
IkReal x1334=((1.0)*r20);
IkReal x1335=(cj5*sj3);
IkReal x1336=(cj3*cj4);
IkReal x1337=((1.0)*r10);
IkReal x1338=(sj3*sj5);
IkReal x1339=((1.0)*cj5);
IkReal x1340=((0.001205)*cj5);
IkReal x1341=((1.0)*r00);
IkReal x1342=((1.0)*cj0);
IkReal x1343=((0.001205)*sj5);
IkReal x1344=(sj4*sj5);
IkReal x1345=((0.097)*sj1);
IkReal x1346=((1.0)*cj4);
IkReal x1347=(cj1*x1331);
IkReal x1348=(sj0*x1332);
IkReal x1349=(cj1*x1332);
IkReal x1350=(sj1*x1332);
IkReal x1351=(sj1*x1331);
IkReal x1352=((0.12)*x1351);
evalcond[0]=(x1347+(((-1.0)*x1350))+(((-1.0)*r21*sj4*x1339))+(((-1.0)*r22*x1346))+(((-1.0)*x1334*x1344)));
evalcond[1]=((((-0.12)*x1350))+(((0.12)*x1347))+(((-1.0)*r20*x1343))+(((-1.0)*r21*x1340))+(((-1.0)*pz))+(((0.097)*cj1)));
evalcond[2]=(((cj1*x1348))+(((-1.0)*r02*x1346))+(((-1.0)*x1341*x1344))+((sj0*x1351))+(((-1.0)*r01*sj4*x1339)));
evalcond[3]=((((-1.0)*r12*x1346))+(((-1.0)*r11*sj4*x1339))+(((-1.0)*x1342*x1349))+(((-1.0)*x1342*x1351))+(((-1.0)*x1337*x1344)));
evalcond[4]=((((0.12)*cj1*x1348))+((sj0*x1345))+((sj0*x1352))+(((0.0022)*sj0))+(((-1.0)*r00*x1343))+(((-1.0)*r01*x1340))+(((-1.0)*px)));
evalcond[5]=((((-1.0)*cj0*x1345))+(((-1.0)*cj0*x1352))+(((-1.0)*r11*x1340))+(((-0.12)*cj0*x1349))+(((-1.0)*py))+(((-1.0)*r10*x1343))+(((-0.0022)*cj0)));
evalcond[6]=(x1349+x1351+(((-1.0)*r21*x1336*x1339))+(((-1.0)*sj5*x1334*x1336))+(((-1.0)*x1334*x1335))+((r21*x1338))+((r22*x1333)));
evalcond[7]=(((sj1*x1348))+(((-1.0)*sj0*x1347))+((r01*x1338))+(((-1.0)*x1335*x1341))+(((-1.0)*r01*x1336*x1339))+(((-1.0)*sj5*x1336*x1341))+((r02*x1333)));
evalcond[8]=((((-1.0)*x1335*x1337))+((r12*x1333))+((r11*x1338))+(((-1.0)*sj5*x1336*x1337))+((cj0*x1347))+(((-1.0)*r11*x1336*x1339))+(((-1.0)*x1342*x1350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1353=((1.0)*sj0);
IkReal x1354=(cj1*sj4);
IkReal x1355=(r20*sj5);
IkReal x1356=(cj4*sj1);
IkReal x1357=(r00*sj5);
IkReal x1358=(sj1*sj4);
IkReal x1359=(cj1*cj4);
IkReal x1360=(cj5*x1358);
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1353*x1356))+(((-1.0)*x1353*x1355*x1358))+((cj5*r01*x1354))+((r02*x1359))+((x1354*x1357))+(((-1.0)*r21*x1353*x1360)))),IkReal((((x1357*x1358))+((r02*x1356))+((r22*sj0*x1359))+((cj5*r21*sj0*x1354))+((r01*x1360))+((sj0*x1354*x1355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1362.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1361.value)+(((1.5707963267949)*(x1362.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1363=IKcos(j2);
IkReal x1364=IKsin(j2);
IkReal x1365=(cj3*sj4);
IkReal x1366=((1.0)*r20);
IkReal x1367=(cj5*sj3);
IkReal x1368=(cj3*cj4);
IkReal x1369=((1.0)*r10);
IkReal x1370=(sj3*sj5);
IkReal x1371=((1.0)*cj5);
IkReal x1372=((0.001205)*cj5);
IkReal x1373=((1.0)*r00);
IkReal x1374=((1.0)*cj0);
IkReal x1375=((0.001205)*sj5);
IkReal x1376=(sj4*sj5);
IkReal x1377=((0.097)*sj1);
IkReal x1378=((1.0)*cj4);
IkReal x1379=(cj1*x1363);
IkReal x1380=(sj0*x1364);
IkReal x1381=(cj1*x1364);
IkReal x1382=(sj1*x1364);
IkReal x1383=(sj1*x1363);
IkReal x1384=((0.12)*x1383);
evalcond[0]=(x1379+(((-1.0)*r22*x1378))+(((-1.0)*r21*sj4*x1371))+(((-1.0)*x1366*x1376))+(((-1.0)*x1382)));
evalcond[1]=((((-1.0)*r20*x1375))+(((-1.0)*pz))+(((-1.0)*r21*x1372))+(((0.097)*cj1))+(((0.12)*x1379))+(((-0.12)*x1382)));
evalcond[2]=((((-1.0)*r02*x1378))+((sj0*x1383))+(((-1.0)*x1373*x1376))+(((-1.0)*r01*sj4*x1371))+((cj1*x1380)));
evalcond[3]=((((-1.0)*x1374*x1381))+(((-1.0)*x1374*x1383))+(((-1.0)*r12*x1378))+(((-1.0)*r11*sj4*x1371))+(((-1.0)*x1369*x1376)));
evalcond[4]=((((-1.0)*r00*x1375))+(((0.12)*cj1*x1380))+(((-1.0)*r01*x1372))+(((0.0022)*sj0))+(((-1.0)*px))+((sj0*x1384))+((sj0*x1377)));
evalcond[5]=((((-1.0)*cj0*x1384))+(((-1.0)*cj0*x1377))+(((-1.0)*py))+(((-1.0)*r10*x1375))+(((-1.0)*r11*x1372))+(((-0.12)*cj0*x1381))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*x1366*x1367))+x1381+x1383+((r22*x1365))+(((-1.0)*r21*x1368*x1371))+((r21*x1370))+(((-1.0)*sj5*x1366*x1368)));
evalcond[7]=(((r02*x1365))+((sj1*x1380))+(((-1.0)*x1367*x1373))+(((-1.0)*sj0*x1379))+(((-1.0)*sj5*x1368*x1373))+((r01*x1370))+(((-1.0)*r01*x1368*x1371)));
evalcond[8]=((((-1.0)*sj5*x1368*x1369))+((r11*x1370))+(((-1.0)*x1374*x1382))+(((-1.0)*r11*x1368*x1371))+((r12*x1365))+((cj0*x1379))+(((-1.0)*x1367*x1369)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1385=(cj5*sj4);
IkReal x1386=(r01*sj0);
IkReal x1387=(r20*sj5);
IkReal x1388=((0.12)*sj0);
IkReal x1389=(r00*sj5);
CheckValue<IkReal> x1390=IKPowWithIntegerCheck(sj0,-2);
if(!x1390.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x1390.value)*(((((-0.12)*x1385*x1386))+(((-1.0)*sj4*x1388*x1389))+(((-1.0)*cj4*r02*x1388))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1389))+(((0.001205)*cj5*x1386)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0124226804123711)*cj5*r21))+(((0.0124226804123711)*x1387))+(((10.3092783505155)*pz))+(((-1.23711340206186)*sj4*x1387))+(((-1.23711340206186)*cj4*r22))+(((-1.23711340206186)*r21*x1385)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x1390.value)*(((((-0.12)*x1385*x1386))+(((-1.0)*sj4*x1388*x1389))+(((-1.0)*cj4*r02*x1388))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1389))+(((0.001205)*cj5*x1386))))))+IKsqr(((((0.0124226804123711)*cj5*r21))+(((0.0124226804123711)*x1387))+(((10.3092783505155)*pz))+(((-1.23711340206186)*sj4*x1387))+(((-1.23711340206186)*cj4*r22))+(((-1.23711340206186)*r21*x1385))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x1390.value)*(((((-0.12)*x1385*x1386))+(((-1.0)*sj4*x1388*x1389))+(((-1.0)*cj4*r02*x1388))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1389))+(((0.001205)*cj5*x1386))))), ((((0.0124226804123711)*cj5*r21))+(((0.0124226804123711)*x1387))+(((10.3092783505155)*pz))+(((-1.23711340206186)*sj4*x1387))+(((-1.23711340206186)*cj4*r22))+(((-1.23711340206186)*r21*x1385))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1391=cj0*cj0;
IkReal x1392=sj0*sj0;
IkReal x1393=IKsin(j1);
IkReal x1394=IKcos(j1);
IkReal x1395=(r00*sj4);
IkReal x1396=(cj3*cj4);
IkReal x1397=((1.0)*py);
IkReal x1398=(cj0*sj0);
IkReal x1399=((0.12)*sj3);
IkReal x1400=(sj0*sj5);
IkReal x1401=((0.001205)*cj5);
IkReal x1402=((1.0)*px);
IkReal x1403=((0.12)*sj0);
IkReal x1404=(cj3*sj4);
IkReal x1405=((0.001205)*sj5);
IkReal x1406=((1.0)*pz);
IkReal x1407=(cj4*r12);
IkReal x1408=((0.12)*sj5);
IkReal x1409=((0.12)*r22);
IkReal x1410=(cj0*sj4);
IkReal x1411=(cj0*r21);
IkReal x1412=(cj5*r01);
IkReal x1413=((0.12)*cj5);
IkReal x1414=(r10*sj4);
IkReal x1415=(cj5*r20);
IkReal x1416=((0.0022)*x1398);
IkReal x1417=(sj0*x1401);
IkReal x1418=(cj0*x1408);
IkReal x1419=((0.097)*x1393);
IkReal x1420=((0.12)*cj4*r02);
IkReal x1421=(cj0*x1405);
IkReal x1422=(r11*x1413);
IkReal x1423=((0.097)*x1394);
IkReal x1424=(x1398*x1419);
IkReal x1425=(x1424+x1416);
evalcond[0]=(((r21*sj4*x1413))+((cj4*x1409))+(((-1.0)*x1406))+x1423+(((-1.0)*r20*x1405))+((r20*sj4*x1408))+(((-1.0)*r21*x1401)));
evalcond[1]=((((0.12)*cj0*x1407))+(((-1.0)*cj0*x1397))+((x1410*x1422))+(((-1.0)*r10*x1421))+(((-1.0)*cj0*r11*x1401))+(((-0.0022)*x1391))+((r10*x1408*x1410))+(((-1.0)*x1391*x1419)));
evalcond[2]=((((-0.12)*x1395*x1400))+(((-0.0022)*x1392))+(((-1.0)*cj4*r02*x1403))+((r01*x1417))+(((0.001205)*r00*x1400))+(((-1.0)*sj4*x1403*x1412))+(((-1.0)*x1392*x1419))+((px*sj0)));
evalcond[3]=((((0.12)*r12*x1404))+(((-1.0)*cj0*x1423))+((x1401*x1411))+(((-1.0)*x1396*x1422))+(((-1.0)*cj5*r10*x1399))+((cj0*pz))+(((-1.0)*r10*x1396*x1408))+((r20*x1421))+((r11*sj5*x1399)));
evalcond[4]=((((-1.0)*sj0*x1406))+(((-0.12)*x1396*x1412))+(((0.12)*r02*x1404))+(((-0.001205)*r20*x1400))+((r01*sj5*x1399))+(((-1.0)*r00*x1396*x1408))+(((-1.0)*r21*x1417))+(((-1.0)*cj5*r00*x1399))+((sj0*x1423)));
evalcond[5]=(((sj5*x1399*x1411))+(((-1.0)*cj0*x1399*x1415))+(((-1.0)*r11*x1401))+(((-1.0)*x1396*x1411*x1413))+((cj0*x1404*x1409))+(((-1.0)*r20*x1396*x1418))+(((-1.0)*r10*x1405))+(((-1.0)*cj0*x1419))+(((-0.0022)*cj0))+(((-1.0)*x1397)));
evalcond[6]=((((-1.0)*r22*x1403*x1404))+(((-1.0)*r21*x1399*x1400))+(((0.0022)*sj0))+(((-1.0)*r00*x1405))+((sj0*x1399*x1415))+(((-1.0)*x1402))+(((-1.0)*r01*x1401))+(((0.12)*r20*x1396*x1400))+((cj5*r21*x1396*x1403))+((sj0*x1419)));
evalcond[7]=((((0.001205)*r10*x1400))+((r11*x1417))+x1425+((x1395*x1418))+((py*sj0))+(((0.12)*x1410*x1412))+((cj0*x1420)));
evalcond[8]=((((-0.12)*x1400*x1414))+(((-1.0)*cj0*r01*x1401))+(((-1.0)*cj5*r11*sj4*x1403))+x1425+(((-1.0)*x1403*x1407))+(((-1.0)*cj0*x1402))+(((-1.0)*r00*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1426=(sj1*sj4);
IkReal x1427=(cj5*r01);
IkReal x1428=(r20*sj5);
IkReal x1429=(cj4*sj1);
IkReal x1430=(r00*sj5);
IkReal x1431=(cj1*sj4);
IkReal x1432=(cj5*r21);
IkReal x1433=(cj1*cj4);
if( IKabs((((r02*x1433))+((x1430*x1431))+((x1427*x1431))+(((-1.0)*x1426*x1428))+(((-1.0)*r22*x1429))+(((-1.0)*x1426*x1432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1428*x1431))+((x1426*x1427))+((r02*x1429))+((x1426*x1430))+((r22*x1433))+((x1431*x1432)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1433))+((x1430*x1431))+((x1427*x1431))+(((-1.0)*x1426*x1428))+(((-1.0)*r22*x1429))+(((-1.0)*x1426*x1432))))+IKsqr((((x1428*x1431))+((x1426*x1427))+((r02*x1429))+((x1426*x1430))+((r22*x1433))+((x1431*x1432))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1433))+((x1430*x1431))+((x1427*x1431))+(((-1.0)*x1426*x1428))+(((-1.0)*r22*x1429))+(((-1.0)*x1426*x1432))), (((x1428*x1431))+((x1426*x1427))+((r02*x1429))+((x1426*x1430))+((r22*x1433))+((x1431*x1432))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1434=IKcos(j2);
IkReal x1435=IKsin(j2);
IkReal x1436=(cj3*sj4);
IkReal x1437=((1.0)*cj5);
IkReal x1438=(cj3*cj4);
IkReal x1439=((0.001205)*cj5);
IkReal x1440=(sj3*sj5);
IkReal x1441=(r20*sj5);
IkReal x1442=((1.0)*sj4);
IkReal x1443=(r00*sj5);
IkReal x1444=((1.0)*cj4);
IkReal x1445=(sj1*x1434);
IkReal x1446=(cj1*x1435);
IkReal x1447=(cj1*x1434);
IkReal x1448=(sj1*x1435);
IkReal x1449=(x1446+x1445);
evalcond[0]=((((-1.0)*r01*sj4*x1437))+x1449+(((-1.0)*r02*x1444))+(((-1.0)*x1442*x1443)));
evalcond[1]=((((-1.0)*r22*x1444))+(((-1.0)*x1448))+(((-1.0)*x1441*x1442))+(((-1.0)*r21*sj4*x1437))+x1447);
evalcond[2]=((((0.12)*x1447))+(((-1.0)*pz))+(((-0.001205)*x1441))+(((-0.12)*x1448))+(((0.097)*cj1))+(((-1.0)*r21*x1439)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r01*x1439))+(((0.12)*x1445))+(((0.12)*x1446))+(((-1.0)*px))+(((-0.001205)*x1443)));
evalcond[4]=((((-1.0)*r20*sj3*x1437))+(((-1.0)*x1438*x1441))+((r21*x1440))+(((-1.0)*r21*x1437*x1438))+x1449+((r22*x1436)));
evalcond[5]=(((r02*x1436))+(((-1.0)*x1438*x1443))+(((-1.0)*r00*sj3*x1437))+(((-1.0)*x1447))+(((-1.0)*r01*x1437*x1438))+x1448+((r01*x1440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1450=((1.0)*sj1);
IkReal x1451=(sj4*sj5);
IkReal x1452=(cj4*r22);
IkReal x1453=(cj5*sj4);
IkReal x1454=(cj4*r02);
IkReal x1455=((1.0)*cj1);
if( IKabs(((((-1.0)*r20*x1450*x1451))+(((-1.0)*r00*x1451*x1455))+(((-1.0)*x1454*x1455))+(((-1.0)*r21*x1450*x1453))+(((-1.0)*r01*x1453*x1455))+(((-1.0)*x1450*x1452)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1452))+((cj1*r20*x1451))+((cj1*r21*x1453))+(((-1.0)*r01*x1450*x1453))+(((-1.0)*r00*x1450*x1451))+(((-1.0)*x1450*x1454)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x1450*x1451))+(((-1.0)*r00*x1451*x1455))+(((-1.0)*x1454*x1455))+(((-1.0)*r21*x1450*x1453))+(((-1.0)*r01*x1453*x1455))+(((-1.0)*x1450*x1452))))+IKsqr((((cj1*x1452))+((cj1*r20*x1451))+((cj1*r21*x1453))+(((-1.0)*r01*x1450*x1453))+(((-1.0)*r00*x1450*x1451))+(((-1.0)*x1450*x1454))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x1450*x1451))+(((-1.0)*r00*x1451*x1455))+(((-1.0)*x1454*x1455))+(((-1.0)*r21*x1450*x1453))+(((-1.0)*r01*x1453*x1455))+(((-1.0)*x1450*x1452))), (((cj1*x1452))+((cj1*r20*x1451))+((cj1*r21*x1453))+(((-1.0)*r01*x1450*x1453))+(((-1.0)*r00*x1450*x1451))+(((-1.0)*x1450*x1454))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1456=IKcos(j2);
IkReal x1457=IKsin(j2);
IkReal x1458=(cj3*sj4);
IkReal x1459=((1.0)*cj5);
IkReal x1460=(cj3*cj4);
IkReal x1461=((0.001205)*cj5);
IkReal x1462=(sj3*sj5);
IkReal x1463=(r20*sj5);
IkReal x1464=((1.0)*sj4);
IkReal x1465=(r00*sj5);
IkReal x1466=((1.0)*cj4);
IkReal x1467=(cj1*x1456);
IkReal x1468=(cj1*x1457);
IkReal x1469=(sj1*x1457);
IkReal x1470=(sj1*x1456);
IkReal x1471=((1.0)*x1469);
evalcond[0]=((((-1.0)*r22*x1466))+(((-1.0)*x1463*x1464))+x1467+(((-1.0)*x1471))+(((-1.0)*r21*sj4*x1459)));
evalcond[1]=((((-0.001205)*x1463))+(((0.12)*x1467))+(((-1.0)*pz))+(((-1.0)*r21*x1461))+(((0.097)*cj1))+(((-0.12)*x1469)));
evalcond[2]=((((-1.0)*r02*x1466))+(((-1.0)*x1470))+(((-1.0)*x1464*x1465))+(((-1.0)*r01*sj4*x1459))+(((-1.0)*x1468)));
evalcond[3]=((-0.0022)+(((-0.001205)*x1465))+(((-0.097)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x1461))+(((-0.12)*x1470))+(((-0.12)*x1468)));
evalcond[4]=((((-1.0)*x1460*x1463))+x1468+x1470+((r22*x1458))+((r21*x1462))+(((-1.0)*r21*x1459*x1460))+(((-1.0)*r20*sj3*x1459)));
evalcond[5]=((((-1.0)*r00*sj3*x1459))+(((-1.0)*r01*x1459*x1460))+((r01*x1462))+(((-1.0)*x1460*x1465))+x1467+(((-1.0)*x1471))+((r02*x1458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1472=((1.0)*sj1);
IkReal x1473=(sj4*sj5);
IkReal x1474=(cj4*r22);
IkReal x1475=(cj4*r12);
IkReal x1476=((1.0)*cj1);
IkReal x1477=(cj5*r21*sj4);
IkReal x1478=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x1476*x1478))+(((-1.0)*r20*x1472*x1473))+(((-1.0)*x1475*x1476))+(((-1.0)*x1472*x1474))+(((-1.0)*x1472*x1477))+(((-1.0)*r10*x1473*x1476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1473))+((cj1*x1474))+((cj1*x1477))+(((-1.0)*r10*x1472*x1473))+(((-1.0)*x1472*x1478))+(((-1.0)*x1472*x1475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1476*x1478))+(((-1.0)*r20*x1472*x1473))+(((-1.0)*x1475*x1476))+(((-1.0)*x1472*x1474))+(((-1.0)*x1472*x1477))+(((-1.0)*r10*x1473*x1476))))+IKsqr((((cj1*r20*x1473))+((cj1*x1474))+((cj1*x1477))+(((-1.0)*r10*x1472*x1473))+(((-1.0)*x1472*x1478))+(((-1.0)*x1472*x1475))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1476*x1478))+(((-1.0)*r20*x1472*x1473))+(((-1.0)*x1475*x1476))+(((-1.0)*x1472*x1474))+(((-1.0)*x1472*x1477))+(((-1.0)*r10*x1473*x1476))), (((cj1*r20*x1473))+((cj1*x1474))+((cj1*x1477))+(((-1.0)*r10*x1472*x1473))+(((-1.0)*x1472*x1478))+(((-1.0)*x1472*x1475))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1479=IKcos(j2);
IkReal x1480=IKsin(j2);
IkReal x1481=(sj3*sj5);
IkReal x1482=((0.001205)*cj5);
IkReal x1483=(r20*sj5);
IkReal x1484=((1.0)*sj4);
IkReal x1485=(r10*sj5);
IkReal x1486=((1.0)*sj1);
IkReal x1487=(cj5*r21);
IkReal x1488=((1.0)*cj4);
IkReal x1489=((0.12)*sj1);
IkReal x1490=(cj3*sj4);
IkReal x1491=(cj5*r11);
IkReal x1492=(cj1*x1479);
IkReal x1493=((1.0)*cj5*sj3);
IkReal x1494=(cj1*x1480);
IkReal x1495=(cj3*x1488);
IkReal x1496=(x1480*x1486);
evalcond[0]=((((-1.0)*x1496))+(((-1.0)*x1484*x1487))+(((-1.0)*x1483*x1484))+(((-1.0)*r22*x1488))+x1492);
evalcond[1]=((((-1.0)*r21*x1482))+(((-1.0)*x1480*x1489))+(((-1.0)*pz))+(((0.12)*x1492))+(((0.097)*cj1))+(((-0.001205)*x1483)));
evalcond[2]=((((-1.0)*x1479*x1486))+(((-1.0)*r12*x1488))+(((-1.0)*x1484*x1485))+(((-1.0)*x1484*x1491))+(((-1.0)*x1494)));
evalcond[3]=((-0.0022)+(((-1.0)*x1479*x1489))+(((-1.0)*r11*x1482))+(((-0.097)*sj1))+(((-0.12)*x1494))+(((-1.0)*py))+(((-0.001205)*x1485)));
evalcond[4]=((((-1.0)*x1487*x1495))+(((-1.0)*r20*x1493))+((sj1*x1479))+((r21*x1481))+x1494+(((-1.0)*x1483*x1495))+((r22*x1490)));
evalcond[5]=((((-1.0)*x1496))+(((-1.0)*x1485*x1495))+((r12*x1490))+((r11*x1481))+(((-1.0)*x1491*x1495))+x1492+(((-1.0)*r10*x1493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1497=((1.0)*sj1);
IkReal x1498=(sj4*sj5);
IkReal x1499=(cj4*r12);
IkReal x1500=(cj4*r22);
IkReal x1501=(cj5*sj4);
IkReal x1502=(cj1*x1501);
if( IKabs((((r11*x1502))+((cj1*x1499))+(((-1.0)*r21*x1497*x1501))+((cj1*r10*x1498))+(((-1.0)*x1497*x1500))+(((-1.0)*r20*x1497*x1498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x1499))+((cj1*r20*x1498))+((cj1*x1500))+((r11*sj1*x1501))+((r21*x1502))+((r10*sj1*x1498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r11*x1502))+((cj1*x1499))+(((-1.0)*r21*x1497*x1501))+((cj1*r10*x1498))+(((-1.0)*x1497*x1500))+(((-1.0)*r20*x1497*x1498))))+IKsqr((((sj1*x1499))+((cj1*r20*x1498))+((cj1*x1500))+((r11*sj1*x1501))+((r21*x1502))+((r10*sj1*x1498))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r11*x1502))+((cj1*x1499))+(((-1.0)*r21*x1497*x1501))+((cj1*r10*x1498))+(((-1.0)*x1497*x1500))+(((-1.0)*r20*x1497*x1498))), (((sj1*x1499))+((cj1*r20*x1498))+((cj1*x1500))+((r11*sj1*x1501))+((r21*x1502))+((r10*sj1*x1498))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1503=IKcos(j2);
IkReal x1504=IKsin(j2);
IkReal x1505=(sj3*sj5);
IkReal x1506=((0.001205)*cj5);
IkReal x1507=(r20*sj5);
IkReal x1508=((1.0)*sj4);
IkReal x1509=(r10*sj5);
IkReal x1510=(cj5*r21);
IkReal x1511=((1.0)*cj4);
IkReal x1512=(cj3*sj4);
IkReal x1513=(cj5*r11);
IkReal x1514=(sj1*x1503);
IkReal x1515=(cj1*x1504);
IkReal x1516=(cj1*x1503);
IkReal x1517=((1.0)*cj5*sj3);
IkReal x1518=(cj3*x1511);
IkReal x1519=(sj1*x1504);
IkReal x1520=(x1515+x1514);
evalcond[0]=(x1520+(((-1.0)*x1508*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1511)));
evalcond[1]=((((-1.0)*r22*x1511))+(((-1.0)*x1519))+(((-1.0)*x1507*x1508))+x1516+(((-1.0)*x1508*x1510)));
evalcond[2]=((((-1.0)*pz))+(((0.12)*x1516))+(((-0.12)*x1519))+(((0.097)*cj1))+(((-0.001205)*x1507))+(((-1.0)*r21*x1506)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*py))+(((0.12)*x1514))+(((0.12)*x1515))+(((-0.001205)*x1509))+(((-1.0)*r11*x1506)));
evalcond[4]=((((-1.0)*r20*x1517))+(((-1.0)*x1507*x1518))+(((-1.0)*x1510*x1518))+x1520+((r22*x1512))+((r21*x1505)));
evalcond[5]=(((r11*x1505))+(((-1.0)*x1516))+((r12*x1512))+(((-1.0)*x1513*x1518))+x1519+(((-1.0)*x1509*x1518))+(((-1.0)*r10*x1517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1521=((1.0)*sj1);
IkReal x1522=(sj4*sj5);
IkReal x1523=(cj0*r20);
IkReal x1524=(cj4*r12);
IkReal x1525=(cj0*cj1);
IkReal x1526=(cj4*r22);
IkReal x1527=((1.0)*cj1);
IkReal x1528=(cj5*sj4);
CheckValue<IkReal> x1529=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1529.valid){
continue;
}
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x1521*x1526))+(((-1.0)*x1524*x1527))+(((-1.0)*r10*x1522*x1527))+(((-1.0)*cj0*r21*x1521*x1528))+(((-1.0)*x1521*x1522*x1523))+(((-1.0)*r11*x1527*x1528)))),IkReal((((x1525*x1526))+(((-1.0)*r11*x1521*x1528))+((r21*x1525*x1528))+((cj1*x1522*x1523))+(((-1.0)*r10*x1521*x1522))+(((-1.0)*x1521*x1524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1529.value)))+(x1530.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1531=IKcos(j2);
IkReal x1532=IKsin(j2);
IkReal x1533=(cj3*sj4);
IkReal x1534=((1.0)*r20);
IkReal x1535=(cj5*sj3);
IkReal x1536=(cj3*cj4);
IkReal x1537=((1.0)*r10);
IkReal x1538=(sj3*sj5);
IkReal x1539=((1.0)*cj5);
IkReal x1540=((0.001205)*cj5);
IkReal x1541=((1.0)*r00);
IkReal x1542=((1.0)*cj0);
IkReal x1543=((0.001205)*sj5);
IkReal x1544=(sj4*sj5);
IkReal x1545=((0.097)*sj1);
IkReal x1546=((1.0)*cj4);
IkReal x1547=(cj1*x1531);
IkReal x1548=(sj0*x1532);
IkReal x1549=(cj1*x1532);
IkReal x1550=(sj1*x1532);
IkReal x1551=(sj1*x1531);
IkReal x1552=((0.12)*x1551);
evalcond[0]=((((-1.0)*x1550))+(((-1.0)*r21*sj4*x1539))+(((-1.0)*r22*x1546))+x1547+(((-1.0)*x1534*x1544)));
evalcond[1]=((((-0.12)*x1550))+(((-1.0)*pz))+(((-1.0)*r21*x1540))+(((-1.0)*r20*x1543))+(((0.097)*cj1))+(((0.12)*x1547)));
evalcond[2]=((((-1.0)*r02*x1546))+((cj1*x1548))+(((-1.0)*r01*sj4*x1539))+((sj0*x1551))+(((-1.0)*x1541*x1544)));
evalcond[3]=((((-1.0)*r11*sj4*x1539))+(((-1.0)*x1537*x1544))+(((-1.0)*x1542*x1551))+(((-1.0)*x1542*x1549))+(((-1.0)*r12*x1546)));
evalcond[4]=((((0.0022)*sj0))+((sj0*x1545))+(((-1.0)*px))+(((-1.0)*r01*x1540))+(((-1.0)*r00*x1543))+((sj0*x1552))+(((0.12)*cj1*x1548)));
evalcond[5]=((((-1.0)*cj0*x1552))+(((-1.0)*py))+(((-0.12)*cj0*x1549))+(((-1.0)*r10*x1543))+(((-1.0)*r11*x1540))+(((-0.0022)*cj0))+(((-1.0)*cj0*x1545)));
evalcond[6]=(((r21*x1538))+x1549+x1551+(((-1.0)*sj5*x1534*x1536))+(((-1.0)*x1534*x1535))+((r22*x1533))+(((-1.0)*r21*x1536*x1539)));
evalcond[7]=((((-1.0)*x1535*x1541))+((r01*x1538))+(((-1.0)*r01*x1536*x1539))+((sj1*x1548))+((r02*x1533))+(((-1.0)*sj0*x1547))+(((-1.0)*sj5*x1536*x1541)));
evalcond[8]=(((r12*x1533))+(((-1.0)*sj5*x1536*x1537))+(((-1.0)*r11*x1536*x1539))+((r11*x1538))+((cj0*x1547))+(((-1.0)*x1535*x1537))+(((-1.0)*x1542*x1550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1553=((1.0)*sj0);
IkReal x1554=(cj1*sj4);
IkReal x1555=(r20*sj5);
IkReal x1556=(cj4*sj1);
IkReal x1557=(r00*sj5);
IkReal x1558=(sj1*sj4);
IkReal x1559=(cj1*cj4);
IkReal x1560=(cj5*x1558);
CheckValue<IkReal> x1561 = IKatan2WithCheck(IkReal(((((-1.0)*r21*x1553*x1560))+(((-1.0)*r22*x1553*x1556))+(((-1.0)*x1553*x1555*x1558))+((x1554*x1557))+((r02*x1559))+((cj5*r01*x1554)))),IkReal((((x1557*x1558))+((sj0*x1554*x1555))+((r02*x1556))+((r22*sj0*x1559))+((cj5*r21*sj0*x1554))+((r01*x1560)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1561.valid){
continue;
}
CheckValue<IkReal> x1562=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1562.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1561.value)+(((1.5707963267949)*(x1562.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1563=IKcos(j2);
IkReal x1564=IKsin(j2);
IkReal x1565=(cj3*sj4);
IkReal x1566=((1.0)*r20);
IkReal x1567=(cj5*sj3);
IkReal x1568=(cj3*cj4);
IkReal x1569=((1.0)*r10);
IkReal x1570=(sj3*sj5);
IkReal x1571=((1.0)*cj5);
IkReal x1572=((0.001205)*cj5);
IkReal x1573=((1.0)*r00);
IkReal x1574=((1.0)*cj0);
IkReal x1575=((0.001205)*sj5);
IkReal x1576=(sj4*sj5);
IkReal x1577=((0.097)*sj1);
IkReal x1578=((1.0)*cj4);
IkReal x1579=(cj1*x1563);
IkReal x1580=(sj0*x1564);
IkReal x1581=(cj1*x1564);
IkReal x1582=(sj1*x1564);
IkReal x1583=(sj1*x1563);
IkReal x1584=((0.12)*x1583);
evalcond[0]=((((-1.0)*x1566*x1576))+(((-1.0)*r22*x1578))+x1579+(((-1.0)*r21*sj4*x1571))+(((-1.0)*x1582)));
evalcond[1]=((((-0.12)*x1582))+(((-1.0)*pz))+(((-1.0)*r21*x1572))+(((-1.0)*r20*x1575))+(((0.097)*cj1))+(((0.12)*x1579)));
evalcond[2]=((((-1.0)*r02*x1578))+((cj1*x1580))+(((-1.0)*x1573*x1576))+(((-1.0)*r01*sj4*x1571))+((sj0*x1583)));
evalcond[3]=((((-1.0)*r11*sj4*x1571))+(((-1.0)*x1569*x1576))+(((-1.0)*x1574*x1581))+(((-1.0)*x1574*x1583))+(((-1.0)*r12*x1578)));
evalcond[4]=((((0.0022)*sj0))+((sj0*x1577))+(((-1.0)*px))+(((-1.0)*r01*x1572))+((sj0*x1584))+(((-1.0)*r00*x1575))+(((0.12)*cj1*x1580)));
evalcond[5]=((((-1.0)*cj0*x1584))+(((-0.12)*cj0*x1581))+(((-1.0)*py))+(((-1.0)*r10*x1575))+(((-1.0)*r11*x1572))+(((-0.0022)*cj0))+(((-1.0)*cj0*x1577)));
evalcond[6]=((((-1.0)*r21*x1568*x1571))+(((-1.0)*x1566*x1567))+x1583+x1581+((r21*x1570))+(((-1.0)*sj5*x1566*x1568))+((r22*x1565)));
evalcond[7]=((((-1.0)*x1567*x1573))+(((-1.0)*sj5*x1568*x1573))+((sj1*x1580))+((r02*x1565))+((r01*x1570))+(((-1.0)*r01*x1568*x1571))+(((-1.0)*sj0*x1579)));
evalcond[8]=((((-1.0)*sj5*x1568*x1569))+(((-1.0)*x1567*x1569))+((r12*x1565))+((cj0*x1579))+((r11*x1570))+(((-1.0)*r11*x1568*x1571))+(((-1.0)*x1574*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1585=((1.0)*sj4);
IkReal x1586=(r21*sj0);
IkReal x1587=((1.0)*cj4);
IkReal x1588=((1.0)*r20*sj0);
CheckValue<IkReal> x1589 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x1588))+((sj5*x1586)))),IkReal((((r22*sj0*sj4))+(((-1.0)*r20*sj0*sj5*x1587))+(((-1.0)*cj5*x1586*x1587)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1589.valid){
continue;
}
CheckValue<IkReal> x1590=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r01*x1585))+(((-1.0)*r02*x1587))+(((-1.0)*r00*sj5*x1585)))),-1);
if(!x1590.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(x1589.value)+(((1.5707963267949)*(x1590.value))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1591=IKsin(j3);
IkReal x1592=IKcos(j3);
IkReal x1593=(sj5*x1592);
IkReal x1594=(cj4*cj5*x1591);
IkReal x1595=(cj4*sj5*x1591);
IkReal x1596=((1.0)*cj5*x1592);
IkReal x1597=((1.0)*sj4*x1591);
evalcond[0]=(((r20*x1595))+(((-1.0)*r22*x1597))+(((-1.0)*r20*x1596))+((r21*x1593))+((r21*x1594)));
evalcond[1]=(((r00*x1595))+((r01*x1593))+((r01*x1594))+cj0+(((-1.0)*r02*x1597))+(((-1.0)*r00*x1596)));
evalcond[2]=(sj0+((r11*x1593))+((r11*x1594))+((r10*x1595))+(((-1.0)*r10*x1596))+(((-1.0)*r12*x1597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1598=((1.23711340206186)*sj4);
IkReal x1599=(cj5*r21);
IkReal x1600=((1.23711340206186)*cj4);
IkReal x1601=(r00*sj5);
IkReal x1602=(r20*sj5);
IkReal x1603=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((0.0124226804123711)*x1601))+(((0.0124226804123711)*x1603))+(((10.3092783505155)*px))+(((-1.0)*r02*x1600))+(((-1.0)*x1598*x1603))+(((-1.0)*x1598*x1601)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0124226804123711)*x1599))+(((0.0124226804123711)*x1602))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1599))+(((-1.0)*x1598*x1602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((0.0124226804123711)*x1601))+(((0.0124226804123711)*x1603))+(((10.3092783505155)*px))+(((-1.0)*r02*x1600))+(((-1.0)*x1598*x1603))+(((-1.0)*x1598*x1601))))+IKsqr(((((0.0124226804123711)*x1599))+(((0.0124226804123711)*x1602))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1599))+(((-1.0)*x1598*x1602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((0.0124226804123711)*x1601))+(((0.0124226804123711)*x1603))+(((10.3092783505155)*px))+(((-1.0)*r02*x1600))+(((-1.0)*x1598*x1603))+(((-1.0)*x1598*x1601))), ((((0.0124226804123711)*x1599))+(((0.0124226804123711)*x1602))+(((10.3092783505155)*pz))+(((-1.0)*r22*x1600))+(((-1.0)*x1598*x1599))+(((-1.0)*x1598*x1602))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1604=((1.0)*pz);
IkReal x1605=((0.12)*sj3);
IkReal x1606=((0.12)*cj4);
IkReal x1607=((0.001205)*cj5);
IkReal x1608=(r20*sj5);
IkReal x1609=((0.12)*sj4);
IkReal x1610=(r00*sj5);
IkReal x1611=(cj5*r01);
IkReal x1612=(cj5*r21);
IkReal x1613=((0.097)*(IKcos(j1)));
IkReal x1614=((0.001205)*x1608);
IkReal x1615=(r21*x1607);
IkReal x1616=((0.097)*(IKsin(j1)));
IkReal x1617=(r01*x1607);
IkReal x1618=((0.001205)*x1610);
IkReal x1619=(x1618+x1617);
IkReal x1620=(x1614+x1615+x1604);
evalcond[0]=((-0.0022)+x1619+(((-1.0)*x1616))+px+(((-1.0)*r02*x1606))+(((-1.0)*x1609*x1611))+(((-1.0)*x1609*x1610)));
evalcond[1]=(x1613+(((-1.0)*x1620))+((x1609*x1612))+((x1608*x1609))+((r22*x1606)));
evalcond[2]=(((r01*sj5*x1605))+x1613+((cj3*r02*x1609))+(((-1.0)*x1620))+(((-1.0)*cj5*r00*x1605))+(((-1.0)*cj3*x1606*x1611))+(((-1.0)*cj3*x1606*x1610)));
evalcond[3]=((0.0022)+(((-1.0)*r21*sj5*x1605))+x1616+((cj3*x1606*x1608))+(((-1.0)*x1619))+(((-1.0)*px))+((cj3*x1606*x1612))+((cj5*r20*x1605))+(((-1.0)*cj3*r22*x1609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1621=(sj1*sj4);
IkReal x1622=(cj5*r01);
IkReal x1623=(r20*sj5);
IkReal x1624=(cj4*sj1);
IkReal x1625=(r00*sj5);
IkReal x1626=(cj1*sj4);
IkReal x1627=(cj5*r21);
IkReal x1628=(cj1*cj4);
if( IKabs((((r02*x1628))+((x1622*x1626))+(((-1.0)*r22*x1624))+(((-1.0)*x1621*x1627))+(((-1.0)*x1621*x1623))+((x1625*x1626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x1624))+((x1626*x1627))+((x1623*x1626))+((r22*x1628))+((x1621*x1625))+((x1621*x1622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x1628))+((x1622*x1626))+(((-1.0)*r22*x1624))+(((-1.0)*x1621*x1627))+(((-1.0)*x1621*x1623))+((x1625*x1626))))+IKsqr((((r02*x1624))+((x1626*x1627))+((x1623*x1626))+((r22*x1628))+((x1621*x1625))+((x1621*x1622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x1628))+((x1622*x1626))+(((-1.0)*r22*x1624))+(((-1.0)*x1621*x1627))+(((-1.0)*x1621*x1623))+((x1625*x1626))), (((r02*x1624))+((x1626*x1627))+((x1623*x1626))+((r22*x1628))+((x1621*x1625))+((x1621*x1622))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1629=IKcos(j2);
IkReal x1630=IKsin(j2);
IkReal x1631=(cj3*sj4);
IkReal x1632=((1.0)*cj5);
IkReal x1633=(cj3*cj4);
IkReal x1634=((0.001205)*cj5);
IkReal x1635=(sj3*sj5);
IkReal x1636=(r20*sj5);
IkReal x1637=((1.0)*sj4);
IkReal x1638=(r00*sj5);
IkReal x1639=((1.0)*cj4);
IkReal x1640=(sj1*x1629);
IkReal x1641=(cj1*x1630);
IkReal x1642=(cj1*x1629);
IkReal x1643=(sj1*x1630);
IkReal x1644=(x1641+x1640);
evalcond[0]=((((-1.0)*r01*sj4*x1632))+x1644+(((-1.0)*x1637*x1638))+(((-1.0)*r02*x1639)));
evalcond[1]=((((-1.0)*r22*x1639))+x1642+(((-1.0)*r21*sj4*x1632))+(((-1.0)*x1643))+(((-1.0)*x1636*x1637)));
evalcond[2]=((((0.12)*x1642))+(((-0.12)*x1643))+(((-1.0)*pz))+(((-1.0)*r21*x1634))+(((0.097)*cj1))+(((-0.001205)*x1636)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r01*x1634))+(((0.12)*x1640))+(((0.12)*x1641))+(((-1.0)*px))+(((-0.001205)*x1638)));
evalcond[4]=(((r21*x1635))+(((-1.0)*r21*x1632*x1633))+x1644+(((-1.0)*x1633*x1636))+(((-1.0)*r20*sj3*x1632))+((r22*x1631)));
evalcond[5]=(((r02*x1631))+(((-1.0)*r01*x1632*x1633))+x1643+(((-1.0)*x1633*x1638))+(((-1.0)*x1642))+((r01*x1635))+(((-1.0)*r00*sj3*x1632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1645=((1.23711340206186)*sj4);
IkReal x1646=(cj5*r21);
IkReal x1647=((1.23711340206186)*cj4);
IkReal x1648=(r00*sj5);
IkReal x1649=(r20*sj5);
IkReal x1650=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-0.0124226804123711)*x1650))+(((-10.3092783505155)*px))+((r02*x1647))+((x1645*x1648))+((x1645*x1650))+(((-0.0124226804123711)*x1648)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x1647))+(((10.3092783505155)*pz))+(((-1.0)*x1645*x1646))+(((-1.0)*x1645*x1649))+(((0.0124226804123711)*x1646))+(((0.0124226804123711)*x1649)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-0.0124226804123711)*x1650))+(((-10.3092783505155)*px))+((r02*x1647))+((x1645*x1648))+((x1645*x1650))+(((-0.0124226804123711)*x1648))))+IKsqr(((((-1.0)*r22*x1647))+(((10.3092783505155)*pz))+(((-1.0)*x1645*x1646))+(((-1.0)*x1645*x1649))+(((0.0124226804123711)*x1646))+(((0.0124226804123711)*x1649))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-0.0124226804123711)*x1650))+(((-10.3092783505155)*px))+((r02*x1647))+((x1645*x1648))+((x1645*x1650))+(((-0.0124226804123711)*x1648))), ((((-1.0)*r22*x1647))+(((10.3092783505155)*pz))+(((-1.0)*x1645*x1646))+(((-1.0)*x1645*x1649))+(((0.0124226804123711)*x1646))+(((0.0124226804123711)*x1649))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1651=((1.0)*px);
IkReal x1652=((0.12)*sj3);
IkReal x1653=((0.12)*cj4);
IkReal x1654=((0.001205)*cj5);
IkReal x1655=(r20*sj5);
IkReal x1656=((0.12)*sj4);
IkReal x1657=(r00*sj5);
IkReal x1658=(cj5*r01);
IkReal x1659=(cj5*r21);
IkReal x1660=((0.001205)*x1655);
IkReal x1661=(r21*x1654);
IkReal x1662=((0.097)*(IKcos(j1)));
IkReal x1663=(r01*x1654);
IkReal x1664=((0.097)*(IKsin(j1)));
IkReal x1665=((0.001205)*x1657);
IkReal x1666=(x1661+x1660);
IkReal x1667=(x1665+x1664+x1663+x1651);
evalcond[0]=(((x1656*x1659))+((r22*x1653))+x1662+((x1655*x1656))+(((-1.0)*pz))+(((-1.0)*x1666)));
evalcond[1]=((-0.0022)+((x1656*x1658))+((x1656*x1657))+((r02*x1653))+(((-1.0)*x1667)));
evalcond[2]=((((-1.0)*cj3*x1653*x1657))+(((-1.0)*cj3*x1653*x1658))+x1666+(((-1.0)*cj5*r00*x1652))+pz+(((-1.0)*x1662))+((r01*sj5*x1652))+((cj3*r02*x1656)));
evalcond[3]=((-0.0022)+(((-1.0)*cj5*r20*x1652))+(((-1.0)*cj3*x1653*x1655))+(((-1.0)*cj3*x1653*x1659))+((cj3*r22*x1656))+(((-1.0)*x1667))+((r21*sj5*x1652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1668=((1.0)*sj1);
IkReal x1669=(sj4*sj5);
IkReal x1670=(cj4*r22);
IkReal x1671=(cj5*sj4);
IkReal x1672=(cj4*r02);
IkReal x1673=((1.0)*cj1);
if( IKabs(((((-1.0)*x1672*x1673))+(((-1.0)*r20*x1668*x1669))+(((-1.0)*x1668*x1670))+(((-1.0)*r00*x1669*x1673))+(((-1.0)*r21*x1668*x1671))+(((-1.0)*r01*x1671*x1673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x1668*x1669))+(((-1.0)*x1668*x1672))+((cj1*r20*x1669))+((cj1*x1670))+((cj1*r21*x1671))+(((-1.0)*r01*x1668*x1671)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1672*x1673))+(((-1.0)*r20*x1668*x1669))+(((-1.0)*x1668*x1670))+(((-1.0)*r00*x1669*x1673))+(((-1.0)*r21*x1668*x1671))+(((-1.0)*r01*x1671*x1673))))+IKsqr(((((-1.0)*r00*x1668*x1669))+(((-1.0)*x1668*x1672))+((cj1*r20*x1669))+((cj1*x1670))+((cj1*r21*x1671))+(((-1.0)*r01*x1668*x1671))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1672*x1673))+(((-1.0)*r20*x1668*x1669))+(((-1.0)*x1668*x1670))+(((-1.0)*r00*x1669*x1673))+(((-1.0)*r21*x1668*x1671))+(((-1.0)*r01*x1671*x1673))), ((((-1.0)*r00*x1668*x1669))+(((-1.0)*x1668*x1672))+((cj1*r20*x1669))+((cj1*x1670))+((cj1*r21*x1671))+(((-1.0)*r01*x1668*x1671))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1674=IKcos(j2);
IkReal x1675=IKsin(j2);
IkReal x1676=(cj3*sj4);
IkReal x1677=((1.0)*cj5);
IkReal x1678=(cj3*cj4);
IkReal x1679=((0.001205)*cj5);
IkReal x1680=(sj3*sj5);
IkReal x1681=(r20*sj5);
IkReal x1682=((1.0)*sj4);
IkReal x1683=(r00*sj5);
IkReal x1684=((1.0)*cj4);
IkReal x1685=(cj1*x1674);
IkReal x1686=(cj1*x1675);
IkReal x1687=(sj1*x1675);
IkReal x1688=(sj1*x1674);
IkReal x1689=((1.0)*x1687);
evalcond[0]=((((-1.0)*x1689))+(((-1.0)*x1681*x1682))+x1685+(((-1.0)*r22*x1684))+(((-1.0)*r21*sj4*x1677)));
evalcond[1]=((((0.12)*x1685))+(((-0.12)*x1687))+(((-1.0)*pz))+(((-0.001205)*x1681))+(((0.097)*cj1))+(((-1.0)*r21*x1679)));
evalcond[2]=((((-1.0)*x1682*x1683))+(((-1.0)*x1686))+(((-1.0)*x1688))+(((-1.0)*r02*x1684))+(((-1.0)*r01*sj4*x1677)));
evalcond[3]=((-0.0022)+(((-0.12)*x1686))+(((-0.12)*x1688))+(((-0.097)*sj1))+(((-1.0)*px))+(((-0.001205)*x1683))+(((-1.0)*r01*x1679)));
evalcond[4]=(x1686+x1688+((r21*x1680))+(((-1.0)*x1678*x1681))+(((-1.0)*r20*sj3*x1677))+(((-1.0)*r21*x1677*x1678))+((r22*x1676)));
evalcond[5]=(((r02*x1676))+(((-1.0)*x1689))+((r01*x1680))+x1685+(((-1.0)*r00*sj3*x1677))+(((-1.0)*r01*x1677*x1678))+(((-1.0)*x1678*x1683)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1690=(cj5*r11);
IkReal x1691=((1.23711340206186)*sj4);
IkReal x1692=(r10*sj5);
IkReal x1693=(r20*sj5);
IkReal x1694=(cj5*r21);
IkReal x1695=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+((r12*x1695))+((x1690*x1691))+(((-10.3092783505155)*py))+((x1691*x1692))+(((-0.0124226804123711)*x1690))+(((-0.0124226804123711)*x1692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*x1691*x1693))+(((-1.0)*x1691*x1694))+(((-1.0)*r22*x1695))+(((0.0124226804123711)*x1693))+(((0.0124226804123711)*x1694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+((r12*x1695))+((x1690*x1691))+(((-10.3092783505155)*py))+((x1691*x1692))+(((-0.0124226804123711)*x1690))+(((-0.0124226804123711)*x1692))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*x1691*x1693))+(((-1.0)*x1691*x1694))+(((-1.0)*r22*x1695))+(((0.0124226804123711)*x1693))+(((0.0124226804123711)*x1694))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+((r12*x1695))+((x1690*x1691))+(((-10.3092783505155)*py))+((x1691*x1692))+(((-0.0124226804123711)*x1690))+(((-0.0124226804123711)*x1692))), ((((10.3092783505155)*pz))+(((-1.0)*x1691*x1693))+(((-1.0)*x1691*x1694))+(((-1.0)*r22*x1695))+(((0.0124226804123711)*x1693))+(((0.0124226804123711)*x1694))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1696=((1.0)*py);
IkReal x1697=((0.12)*r10);
IkReal x1698=(sj4*sj5);
IkReal x1699=(cj5*sj3);
IkReal x1700=((0.12)*r11);
IkReal x1701=(sj3*sj5);
IkReal x1702=((0.001205)*cj5);
IkReal x1703=(cj3*cj4);
IkReal x1704=((0.001205)*sj5);
IkReal x1705=((0.12)*r21);
IkReal x1706=((0.12)*cj4);
IkReal x1707=((0.12)*r20);
IkReal x1708=(cj5*sj4);
IkReal x1709=(r20*x1704);
IkReal x1710=(r21*x1702);
IkReal x1711=((0.097)*(IKcos(j1)));
IkReal x1712=(r11*x1702);
IkReal x1713=(r10*x1704);
IkReal x1714=((0.097)*(IKsin(j1)));
IkReal x1715=((0.12)*cj3*sj4);
IkReal x1716=(x1709+x1710);
IkReal x1717=(x1713+x1712+x1714+x1696);
evalcond[0]=(((r22*x1706))+x1711+(((-1.0)*x1716))+((x1705*x1708))+(((-1.0)*pz))+((x1698*x1707)));
evalcond[1]=((-0.0022)+((r12*x1706))+(((-1.0)*x1717))+((x1700*x1708))+((x1697*x1698)));
evalcond[2]=(x1716+((r12*x1715))+(((-1.0)*cj5*x1700*x1703))+(((-1.0)*x1711))+(((-1.0)*x1697*x1699))+((x1700*x1701))+pz+(((-1.0)*sj5*x1697*x1703)));
evalcond[3]=((-0.0022)+((r22*x1715))+(((-1.0)*cj5*x1703*x1705))+(((-1.0)*x1699*x1707))+(((-1.0)*x1717))+(((-1.0)*sj5*x1703*x1707))+((x1701*x1705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1718=((1.0)*sj1);
IkReal x1719=(sj4*sj5);
IkReal x1720=(cj4*r22);
IkReal x1721=(cj4*r12);
IkReal x1722=((1.0)*cj1);
IkReal x1723=(cj5*r21*sj4);
IkReal x1724=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x1719*x1722))+(((-1.0)*r20*x1718*x1719))+(((-1.0)*x1722*x1724))+(((-1.0)*x1718*x1723))+(((-1.0)*x1718*x1720))+(((-1.0)*x1721*x1722)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r10*x1718*x1719))+((cj1*r20*x1719))+((cj1*x1723))+((cj1*x1720))+(((-1.0)*x1718*x1721))+(((-1.0)*x1718*x1724)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1719*x1722))+(((-1.0)*r20*x1718*x1719))+(((-1.0)*x1722*x1724))+(((-1.0)*x1718*x1723))+(((-1.0)*x1718*x1720))+(((-1.0)*x1721*x1722))))+IKsqr(((((-1.0)*r10*x1718*x1719))+((cj1*r20*x1719))+((cj1*x1723))+((cj1*x1720))+(((-1.0)*x1718*x1721))+(((-1.0)*x1718*x1724))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1719*x1722))+(((-1.0)*r20*x1718*x1719))+(((-1.0)*x1722*x1724))+(((-1.0)*x1718*x1723))+(((-1.0)*x1718*x1720))+(((-1.0)*x1721*x1722))), ((((-1.0)*r10*x1718*x1719))+((cj1*r20*x1719))+((cj1*x1723))+((cj1*x1720))+(((-1.0)*x1718*x1721))+(((-1.0)*x1718*x1724))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1725=IKcos(j2);
IkReal x1726=IKsin(j2);
IkReal x1727=(sj3*sj5);
IkReal x1728=((0.001205)*cj5);
IkReal x1729=(r20*sj5);
IkReal x1730=((1.0)*sj4);
IkReal x1731=(r10*sj5);
IkReal x1732=((1.0)*sj1);
IkReal x1733=(cj5*r21);
IkReal x1734=((1.0)*cj4);
IkReal x1735=((0.12)*sj1);
IkReal x1736=(cj3*sj4);
IkReal x1737=(cj5*r11);
IkReal x1738=(cj1*x1725);
IkReal x1739=((1.0)*cj5*sj3);
IkReal x1740=(cj1*x1726);
IkReal x1741=(cj3*x1734);
IkReal x1742=(x1726*x1732);
evalcond[0]=(x1738+(((-1.0)*x1729*x1730))+(((-1.0)*x1730*x1733))+(((-1.0)*x1742))+(((-1.0)*r22*x1734)));
evalcond[1]=((((-0.001205)*x1729))+(((-1.0)*x1726*x1735))+(((-1.0)*pz))+(((0.097)*cj1))+(((-1.0)*r21*x1728))+(((0.12)*x1738)));
evalcond[2]=((((-1.0)*r12*x1734))+(((-1.0)*x1730*x1731))+(((-1.0)*x1730*x1737))+(((-1.0)*x1740))+(((-1.0)*x1725*x1732)));
evalcond[3]=((-0.0022)+(((-1.0)*r11*x1728))+(((-0.097)*sj1))+(((-1.0)*py))+(((-0.12)*x1740))+(((-1.0)*x1725*x1735))+(((-0.001205)*x1731)));
evalcond[4]=((((-1.0)*x1729*x1741))+(((-1.0)*x1733*x1741))+x1740+((r21*x1727))+((sj1*x1725))+((r22*x1736))+(((-1.0)*r20*x1739)));
evalcond[5]=((((-1.0)*r10*x1739))+x1738+(((-1.0)*x1737*x1741))+(((-1.0)*x1742))+(((-1.0)*x1731*x1741))+((r11*x1727))+((r12*x1736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1743=((0.0124226804123711)*cj5);
IkReal x1744=((0.0124226804123711)*sj5);
IkReal x1745=((1.23711340206186)*sj4);
IkReal x1746=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-1.0)*r12*x1746))+(((-1.0)*r10*sj5*x1745))+(((10.3092783505155)*py))+(((-1.0)*cj5*r11*x1745))+((r11*x1743))+((r10*x1744)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x1745))+(((-1.0)*r22*x1746))+((r21*x1743))+((r20*x1744))+(((-1.0)*r20*sj5*x1745)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*r12*x1746))+(((-1.0)*r10*sj5*x1745))+(((10.3092783505155)*py))+(((-1.0)*cj5*r11*x1745))+((r11*x1743))+((r10*x1744))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x1745))+(((-1.0)*r22*x1746))+((r21*x1743))+((r20*x1744))+(((-1.0)*r20*sj5*x1745))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*r12*x1746))+(((-1.0)*r10*sj5*x1745))+(((10.3092783505155)*py))+(((-1.0)*cj5*r11*x1745))+((r11*x1743))+((r10*x1744))), ((((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x1745))+(((-1.0)*r22*x1746))+((r21*x1743))+((r20*x1744))+(((-1.0)*r20*sj5*x1745))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x1747=((1.0)*pz);
IkReal x1748=((0.12)*r10);
IkReal x1749=(sj4*sj5);
IkReal x1750=(cj5*sj3);
IkReal x1751=((0.12)*r11);
IkReal x1752=(sj3*sj5);
IkReal x1753=((0.001205)*cj5);
IkReal x1754=(cj3*cj4);
IkReal x1755=((0.001205)*sj5);
IkReal x1756=((0.12)*r21);
IkReal x1757=((0.12)*cj4);
IkReal x1758=((0.12)*r20);
IkReal x1759=(cj5*sj4);
IkReal x1760=((0.097)*(IKcos(j1)));
IkReal x1761=(r20*x1755);
IkReal x1762=(r21*x1753);
IkReal x1763=((0.097)*(IKsin(j1)));
IkReal x1764=(r11*x1753);
IkReal x1765=(r10*x1755);
IkReal x1766=((0.12)*cj3*sj4);
IkReal x1767=(x1764+x1765);
IkReal x1768=(x1762+x1761+x1747);
evalcond[0]=((-0.0022)+(((-1.0)*r12*x1757))+(((-1.0)*x1748*x1749))+(((-1.0)*x1763))+x1767+(((-1.0)*x1751*x1759))+py);
evalcond[1]=(((x1749*x1758))+(((-1.0)*x1768))+x1760+((r22*x1757))+((x1756*x1759)));
evalcond[2]=((((-1.0)*x1748*x1750))+(((-1.0)*x1768))+x1760+(((-1.0)*sj5*x1748*x1754))+(((-1.0)*cj5*x1751*x1754))+((r12*x1766))+((x1751*x1752)));
evalcond[3]=((0.0022)+(((-1.0)*x1767))+x1763+((x1750*x1758))+((sj5*x1754*x1758))+(((-1.0)*py))+((cj5*x1754*x1756))+(((-1.0)*x1752*x1756))+(((-1.0)*r22*x1766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1769=((1.0)*sj1);
IkReal x1770=(sj4*sj5);
IkReal x1771=(cj4*r12);
IkReal x1772=(cj4*r22);
IkReal x1773=(cj5*sj4);
IkReal x1774=(cj1*x1773);
if( IKabs((((cj1*r10*x1770))+((r11*x1774))+(((-1.0)*r21*x1769*x1773))+(((-1.0)*r20*x1769*x1770))+(((-1.0)*x1769*x1772))+((cj1*x1771)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x1770))+((r10*sj1*x1770))+((r21*x1774))+((sj1*x1771))+((r11*sj1*x1773))+((cj1*x1772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x1770))+((r11*x1774))+(((-1.0)*r21*x1769*x1773))+(((-1.0)*r20*x1769*x1770))+(((-1.0)*x1769*x1772))+((cj1*x1771))))+IKsqr((((cj1*r20*x1770))+((r10*sj1*x1770))+((r21*x1774))+((sj1*x1771))+((r11*sj1*x1773))+((cj1*x1772))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x1770))+((r11*x1774))+(((-1.0)*r21*x1769*x1773))+(((-1.0)*r20*x1769*x1770))+(((-1.0)*x1769*x1772))+((cj1*x1771))), (((cj1*r20*x1770))+((r10*sj1*x1770))+((r21*x1774))+((sj1*x1771))+((r11*sj1*x1773))+((cj1*x1772))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1775=IKcos(j2);
IkReal x1776=IKsin(j2);
IkReal x1777=(sj3*sj5);
IkReal x1778=((0.001205)*cj5);
IkReal x1779=(r20*sj5);
IkReal x1780=((1.0)*sj4);
IkReal x1781=(r10*sj5);
IkReal x1782=(cj5*r21);
IkReal x1783=((1.0)*cj4);
IkReal x1784=(cj3*sj4);
IkReal x1785=(cj5*r11);
IkReal x1786=(sj1*x1775);
IkReal x1787=(cj1*x1776);
IkReal x1788=(cj1*x1775);
IkReal x1789=((1.0)*cj5*sj3);
IkReal x1790=(cj3*x1783);
IkReal x1791=(sj1*x1776);
IkReal x1792=(x1786+x1787);
evalcond[0]=(x1792+(((-1.0)*r12*x1783))+(((-1.0)*x1780*x1785))+(((-1.0)*x1780*x1781)));
evalcond[1]=(x1788+(((-1.0)*r22*x1783))+(((-1.0)*x1791))+(((-1.0)*x1779*x1780))+(((-1.0)*x1780*x1782)));
evalcond[2]=((((0.12)*x1788))+(((-1.0)*r21*x1778))+(((-1.0)*pz))+(((-0.001205)*x1779))+(((-0.12)*x1791))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.12)*x1787))+(((0.12)*x1786))+(((0.097)*sj1))+(((-0.001205)*x1781))+(((-1.0)*py))+(((-1.0)*r11*x1778)));
evalcond[4]=(x1792+((r22*x1784))+((r21*x1777))+(((-1.0)*r20*x1789))+(((-1.0)*x1782*x1790))+(((-1.0)*x1779*x1790)));
evalcond[5]=((((-1.0)*r10*x1789))+x1791+((r11*x1777))+(((-1.0)*x1785*x1790))+(((-1.0)*x1788))+((r12*x1784))+(((-1.0)*x1781*x1790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1793=(cj5*r21);
IkReal x1794=((1.23711340206186)*sj4);
IkReal x1795=(r20*sj5);
IkReal x1796=((0.001205)*cj0);
IkReal x1797=(r10*sj5);
IkReal x1798=(cj5*r11);
IkReal x1799=((0.12)*cj0);
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(cj0,-2);
if(!x1800.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x1800.value)*(((((-0.0022)*(cj0*cj0)))+(((-1.0)*x1796*x1797))+(((-1.0)*x1796*x1798))+((cj4*r12*x1799))+((sj4*x1797*x1799))+(((-1.0)*cj0*py))+((sj4*x1798*x1799)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((10.3092783505155)*pz))+(((-1.0)*x1793*x1794))+(((0.0124226804123711)*x1793))+(((0.0124226804123711)*x1795))+(((-1.23711340206186)*cj4*r22))+(((-1.0)*x1794*x1795)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x1800.value)*(((((-0.0022)*(cj0*cj0)))+(((-1.0)*x1796*x1797))+(((-1.0)*x1796*x1798))+((cj4*r12*x1799))+((sj4*x1797*x1799))+(((-1.0)*cj0*py))+((sj4*x1798*x1799))))))+IKsqr(((((10.3092783505155)*pz))+(((-1.0)*x1793*x1794))+(((0.0124226804123711)*x1793))+(((0.0124226804123711)*x1795))+(((-1.23711340206186)*cj4*r22))+(((-1.0)*x1794*x1795))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x1800.value)*(((((-0.0022)*(cj0*cj0)))+(((-1.0)*x1796*x1797))+(((-1.0)*x1796*x1798))+((cj4*r12*x1799))+((sj4*x1797*x1799))+(((-1.0)*cj0*py))+((sj4*x1798*x1799))))), ((((10.3092783505155)*pz))+(((-1.0)*x1793*x1794))+(((0.0124226804123711)*x1793))+(((0.0124226804123711)*x1795))+(((-1.23711340206186)*cj4*r22))+(((-1.0)*x1794*x1795))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x1801=cj0*cj0;
IkReal x1802=sj0*sj0;
IkReal x1803=IKsin(j1);
IkReal x1804=IKcos(j1);
IkReal x1805=(r00*sj4);
IkReal x1806=(cj3*cj4);
IkReal x1807=((1.0)*py);
IkReal x1808=(cj0*sj0);
IkReal x1809=((0.12)*sj3);
IkReal x1810=(sj0*sj5);
IkReal x1811=((0.001205)*cj5);
IkReal x1812=((1.0)*px);
IkReal x1813=((0.12)*sj0);
IkReal x1814=(cj3*sj4);
IkReal x1815=((0.001205)*sj5);
IkReal x1816=((1.0)*pz);
IkReal x1817=(cj4*r12);
IkReal x1818=((0.12)*sj5);
IkReal x1819=((0.12)*r22);
IkReal x1820=(cj0*sj4);
IkReal x1821=(cj0*r21);
IkReal x1822=(cj5*r01);
IkReal x1823=((0.12)*cj5);
IkReal x1824=(r10*sj4);
IkReal x1825=(cj5*r20);
IkReal x1826=((0.0022)*x1808);
IkReal x1827=(sj0*x1811);
IkReal x1828=(cj0*x1818);
IkReal x1829=((0.097)*x1803);
IkReal x1830=((0.12)*cj4*r02);
IkReal x1831=(cj0*x1815);
IkReal x1832=(r11*x1823);
IkReal x1833=((0.097)*x1804);
IkReal x1834=(x1808*x1829);
IkReal x1835=(x1826+x1834);
evalcond[0]=((((-1.0)*x1816))+((r20*sj4*x1818))+x1833+((r21*sj4*x1823))+((cj4*x1819))+(((-1.0)*r21*x1811))+(((-1.0)*r20*x1815)));
evalcond[1]=((((-1.0)*x1801*x1829))+(((-1.0)*r10*x1831))+(((-1.0)*cj0*x1807))+((x1820*x1832))+(((-1.0)*cj0*r11*x1811))+(((-0.0022)*x1801))+(((0.12)*cj0*x1817))+((r10*x1818*x1820)));
evalcond[2]=((((-1.0)*x1802*x1829))+(((-1.0)*cj4*r02*x1813))+(((0.001205)*r00*x1810))+((r01*x1827))+((px*sj0))+(((-1.0)*sj4*x1813*x1822))+(((-0.0022)*x1802))+(((-0.12)*x1805*x1810)));
evalcond[3]=((((-1.0)*cj5*r10*x1809))+(((-1.0)*r10*x1806*x1818))+((r11*sj5*x1809))+(((-1.0)*cj0*x1833))+(((-1.0)*x1806*x1832))+((x1811*x1821))+((r20*x1831))+(((0.12)*r12*x1814))+((cj0*pz)));
evalcond[4]=((((-1.0)*cj5*r00*x1809))+((sj0*x1833))+(((-0.12)*x1806*x1822))+(((-1.0)*r00*x1806*x1818))+(((0.12)*r02*x1814))+((r01*sj5*x1809))+(((-1.0)*sj0*x1816))+(((-0.001205)*r20*x1810))+(((-1.0)*r21*x1827)));
evalcond[5]=((((-1.0)*r20*x1806*x1828))+(((-1.0)*x1806*x1821*x1823))+(((-1.0)*cj0*x1809*x1825))+(((-1.0)*r11*x1811))+(((-1.0)*r10*x1815))+(((-1.0)*x1807))+(((-1.0)*cj0*x1829))+((cj0*x1814*x1819))+((sj5*x1809*x1821))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*x1812))+(((-1.0)*r21*x1809*x1810))+(((0.12)*r20*x1806*x1810))+(((0.0022)*sj0))+((cj5*r21*x1806*x1813))+(((-1.0)*r01*x1811))+(((-1.0)*r00*x1815))+((sj0*x1829))+(((-1.0)*r22*x1813*x1814))+((sj0*x1809*x1825)));
evalcond[7]=(((x1805*x1828))+(((0.001205)*r10*x1810))+((cj0*x1830))+x1835+(((0.12)*x1820*x1822))+((r11*x1827))+((py*sj0)));
evalcond[8]=((((-1.0)*cj0*x1812))+(((-1.0)*r00*x1831))+(((-1.0)*x1813*x1817))+(((-1.0)*cj5*r11*sj4*x1813))+x1835+(((-0.12)*x1810*x1824))+(((-1.0)*cj0*r01*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1836=(sj1*sj4);
IkReal x1837=(cj5*r01);
IkReal x1838=(r20*sj5);
IkReal x1839=(cj4*sj1);
IkReal x1840=(r00*sj5);
IkReal x1841=(cj1*sj4);
IkReal x1842=(cj5*r21);
IkReal x1843=(cj1*cj4);
if( IKabs(((((-1.0)*x1836*x1842))+(((-1.0)*r22*x1839))+((x1837*x1841))+((r02*x1843))+((x1840*x1841))+(((-1.0)*x1836*x1838)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x1838*x1841))+((r22*x1843))+((x1836*x1840))+((r02*x1839))+((x1841*x1842))+((x1836*x1837)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1836*x1842))+(((-1.0)*r22*x1839))+((x1837*x1841))+((r02*x1843))+((x1840*x1841))+(((-1.0)*x1836*x1838))))+IKsqr((((x1838*x1841))+((r22*x1843))+((x1836*x1840))+((r02*x1839))+((x1841*x1842))+((x1836*x1837))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1836*x1842))+(((-1.0)*r22*x1839))+((x1837*x1841))+((r02*x1843))+((x1840*x1841))+(((-1.0)*x1836*x1838))), (((x1838*x1841))+((r22*x1843))+((x1836*x1840))+((r02*x1839))+((x1841*x1842))+((x1836*x1837))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1844=IKcos(j2);
IkReal x1845=IKsin(j2);
IkReal x1846=(cj3*sj4);
IkReal x1847=((1.0)*cj5);
IkReal x1848=(cj3*cj4);
IkReal x1849=((0.001205)*cj5);
IkReal x1850=(sj3*sj5);
IkReal x1851=(r20*sj5);
IkReal x1852=((1.0)*sj4);
IkReal x1853=(r00*sj5);
IkReal x1854=((1.0)*cj4);
IkReal x1855=(sj1*x1844);
IkReal x1856=(cj1*x1845);
IkReal x1857=(cj1*x1844);
IkReal x1858=(sj1*x1845);
IkReal x1859=(x1855+x1856);
evalcond[0]=((((-1.0)*x1852*x1853))+(((-1.0)*r02*x1854))+(((-1.0)*r01*sj4*x1847))+x1859);
evalcond[1]=((((-1.0)*x1858))+(((-1.0)*r22*x1854))+(((-1.0)*x1851*x1852))+x1857+(((-1.0)*r21*sj4*x1847)));
evalcond[2]=((((-0.001205)*x1851))+(((0.12)*x1857))+(((-1.0)*pz))+(((0.097)*cj1))+(((-1.0)*r21*x1849))+(((-0.12)*x1858)));
evalcond[3]=((0.0022)+(((-0.001205)*x1853))+(((0.097)*sj1))+(((0.12)*x1856))+(((0.12)*x1855))+(((-1.0)*r01*x1849))+(((-1.0)*px)));
evalcond[4]=((((-1.0)*x1848*x1851))+(((-1.0)*r20*sj3*x1847))+((r22*x1846))+(((-1.0)*r21*x1847*x1848))+x1859+((r21*x1850)));
evalcond[5]=((((-1.0)*x1848*x1853))+((r01*x1850))+((r02*x1846))+(((-1.0)*x1857))+(((-1.0)*r00*sj3*x1847))+(((-1.0)*r01*x1847*x1848))+x1858);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1860=((1.0)*sj1);
IkReal x1861=(sj4*sj5);
IkReal x1862=(cj4*r22);
IkReal x1863=(cj5*sj4);
IkReal x1864=(cj4*r02);
IkReal x1865=((1.0)*cj1);
if( IKabs(((((-1.0)*x1864*x1865))+(((-1.0)*x1860*x1862))+(((-1.0)*r20*x1860*x1861))+(((-1.0)*r00*x1861*x1865))+(((-1.0)*r01*x1863*x1865))+(((-1.0)*r21*x1860*x1863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1862))+((cj1*r20*x1861))+(((-1.0)*x1860*x1864))+(((-1.0)*r00*x1860*x1861))+(((-1.0)*r01*x1860*x1863))+((cj1*r21*x1863)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x1864*x1865))+(((-1.0)*x1860*x1862))+(((-1.0)*r20*x1860*x1861))+(((-1.0)*r00*x1861*x1865))+(((-1.0)*r01*x1863*x1865))+(((-1.0)*r21*x1860*x1863))))+IKsqr((((cj1*x1862))+((cj1*r20*x1861))+(((-1.0)*x1860*x1864))+(((-1.0)*r00*x1860*x1861))+(((-1.0)*r01*x1860*x1863))+((cj1*r21*x1863))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x1864*x1865))+(((-1.0)*x1860*x1862))+(((-1.0)*r20*x1860*x1861))+(((-1.0)*r00*x1861*x1865))+(((-1.0)*r01*x1863*x1865))+(((-1.0)*r21*x1860*x1863))), (((cj1*x1862))+((cj1*r20*x1861))+(((-1.0)*x1860*x1864))+(((-1.0)*r00*x1860*x1861))+(((-1.0)*r01*x1860*x1863))+((cj1*r21*x1863))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1866=IKcos(j2);
IkReal x1867=IKsin(j2);
IkReal x1868=(cj3*sj4);
IkReal x1869=((1.0)*cj5);
IkReal x1870=(cj3*cj4);
IkReal x1871=((0.001205)*cj5);
IkReal x1872=(sj3*sj5);
IkReal x1873=(r20*sj5);
IkReal x1874=((1.0)*sj4);
IkReal x1875=(r00*sj5);
IkReal x1876=((1.0)*cj4);
IkReal x1877=(cj1*x1866);
IkReal x1878=(cj1*x1867);
IkReal x1879=(sj1*x1867);
IkReal x1880=(sj1*x1866);
IkReal x1881=((1.0)*x1879);
evalcond[0]=((((-1.0)*r21*sj4*x1869))+(((-1.0)*x1873*x1874))+(((-1.0)*r22*x1876))+x1877+(((-1.0)*x1881)));
evalcond[1]=((((-0.001205)*x1873))+(((-1.0)*pz))+(((-0.12)*x1879))+(((-1.0)*r21*x1871))+(((0.097)*cj1))+(((0.12)*x1877)));
evalcond[2]=((((-1.0)*x1874*x1875))+(((-1.0)*r01*sj4*x1869))+(((-1.0)*r02*x1876))+(((-1.0)*x1880))+(((-1.0)*x1878)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*r01*x1871))+(((-0.001205)*x1875))+(((-1.0)*px))+(((-0.12)*x1878))+(((-0.12)*x1880)));
evalcond[4]=((((-1.0)*r21*x1869*x1870))+((r22*x1868))+(((-1.0)*r20*sj3*x1869))+(((-1.0)*x1870*x1873))+x1878+x1880+((r21*x1872)));
evalcond[5]=((((-1.0)*r00*sj3*x1869))+((r02*x1868))+((r01*x1872))+(((-1.0)*x1870*x1875))+x1877+(((-1.0)*r01*x1869*x1870))+(((-1.0)*x1881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1882=((1.0)*sj1);
IkReal x1883=(sj4*sj5);
IkReal x1884=(cj4*r22);
IkReal x1885=(cj4*r12);
IkReal x1886=((1.0)*cj1);
IkReal x1887=(cj5*r21*sj4);
IkReal x1888=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r10*x1883*x1886))+(((-1.0)*x1882*x1884))+(((-1.0)*x1882*x1887))+(((-1.0)*r20*x1882*x1883))+(((-1.0)*x1885*x1886))+(((-1.0)*x1886*x1888)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x1882*x1888))+(((-1.0)*x1882*x1885))+(((-1.0)*r10*x1882*x1883))+((cj1*x1887))+((cj1*x1884))+((cj1*r20*x1883)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x1883*x1886))+(((-1.0)*x1882*x1884))+(((-1.0)*x1882*x1887))+(((-1.0)*r20*x1882*x1883))+(((-1.0)*x1885*x1886))+(((-1.0)*x1886*x1888))))+IKsqr(((((-1.0)*x1882*x1888))+(((-1.0)*x1882*x1885))+(((-1.0)*r10*x1882*x1883))+((cj1*x1887))+((cj1*x1884))+((cj1*r20*x1883))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r10*x1883*x1886))+(((-1.0)*x1882*x1884))+(((-1.0)*x1882*x1887))+(((-1.0)*r20*x1882*x1883))+(((-1.0)*x1885*x1886))+(((-1.0)*x1886*x1888))), ((((-1.0)*x1882*x1888))+(((-1.0)*x1882*x1885))+(((-1.0)*r10*x1882*x1883))+((cj1*x1887))+((cj1*x1884))+((cj1*r20*x1883))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1889=IKcos(j2);
IkReal x1890=IKsin(j2);
IkReal x1891=(sj3*sj5);
IkReal x1892=((0.001205)*cj5);
IkReal x1893=(r20*sj5);
IkReal x1894=((1.0)*sj4);
IkReal x1895=(r10*sj5);
IkReal x1896=((1.0)*sj1);
IkReal x1897=(cj5*r21);
IkReal x1898=((1.0)*cj4);
IkReal x1899=((0.12)*sj1);
IkReal x1900=(cj3*sj4);
IkReal x1901=(cj5*r11);
IkReal x1902=(cj1*x1889);
IkReal x1903=((1.0)*cj5*sj3);
IkReal x1904=(cj1*x1890);
IkReal x1905=(cj3*x1898);
IkReal x1906=(x1890*x1896);
evalcond[0]=((((-1.0)*x1893*x1894))+(((-1.0)*r22*x1898))+x1902+(((-1.0)*x1894*x1897))+(((-1.0)*x1906)));
evalcond[1]=((((-0.001205)*x1893))+(((0.12)*x1902))+(((-1.0)*x1890*x1899))+(((-1.0)*pz))+(((-1.0)*r21*x1892))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*x1904))+(((-1.0)*x1894*x1901))+(((-1.0)*x1889*x1896))+(((-1.0)*r12*x1898))+(((-1.0)*x1894*x1895)));
evalcond[3]=((-0.0022)+(((-0.001205)*x1895))+(((-0.097)*sj1))+(((-1.0)*py))+(((-1.0)*r11*x1892))+(((-1.0)*x1889*x1899))+(((-0.12)*x1904)));
evalcond[4]=((((-1.0)*x1893*x1905))+x1904+((r22*x1900))+(((-1.0)*r20*x1903))+((sj1*x1889))+((r21*x1891))+(((-1.0)*x1897*x1905)));
evalcond[5]=(((r11*x1891))+(((-1.0)*x1901*x1905))+(((-1.0)*r10*x1903))+((r12*x1900))+x1902+(((-1.0)*x1906))+(((-1.0)*x1895*x1905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1907=((1.0)*sj1);
IkReal x1908=(sj4*sj5);
IkReal x1909=(cj4*r12);
IkReal x1910=(cj4*r22);
IkReal x1911=(cj5*sj4);
IkReal x1912=(cj1*x1911);
if( IKabs((((cj1*x1909))+(((-1.0)*r20*x1907*x1908))+(((-1.0)*x1907*x1910))+((r11*x1912))+((cj1*r10*x1908))+(((-1.0)*r21*x1907*x1911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x1910))+((cj1*r20*x1908))+((sj1*x1909))+((r21*x1912))+((r10*sj1*x1908))+((r11*sj1*x1911)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*x1909))+(((-1.0)*r20*x1907*x1908))+(((-1.0)*x1907*x1910))+((r11*x1912))+((cj1*r10*x1908))+(((-1.0)*r21*x1907*x1911))))+IKsqr((((cj1*x1910))+((cj1*r20*x1908))+((sj1*x1909))+((r21*x1912))+((r10*sj1*x1908))+((r11*sj1*x1911))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*x1909))+(((-1.0)*r20*x1907*x1908))+(((-1.0)*x1907*x1910))+((r11*x1912))+((cj1*r10*x1908))+(((-1.0)*r21*x1907*x1911))), (((cj1*x1910))+((cj1*r20*x1908))+((sj1*x1909))+((r21*x1912))+((r10*sj1*x1908))+((r11*sj1*x1911))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x1913=IKcos(j2);
IkReal x1914=IKsin(j2);
IkReal x1915=(sj3*sj5);
IkReal x1916=((0.001205)*cj5);
IkReal x1917=(r20*sj5);
IkReal x1918=((1.0)*sj4);
IkReal x1919=(r10*sj5);
IkReal x1920=(cj5*r21);
IkReal x1921=((1.0)*cj4);
IkReal x1922=(cj3*sj4);
IkReal x1923=(cj5*r11);
IkReal x1924=(sj1*x1913);
IkReal x1925=(cj1*x1914);
IkReal x1926=(cj1*x1913);
IkReal x1927=((1.0)*cj5*sj3);
IkReal x1928=(cj3*x1921);
IkReal x1929=(sj1*x1914);
IkReal x1930=(x1924+x1925);
evalcond[0]=((((-1.0)*r12*x1921))+(((-1.0)*x1918*x1923))+x1930+(((-1.0)*x1918*x1919)));
evalcond[1]=((((-1.0)*x1917*x1918))+(((-1.0)*x1918*x1920))+(((-1.0)*x1929))+(((-1.0)*r22*x1921))+x1926);
evalcond[2]=((((0.12)*x1926))+(((-0.12)*x1929))+(((-1.0)*pz))+(((-0.001205)*x1917))+(((-1.0)*r21*x1916))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x1924))+(((0.12)*x1925))+(((-1.0)*r11*x1916))+(((-1.0)*py))+(((-0.001205)*x1919)));
evalcond[4]=(((r22*x1922))+(((-1.0)*x1917*x1928))+(((-1.0)*r20*x1927))+x1930+((r21*x1915))+(((-1.0)*x1920*x1928)));
evalcond[5]=((((-1.0)*x1926))+((r11*x1915))+x1929+(((-1.0)*x1919*x1928))+((r12*x1922))+(((-1.0)*x1923*x1928))+(((-1.0)*r10*x1927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1931=((1.0)*sj1);
IkReal x1932=(sj4*sj5);
IkReal x1933=(cj0*r20);
IkReal x1934=(cj4*r12);
IkReal x1935=(cj0*cj1);
IkReal x1936=(cj4*r22);
IkReal x1937=((1.0)*cj1);
IkReal x1938=(cj5*sj4);
CheckValue<IkReal> x1939 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x1932*x1937))+(((-1.0)*cj0*x1931*x1936))+(((-1.0)*r11*x1937*x1938))+(((-1.0)*x1934*x1937))+(((-1.0)*cj0*r21*x1931*x1938))+(((-1.0)*x1931*x1932*x1933)))),IkReal((((r21*x1935*x1938))+(((-1.0)*r11*x1931*x1938))+(((-1.0)*x1931*x1934))+((x1935*x1936))+((cj1*x1932*x1933))+(((-1.0)*r10*x1931*x1932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1939.valid){
continue;
}
CheckValue<IkReal> x1940=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x1940.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1939.value)+(((1.5707963267949)*(x1940.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1941=IKcos(j2);
IkReal x1942=IKsin(j2);
IkReal x1943=(cj3*sj4);
IkReal x1944=((1.0)*r20);
IkReal x1945=(cj5*sj3);
IkReal x1946=(cj3*cj4);
IkReal x1947=((1.0)*r10);
IkReal x1948=(sj3*sj5);
IkReal x1949=((1.0)*cj5);
IkReal x1950=((0.001205)*cj5);
IkReal x1951=((1.0)*r00);
IkReal x1952=((1.0)*cj0);
IkReal x1953=((0.001205)*sj5);
IkReal x1954=(sj4*sj5);
IkReal x1955=((0.097)*sj1);
IkReal x1956=((1.0)*cj4);
IkReal x1957=(cj1*x1941);
IkReal x1958=(sj0*x1942);
IkReal x1959=(cj1*x1942);
IkReal x1960=(sj1*x1942);
IkReal x1961=(sj1*x1941);
IkReal x1962=((0.12)*x1961);
evalcond[0]=((((-1.0)*r22*x1956))+(((-1.0)*x1944*x1954))+(((-1.0)*x1960))+(((-1.0)*r21*sj4*x1949))+x1957);
evalcond[1]=((((-1.0)*pz))+(((0.12)*x1957))+(((0.097)*cj1))+(((-1.0)*r21*x1950))+(((-0.12)*x1960))+(((-1.0)*r20*x1953)));
evalcond[2]=((((-1.0)*r01*sj4*x1949))+(((-1.0)*r02*x1956))+((sj0*x1961))+(((-1.0)*x1951*x1954))+((cj1*x1958)));
evalcond[3]=((((-1.0)*x1952*x1961))+(((-1.0)*x1952*x1959))+(((-1.0)*r11*sj4*x1949))+(((-1.0)*x1947*x1954))+(((-1.0)*r12*x1956)));
evalcond[4]=((((0.0022)*sj0))+((sj0*x1962))+((sj0*x1955))+(((-1.0)*px))+(((-1.0)*r01*x1950))+(((-1.0)*r00*x1953))+(((0.12)*cj1*x1958)));
evalcond[5]=((((-1.0)*cj0*x1962))+(((-1.0)*cj0*x1955))+(((-0.12)*cj0*x1959))+(((-1.0)*py))+(((-1.0)*r11*x1950))+(((-1.0)*r10*x1953))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*sj5*x1944*x1946))+(((-1.0)*x1944*x1945))+((r22*x1943))+x1961+x1959+((r21*x1948))+(((-1.0)*r21*x1946*x1949)));
evalcond[7]=((((-1.0)*sj0*x1957))+(((-1.0)*x1945*x1951))+(((-1.0)*sj5*x1946*x1951))+((sj1*x1958))+((r01*x1948))+(((-1.0)*r01*x1946*x1949))+((r02*x1943)));
evalcond[8]=((((-1.0)*x1952*x1960))+(((-1.0)*r11*x1946*x1949))+((cj0*x1957))+((r11*x1948))+(((-1.0)*x1945*x1947))+((r12*x1943))+(((-1.0)*sj5*x1946*x1947)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x1963=((1.0)*sj0);
IkReal x1964=(cj1*sj4);
IkReal x1965=(r20*sj5);
IkReal x1966=(cj4*sj1);
IkReal x1967=(r00*sj5);
IkReal x1968=(sj1*sj4);
IkReal x1969=(cj1*cj4);
IkReal x1970=(cj5*x1968);
CheckValue<IkReal> x1971 = IKatan2WithCheck(IkReal((((r02*x1969))+((x1964*x1967))+(((-1.0)*x1963*x1965*x1968))+(((-1.0)*r21*x1963*x1970))+(((-1.0)*r22*x1963*x1966))+((cj5*r01*x1964)))),IkReal((((r02*x1966))+((sj0*x1964*x1965))+((r01*x1970))+((cj5*r21*sj0*x1964))+((r22*sj0*x1969))+((x1967*x1968)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1971.valid){
continue;
}
CheckValue<IkReal> x1972=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x1972.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x1971.value)+(((1.5707963267949)*(x1972.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x1973=IKcos(j2);
IkReal x1974=IKsin(j2);
IkReal x1975=(cj3*sj4);
IkReal x1976=((1.0)*r20);
IkReal x1977=(cj5*sj3);
IkReal x1978=(cj3*cj4);
IkReal x1979=((1.0)*r10);
IkReal x1980=(sj3*sj5);
IkReal x1981=((1.0)*cj5);
IkReal x1982=((0.001205)*cj5);
IkReal x1983=((1.0)*r00);
IkReal x1984=((1.0)*cj0);
IkReal x1985=((0.001205)*sj5);
IkReal x1986=(sj4*sj5);
IkReal x1987=((0.097)*sj1);
IkReal x1988=((1.0)*cj4);
IkReal x1989=(cj1*x1973);
IkReal x1990=(sj0*x1974);
IkReal x1991=(cj1*x1974);
IkReal x1992=(sj1*x1974);
IkReal x1993=(sj1*x1973);
IkReal x1994=((0.12)*x1993);
evalcond[0]=((((-1.0)*x1976*x1986))+x1989+(((-1.0)*r21*sj4*x1981))+(((-1.0)*x1992))+(((-1.0)*r22*x1988)));
evalcond[1]=((((-0.12)*x1992))+(((-1.0)*pz))+(((0.097)*cj1))+(((-1.0)*r21*x1982))+(((-1.0)*r20*x1985))+(((0.12)*x1989)));
evalcond[2]=(((sj0*x1993))+(((-1.0)*x1983*x1986))+(((-1.0)*r02*x1988))+(((-1.0)*r01*sj4*x1981))+((cj1*x1990)));
evalcond[3]=((((-1.0)*x1979*x1986))+(((-1.0)*r11*sj4*x1981))+(((-1.0)*r12*x1988))+(((-1.0)*x1984*x1991))+(((-1.0)*x1984*x1993)));
evalcond[4]=(((sj0*x1994))+(((0.0022)*sj0))+((sj0*x1987))+(((-1.0)*px))+(((-1.0)*r01*x1982))+(((0.12)*cj1*x1990))+(((-1.0)*r00*x1985)));
evalcond[5]=((((-1.0)*cj0*x1987))+(((-0.12)*cj0*x1991))+(((-1.0)*cj0*x1994))+(((-1.0)*r11*x1982))+(((-1.0)*r10*x1985))+(((-1.0)*py))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*r21*x1978*x1981))+(((-1.0)*x1976*x1977))+(((-1.0)*sj5*x1976*x1978))+((r21*x1980))+((r22*x1975))+x1991+x1993);
evalcond[7]=(((sj1*x1990))+((r02*x1975))+(((-1.0)*r01*x1978*x1981))+(((-1.0)*sj0*x1989))+(((-1.0)*sj5*x1978*x1983))+((r01*x1980))+(((-1.0)*x1977*x1983)));
evalcond[8]=((((-1.0)*sj5*x1978*x1979))+((r12*x1975))+((r11*x1980))+(((-1.0)*x1977*x1979))+(((-1.0)*r11*x1978*x1981))+(((-1.0)*x1984*x1992))+((cj0*x1989)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x1995=(cj5*sj4);
IkReal x1996=(r01*sj0);
IkReal x1997=(r20*sj5);
IkReal x1998=((0.12)*sj0);
IkReal x1999=(r00*sj5);
CheckValue<IkReal> x2000=IKPowWithIntegerCheck(sj0,-2);
if(!x2000.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x2000.value)*(((((-1.0)*cj4*r02*x1998))+(((-0.12)*x1995*x1996))+(((0.001205)*cj5*x1996))+(((-1.0)*sj4*x1998*x1999))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1999)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.23711340206186)*r21*x1995))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x1997))+(((-1.23711340206186)*sj4*x1997))+(((-1.23711340206186)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x2000.value)*(((((-1.0)*cj4*r02*x1998))+(((-0.12)*x1995*x1996))+(((0.001205)*cj5*x1996))+(((-1.0)*sj4*x1998*x1999))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1999))))))+IKsqr(((((-1.23711340206186)*r21*x1995))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x1997))+(((-1.23711340206186)*sj4*x1997))+(((-1.23711340206186)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x2000.value)*(((((-1.0)*cj4*r02*x1998))+(((-0.12)*x1995*x1996))+(((0.001205)*cj5*x1996))+(((-1.0)*sj4*x1998*x1999))+((px*sj0))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*sj0*x1999))))), ((((-1.23711340206186)*r21*x1995))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x1997))+(((-1.23711340206186)*sj4*x1997))+(((-1.23711340206186)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2001=cj0*cj0;
IkReal x2002=sj0*sj0;
IkReal x2003=IKsin(j1);
IkReal x2004=IKcos(j1);
IkReal x2005=(r00*sj4);
IkReal x2006=(cj3*cj4);
IkReal x2007=((1.0)*py);
IkReal x2008=(cj0*sj0);
IkReal x2009=((0.12)*sj3);
IkReal x2010=(sj0*sj5);
IkReal x2011=((0.001205)*cj5);
IkReal x2012=((1.0)*px);
IkReal x2013=((0.12)*sj0);
IkReal x2014=(cj3*sj4);
IkReal x2015=((0.001205)*sj5);
IkReal x2016=((1.0)*pz);
IkReal x2017=(cj4*r12);
IkReal x2018=((0.12)*sj5);
IkReal x2019=((0.12)*r22);
IkReal x2020=(cj0*sj4);
IkReal x2021=(cj0*r21);
IkReal x2022=(cj5*r01);
IkReal x2023=((0.12)*cj5);
IkReal x2024=(r10*sj4);
IkReal x2025=(cj5*r20);
IkReal x2026=((0.0022)*x2008);
IkReal x2027=(sj0*x2011);
IkReal x2028=(cj0*x2018);
IkReal x2029=((0.097)*x2003);
IkReal x2030=((0.12)*cj4*r02);
IkReal x2031=(cj0*x2015);
IkReal x2032=(r11*x2023);
IkReal x2033=((0.097)*x2004);
IkReal x2034=(x2008*x2029);
IkReal x2035=(x2026+x2034);
evalcond[0]=((((-1.0)*r20*x2015))+(((-1.0)*r21*x2011))+(((-1.0)*x2016))+x2033+((r20*sj4*x2018))+((r21*sj4*x2023))+((cj4*x2019)));
evalcond[1]=((((-1.0)*cj0*r11*x2011))+(((-1.0)*r10*x2031))+(((-1.0)*x2001*x2029))+((r10*x2018*x2020))+(((0.12)*cj0*x2017))+(((-1.0)*cj0*x2007))+((x2020*x2032))+(((-0.0022)*x2001)));
evalcond[2]=(((r01*x2027))+(((-1.0)*x2002*x2029))+(((-0.12)*x2005*x2010))+(((-1.0)*cj4*r02*x2013))+(((-1.0)*sj4*x2013*x2022))+((px*sj0))+(((-0.0022)*x2002))+(((0.001205)*r00*x2010)));
evalcond[3]=(((r11*sj5*x2009))+(((-1.0)*r10*x2006*x2018))+(((0.12)*r12*x2014))+((r20*x2031))+((x2011*x2021))+(((-1.0)*cj0*x2033))+((cj0*pz))+(((-1.0)*x2006*x2032))+(((-1.0)*cj5*r10*x2009)));
evalcond[4]=((((-0.001205)*r20*x2010))+(((-1.0)*r00*x2006*x2018))+(((-0.12)*x2006*x2022))+(((-1.0)*sj0*x2016))+(((0.12)*r02*x2014))+((sj0*x2033))+(((-1.0)*r21*x2027))+((r01*sj5*x2009))+(((-1.0)*cj5*r00*x2009)));
evalcond[5]=(((cj0*x2014*x2019))+((sj5*x2009*x2021))+(((-1.0)*cj0*x2029))+(((-1.0)*x2007))+(((-1.0)*x2006*x2021*x2023))+(((-1.0)*r11*x2011))+(((-0.0022)*cj0))+(((-1.0)*r10*x2015))+(((-1.0)*cj0*x2009*x2025))+(((-1.0)*r20*x2006*x2028)));
evalcond[6]=((((-1.0)*x2012))+(((-1.0)*r22*x2013*x2014))+(((-1.0)*r21*x2009*x2010))+(((0.0022)*sj0))+((sj0*x2029))+(((0.12)*r20*x2006*x2010))+((sj0*x2009*x2025))+((cj5*r21*x2006*x2013))+(((-1.0)*r00*x2015))+(((-1.0)*r01*x2011)));
evalcond[7]=(((r11*x2027))+x2035+(((0.001205)*r10*x2010))+((cj0*x2030))+((x2005*x2028))+((py*sj0))+(((0.12)*x2020*x2022)));
evalcond[8]=((((-0.12)*x2010*x2024))+(((-1.0)*x2013*x2017))+x2035+(((-1.0)*r00*x2031))+(((-1.0)*cj0*r01*x2011))+(((-1.0)*cj5*r11*sj4*x2013))+(((-1.0)*cj0*x2012)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2036=(sj1*sj4);
IkReal x2037=(cj5*r01);
IkReal x2038=(r20*sj5);
IkReal x2039=(cj4*sj1);
IkReal x2040=(r00*sj5);
IkReal x2041=(cj1*sj4);
IkReal x2042=(cj5*r21);
IkReal x2043=(cj1*cj4);
if( IKabs((((x2037*x2041))+(((-1.0)*x2036*x2042))+((x2040*x2041))+(((-1.0)*r22*x2039))+((r02*x2043))+(((-1.0)*x2036*x2038)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r22*x2043))+((x2041*x2042))+((r02*x2039))+((x2036*x2037))+((x2036*x2040))+((x2038*x2041)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2037*x2041))+(((-1.0)*x2036*x2042))+((x2040*x2041))+(((-1.0)*r22*x2039))+((r02*x2043))+(((-1.0)*x2036*x2038))))+IKsqr((((r22*x2043))+((x2041*x2042))+((r02*x2039))+((x2036*x2037))+((x2036*x2040))+((x2038*x2041))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2037*x2041))+(((-1.0)*x2036*x2042))+((x2040*x2041))+(((-1.0)*r22*x2039))+((r02*x2043))+(((-1.0)*x2036*x2038))), (((r22*x2043))+((x2041*x2042))+((r02*x2039))+((x2036*x2037))+((x2036*x2040))+((x2038*x2041))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2044=IKcos(j2);
IkReal x2045=IKsin(j2);
IkReal x2046=(cj3*sj4);
IkReal x2047=((1.0)*cj5);
IkReal x2048=(cj3*cj4);
IkReal x2049=((0.001205)*cj5);
IkReal x2050=(sj3*sj5);
IkReal x2051=(r20*sj5);
IkReal x2052=((1.0)*sj4);
IkReal x2053=(r00*sj5);
IkReal x2054=((1.0)*cj4);
IkReal x2055=(sj1*x2044);
IkReal x2056=(cj1*x2045);
IkReal x2057=(cj1*x2044);
IkReal x2058=(sj1*x2045);
IkReal x2059=(x2055+x2056);
evalcond[0]=(x2059+(((-1.0)*r02*x2054))+(((-1.0)*r01*sj4*x2047))+(((-1.0)*x2052*x2053)));
evalcond[1]=(x2057+(((-1.0)*r22*x2054))+(((-1.0)*x2058))+(((-1.0)*r21*sj4*x2047))+(((-1.0)*x2051*x2052)));
evalcond[2]=((((0.12)*x2057))+(((-0.12)*x2058))+(((-1.0)*pz))+(((-1.0)*r21*x2049))+(((0.097)*cj1))+(((-0.001205)*x2051)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x2056))+(((0.12)*x2055))+(((-1.0)*px))+(((-1.0)*r01*x2049))+(((-0.001205)*x2053)));
evalcond[4]=(((r22*x2046))+(((-1.0)*x2048*x2051))+x2059+(((-1.0)*r21*x2047*x2048))+(((-1.0)*r20*sj3*x2047))+((r21*x2050)));
evalcond[5]=(((r01*x2050))+(((-1.0)*x2048*x2053))+x2058+((r02*x2046))+(((-1.0)*x2057))+(((-1.0)*r01*x2047*x2048))+(((-1.0)*r00*sj3*x2047)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2060=((1.0)*sj1);
IkReal x2061=(sj4*sj5);
IkReal x2062=(cj4*r22);
IkReal x2063=(cj5*sj4);
IkReal x2064=(cj4*r02);
IkReal x2065=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x2063*x2065))+(((-1.0)*x2064*x2065))+(((-1.0)*r00*x2061*x2065))+(((-1.0)*r20*x2060*x2061))+(((-1.0)*r21*x2060*x2063))+(((-1.0)*x2060*x2062)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*r20*x2061))+((cj1*x2062))+(((-1.0)*r01*x2060*x2063))+(((-1.0)*r00*x2060*x2061))+((cj1*r21*x2063))+(((-1.0)*x2060*x2064)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2063*x2065))+(((-1.0)*x2064*x2065))+(((-1.0)*r00*x2061*x2065))+(((-1.0)*r20*x2060*x2061))+(((-1.0)*r21*x2060*x2063))+(((-1.0)*x2060*x2062))))+IKsqr((((cj1*r20*x2061))+((cj1*x2062))+(((-1.0)*r01*x2060*x2063))+(((-1.0)*r00*x2060*x2061))+((cj1*r21*x2063))+(((-1.0)*x2060*x2064))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2063*x2065))+(((-1.0)*x2064*x2065))+(((-1.0)*r00*x2061*x2065))+(((-1.0)*r20*x2060*x2061))+(((-1.0)*r21*x2060*x2063))+(((-1.0)*x2060*x2062))), (((cj1*r20*x2061))+((cj1*x2062))+(((-1.0)*r01*x2060*x2063))+(((-1.0)*r00*x2060*x2061))+((cj1*r21*x2063))+(((-1.0)*x2060*x2064))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2066=IKcos(j2);
IkReal x2067=IKsin(j2);
IkReal x2068=(cj3*sj4);
IkReal x2069=((1.0)*cj5);
IkReal x2070=(cj3*cj4);
IkReal x2071=((0.001205)*cj5);
IkReal x2072=(sj3*sj5);
IkReal x2073=(r20*sj5);
IkReal x2074=((1.0)*sj4);
IkReal x2075=(r00*sj5);
IkReal x2076=((1.0)*cj4);
IkReal x2077=(cj1*x2066);
IkReal x2078=(cj1*x2067);
IkReal x2079=(sj1*x2067);
IkReal x2080=(sj1*x2066);
IkReal x2081=((1.0)*x2079);
evalcond[0]=(x2077+(((-1.0)*r22*x2076))+(((-1.0)*x2081))+(((-1.0)*r21*sj4*x2069))+(((-1.0)*x2073*x2074)));
evalcond[1]=((((-0.12)*x2079))+(((-0.001205)*x2073))+(((-1.0)*r21*x2071))+(((-1.0)*pz))+(((0.12)*x2077))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*r02*x2076))+(((-1.0)*x2080))+(((-1.0)*r01*sj4*x2069))+(((-1.0)*x2078))+(((-1.0)*x2074*x2075)));
evalcond[3]=((-0.0022)+(((-0.12)*x2078))+(((-0.097)*sj1))+(((-0.001205)*x2075))+(((-1.0)*px))+(((-1.0)*r01*x2071))+(((-0.12)*x2080)));
evalcond[4]=(((r22*x2068))+(((-1.0)*x2070*x2073))+x2078+x2080+(((-1.0)*r21*x2069*x2070))+(((-1.0)*r20*sj3*x2069))+((r21*x2072)));
evalcond[5]=((((-1.0)*x2070*x2075))+(((-1.0)*r00*sj3*x2069))+x2077+(((-1.0)*x2081))+((r02*x2068))+((r01*x2072))+(((-1.0)*r01*x2069*x2070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2082=((1.0)*sj1);
IkReal x2083=(sj4*sj5);
IkReal x2084=(cj4*r22);
IkReal x2085=(cj4*r12);
IkReal x2086=((1.0)*cj1);
IkReal x2087=(cj5*r21*sj4);
IkReal x2088=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x2085*x2086))+(((-1.0)*x2086*x2088))+(((-1.0)*r20*x2082*x2083))+(((-1.0)*r10*x2083*x2086))+(((-1.0)*x2082*x2087))+(((-1.0)*x2082*x2084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2087))+((cj1*x2084))+(((-1.0)*r10*x2082*x2083))+(((-1.0)*x2082*x2085))+(((-1.0)*x2082*x2088))+((cj1*r20*x2083)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2085*x2086))+(((-1.0)*x2086*x2088))+(((-1.0)*r20*x2082*x2083))+(((-1.0)*r10*x2083*x2086))+(((-1.0)*x2082*x2087))+(((-1.0)*x2082*x2084))))+IKsqr((((cj1*x2087))+((cj1*x2084))+(((-1.0)*r10*x2082*x2083))+(((-1.0)*x2082*x2085))+(((-1.0)*x2082*x2088))+((cj1*r20*x2083))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2085*x2086))+(((-1.0)*x2086*x2088))+(((-1.0)*r20*x2082*x2083))+(((-1.0)*r10*x2083*x2086))+(((-1.0)*x2082*x2087))+(((-1.0)*x2082*x2084))), (((cj1*x2087))+((cj1*x2084))+(((-1.0)*r10*x2082*x2083))+(((-1.0)*x2082*x2085))+(((-1.0)*x2082*x2088))+((cj1*r20*x2083))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2089=IKcos(j2);
IkReal x2090=IKsin(j2);
IkReal x2091=(sj3*sj5);
IkReal x2092=((0.001205)*cj5);
IkReal x2093=(r20*sj5);
IkReal x2094=((1.0)*sj4);
IkReal x2095=(r10*sj5);
IkReal x2096=((1.0)*sj1);
IkReal x2097=(cj5*r21);
IkReal x2098=((1.0)*cj4);
IkReal x2099=((0.12)*sj1);
IkReal x2100=(cj3*sj4);
IkReal x2101=(cj5*r11);
IkReal x2102=(cj1*x2089);
IkReal x2103=((1.0)*cj5*sj3);
IkReal x2104=(cj1*x2090);
IkReal x2105=(cj3*x2098);
IkReal x2106=(x2090*x2096);
evalcond[0]=((((-1.0)*x2106))+(((-1.0)*x2094*x2097))+x2102+(((-1.0)*x2093*x2094))+(((-1.0)*r22*x2098)));
evalcond[1]=((((-1.0)*r21*x2092))+(((-1.0)*x2090*x2099))+(((-0.001205)*x2093))+(((-1.0)*pz))+(((0.097)*cj1))+(((0.12)*x2102)));
evalcond[2]=((((-1.0)*x2094*x2095))+(((-1.0)*x2089*x2096))+(((-1.0)*x2094*x2101))+(((-1.0)*x2104))+(((-1.0)*r12*x2098)));
evalcond[3]=((-0.0022)+(((-0.001205)*x2095))+(((-0.097)*sj1))+(((-1.0)*x2089*x2099))+(((-1.0)*py))+(((-1.0)*r11*x2092))+(((-0.12)*x2104)));
evalcond[4]=((((-1.0)*x2093*x2105))+(((-1.0)*x2097*x2105))+((sj1*x2089))+x2104+((r22*x2100))+(((-1.0)*r20*x2103))+((r21*x2091)));
evalcond[5]=((((-1.0)*r10*x2103))+((r12*x2100))+(((-1.0)*x2106))+(((-1.0)*x2101*x2105))+x2102+(((-1.0)*x2095*x2105))+((r11*x2091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2107=((1.0)*sj1);
IkReal x2108=(sj4*sj5);
IkReal x2109=(cj4*r12);
IkReal x2110=(cj4*r22);
IkReal x2111=(cj5*sj4);
IkReal x2112=(cj1*x2111);
if( IKabs((((cj1*r10*x2108))+(((-1.0)*x2107*x2110))+(((-1.0)*r21*x2107*x2111))+((cj1*x2109))+(((-1.0)*r20*x2107*x2108))+((r11*x2112)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r21*x2112))+((r11*sj1*x2111))+((cj1*r20*x2108))+((r10*sj1*x2108))+((sj1*x2109))+((cj1*x2110)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x2108))+(((-1.0)*x2107*x2110))+(((-1.0)*r21*x2107*x2111))+((cj1*x2109))+(((-1.0)*r20*x2107*x2108))+((r11*x2112))))+IKsqr((((r21*x2112))+((r11*sj1*x2111))+((cj1*r20*x2108))+((r10*sj1*x2108))+((sj1*x2109))+((cj1*x2110))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x2108))+(((-1.0)*x2107*x2110))+(((-1.0)*r21*x2107*x2111))+((cj1*x2109))+(((-1.0)*r20*x2107*x2108))+((r11*x2112))), (((r21*x2112))+((r11*sj1*x2111))+((cj1*r20*x2108))+((r10*sj1*x2108))+((sj1*x2109))+((cj1*x2110))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2113=IKcos(j2);
IkReal x2114=IKsin(j2);
IkReal x2115=(sj3*sj5);
IkReal x2116=((0.001205)*cj5);
IkReal x2117=(r20*sj5);
IkReal x2118=((1.0)*sj4);
IkReal x2119=(r10*sj5);
IkReal x2120=(cj5*r21);
IkReal x2121=((1.0)*cj4);
IkReal x2122=(cj3*sj4);
IkReal x2123=(cj5*r11);
IkReal x2124=(sj1*x2113);
IkReal x2125=(cj1*x2114);
IkReal x2126=(cj1*x2113);
IkReal x2127=((1.0)*cj5*sj3);
IkReal x2128=(cj3*x2121);
IkReal x2129=(sj1*x2114);
IkReal x2130=(x2125+x2124);
evalcond[0]=((((-1.0)*x2118*x2123))+x2130+(((-1.0)*x2118*x2119))+(((-1.0)*r12*x2121)));
evalcond[1]=((((-1.0)*x2117*x2118))+(((-1.0)*r22*x2121))+(((-1.0)*x2118*x2120))+x2126+(((-1.0)*x2129)));
evalcond[2]=((((-1.0)*r21*x2116))+(((-0.001205)*x2117))+(((-1.0)*pz))+(((0.097)*cj1))+(((-0.12)*x2129))+(((0.12)*x2126)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-0.001205)*x2119))+(((-1.0)*py))+(((-1.0)*r11*x2116))+(((0.12)*x2124))+(((0.12)*x2125)));
evalcond[4]=((((-1.0)*x2117*x2128))+((r21*x2115))+x2130+(((-1.0)*x2120*x2128))+(((-1.0)*r20*x2127))+((r22*x2122)));
evalcond[5]=((((-1.0)*r10*x2127))+((r12*x2122))+(((-1.0)*x2119*x2128))+x2129+(((-1.0)*x2126))+(((-1.0)*x2123*x2128))+((r11*x2115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2131=((1.0)*sj1);
IkReal x2132=(sj4*sj5);
IkReal x2133=(cj0*r20);
IkReal x2134=(cj4*r12);
IkReal x2135=(cj0*cj1);
IkReal x2136=(cj4*r22);
IkReal x2137=((1.0)*cj1);
IkReal x2138=(cj5*sj4);
CheckValue<IkReal> x2139=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140 = IKatan2WithCheck(IkReal(((((-1.0)*x2131*x2132*x2133))+(((-1.0)*cj0*r21*x2131*x2138))+(((-1.0)*x2134*x2137))+(((-1.0)*r11*x2137*x2138))+(((-1.0)*cj0*x2131*x2136))+(((-1.0)*r10*x2132*x2137)))),IkReal(((((-1.0)*r11*x2131*x2138))+(((-1.0)*r10*x2131*x2132))+((x2135*x2136))+((cj1*x2132*x2133))+((r21*x2135*x2138))+(((-1.0)*x2131*x2134)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2140.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2139.value)))+(x2140.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2141=IKcos(j2);
IkReal x2142=IKsin(j2);
IkReal x2143=(cj3*sj4);
IkReal x2144=((1.0)*r20);
IkReal x2145=(cj5*sj3);
IkReal x2146=(cj3*cj4);
IkReal x2147=((1.0)*r10);
IkReal x2148=(sj3*sj5);
IkReal x2149=((1.0)*cj5);
IkReal x2150=((0.001205)*cj5);
IkReal x2151=((1.0)*r00);
IkReal x2152=((1.0)*cj0);
IkReal x2153=((0.001205)*sj5);
IkReal x2154=(sj4*sj5);
IkReal x2155=((0.097)*sj1);
IkReal x2156=((1.0)*cj4);
IkReal x2157=(cj1*x2141);
IkReal x2158=(sj0*x2142);
IkReal x2159=(cj1*x2142);
IkReal x2160=(sj1*x2142);
IkReal x2161=(sj1*x2141);
IkReal x2162=((0.12)*x2161);
evalcond[0]=((((-1.0)*x2144*x2154))+x2157+(((-1.0)*r21*sj4*x2149))+(((-1.0)*r22*x2156))+(((-1.0)*x2160)));
evalcond[1]=((((-0.12)*x2160))+(((-1.0)*pz))+(((0.12)*x2157))+(((0.097)*cj1))+(((-1.0)*r20*x2153))+(((-1.0)*r21*x2150)));
evalcond[2]=((((-1.0)*r01*sj4*x2149))+((sj0*x2161))+(((-1.0)*r02*x2156))+(((-1.0)*x2151*x2154))+((cj1*x2158)));
evalcond[3]=((((-1.0)*x2152*x2161))+(((-1.0)*r11*sj4*x2149))+(((-1.0)*x2152*x2159))+(((-1.0)*r12*x2156))+(((-1.0)*x2147*x2154)));
evalcond[4]=((((-1.0)*r00*x2153))+(((-1.0)*r01*x2150))+((sj0*x2162))+(((0.0022)*sj0))+(((-1.0)*px))+((sj0*x2155))+(((0.12)*cj1*x2158)));
evalcond[5]=((((-1.0)*cj0*x2155))+(((-0.12)*cj0*x2159))+(((-1.0)*cj0*x2162))+(((-1.0)*py))+(((-1.0)*r11*x2150))+(((-1.0)*r10*x2153))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*x2144*x2145))+(((-1.0)*r21*x2146*x2149))+x2161+x2159+(((-1.0)*sj5*x2144*x2146))+((r21*x2148))+((r22*x2143)));
evalcond[7]=((((-1.0)*r01*x2146*x2149))+((r02*x2143))+((sj1*x2158))+((r01*x2148))+(((-1.0)*sj0*x2157))+(((-1.0)*sj5*x2146*x2151))+(((-1.0)*x2145*x2151)));
evalcond[8]=(((r11*x2148))+(((-1.0)*r11*x2146*x2149))+(((-1.0)*x2152*x2160))+((cj0*x2157))+(((-1.0)*sj5*x2146*x2147))+((r12*x2143))+(((-1.0)*x2145*x2147)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2163=((1.0)*sj0);
IkReal x2164=(cj1*sj4);
IkReal x2165=(r20*sj5);
IkReal x2166=(cj4*sj1);
IkReal x2167=(r00*sj5);
IkReal x2168=(sj1*sj4);
IkReal x2169=(cj1*cj4);
IkReal x2170=(cj5*x2168);
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal((((x2164*x2167))+(((-1.0)*r22*x2163*x2166))+((r02*x2169))+(((-1.0)*r21*x2163*x2170))+(((-1.0)*x2163*x2165*x2168))+((cj5*r01*x2164)))),IkReal((((r01*x2170))+((sj0*x2164*x2165))+((r02*x2166))+((r22*sj0*x2169))+((x2167*x2168))+((cj5*r21*sj0*x2164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
CheckValue<IkReal> x2172=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2172.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2171.value)+(((1.5707963267949)*(x2172.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2173=IKcos(j2);
IkReal x2174=IKsin(j2);
IkReal x2175=(cj3*sj4);
IkReal x2176=((1.0)*r20);
IkReal x2177=(cj5*sj3);
IkReal x2178=(cj3*cj4);
IkReal x2179=((1.0)*r10);
IkReal x2180=(sj3*sj5);
IkReal x2181=((1.0)*cj5);
IkReal x2182=((0.001205)*cj5);
IkReal x2183=((1.0)*r00);
IkReal x2184=((1.0)*cj0);
IkReal x2185=((0.001205)*sj5);
IkReal x2186=(sj4*sj5);
IkReal x2187=((0.097)*sj1);
IkReal x2188=((1.0)*cj4);
IkReal x2189=(cj1*x2173);
IkReal x2190=(sj0*x2174);
IkReal x2191=(cj1*x2174);
IkReal x2192=(sj1*x2174);
IkReal x2193=(sj1*x2173);
IkReal x2194=((0.12)*x2193);
evalcond[0]=((((-1.0)*x2192))+x2189+(((-1.0)*r21*sj4*x2181))+(((-1.0)*r22*x2188))+(((-1.0)*x2176*x2186)));
evalcond[1]=((((-1.0)*r21*x2182))+(((0.12)*x2189))+(((-1.0)*r20*x2185))+(((-1.0)*pz))+(((-0.12)*x2192))+(((0.097)*cj1)));
evalcond[2]=(((cj1*x2190))+(((-1.0)*r01*sj4*x2181))+((sj0*x2193))+(((-1.0)*r02*x2188))+(((-1.0)*x2183*x2186)));
evalcond[3]=((((-1.0)*r11*sj4*x2181))+(((-1.0)*x2184*x2191))+(((-1.0)*x2184*x2193))+(((-1.0)*x2179*x2186))+(((-1.0)*r12*x2188)));
evalcond[4]=((((0.12)*cj1*x2190))+(((0.0022)*sj0))+((sj0*x2187))+((sj0*x2194))+(((-1.0)*px))+(((-1.0)*r01*x2182))+(((-1.0)*r00*x2185)));
evalcond[5]=((((-0.12)*cj0*x2191))+(((-1.0)*r10*x2185))+(((-1.0)*cj0*x2187))+(((-1.0)*cj0*x2194))+(((-1.0)*py))+(((-1.0)*r11*x2182))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*x2176*x2177))+((r22*x2175))+x2191+x2193+(((-1.0)*sj5*x2176*x2178))+((r21*x2180))+(((-1.0)*r21*x2178*x2181)));
evalcond[7]=((((-1.0)*sj5*x2178*x2183))+(((-1.0)*r01*x2178*x2181))+((sj1*x2190))+((r02*x2175))+(((-1.0)*x2177*x2183))+(((-1.0)*sj0*x2189))+((r01*x2180)));
evalcond[8]=((((-1.0)*r11*x2178*x2181))+((cj0*x2189))+(((-1.0)*sj5*x2178*x2179))+(((-1.0)*x2184*x2192))+((r11*x2180))+((r12*x2175))+(((-1.0)*x2177*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x2195=(cj0*r21);
IkReal x2196=((1.0)*cj5);
IkReal x2197=(cj0*r20);
CheckValue<IkReal> x2198=IKPowWithIntegerCheck(IKsign((((cj5*r11*sj4))+((r10*sj4*sj5))+((cj4*r12)))),-1);
if(!x2198.valid){
continue;
}
CheckValue<IkReal> x2199 = IKatan2WithCheck(IkReal(((((-1.0)*x2196*x2197))+((sj5*x2195)))),IkReal(((((-1.0)*cj4*x2195*x2196))+(((-1.0)*cj4*sj5*x2197))+((cj0*r22*sj4)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2199.valid){
continue;
}
j3array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2198.value)))+(x2199.value));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x2200=IKsin(j3);
IkReal x2201=IKcos(j3);
IkReal x2202=(sj5*x2201);
IkReal x2203=(cj4*cj5*x2200);
IkReal x2204=(cj4*sj5*x2200);
IkReal x2205=((1.0)*cj5*x2201);
IkReal x2206=((1.0)*sj4*x2200);
evalcond[0]=(((r20*x2204))+(((-1.0)*r22*x2206))+(((-1.0)*r20*x2205))+((r21*x2203))+((r21*x2202)));
evalcond[1]=(((r00*x2204))+cj0+((r01*x2203))+((r01*x2202))+(((-1.0)*r00*x2205))+(((-1.0)*r02*x2206)));
evalcond[2]=(sj0+(((-1.0)*r10*x2205))+(((-1.0)*r12*x2206))+((r11*x2203))+((r11*x2202))+((r10*x2204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[1];
j1eval[0]=sj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal j1eval[1];
j1eval[0]=cj0;
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2207=((1.23711340206186)*sj4);
IkReal x2208=(cj5*r21);
IkReal x2209=((1.23711340206186)*cj4);
IkReal x2210=(r00*sj5);
IkReal x2211=(r20*sj5);
IkReal x2212=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-1.0)*x2207*x2210))+(((-1.0)*x2207*x2212))+(((10.3092783505155)*px))+(((0.0124226804123711)*x2210))+(((0.0124226804123711)*x2212))+(((-1.0)*r02*x2209)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2207*x2208))+(((-1.0)*x2207*x2211))+(((10.3092783505155)*pz))+(((-1.0)*r22*x2209))+(((0.0124226804123711)*x2208))+(((0.0124226804123711)*x2211)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*x2207*x2210))+(((-1.0)*x2207*x2212))+(((10.3092783505155)*px))+(((0.0124226804123711)*x2210))+(((0.0124226804123711)*x2212))+(((-1.0)*r02*x2209))))+IKsqr(((((-1.0)*x2207*x2208))+(((-1.0)*x2207*x2211))+(((10.3092783505155)*pz))+(((-1.0)*r22*x2209))+(((0.0124226804123711)*x2208))+(((0.0124226804123711)*x2211))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*x2207*x2210))+(((-1.0)*x2207*x2212))+(((10.3092783505155)*px))+(((0.0124226804123711)*x2210))+(((0.0124226804123711)*x2212))+(((-1.0)*r02*x2209))), ((((-1.0)*x2207*x2208))+(((-1.0)*x2207*x2211))+(((10.3092783505155)*pz))+(((-1.0)*r22*x2209))+(((0.0124226804123711)*x2208))+(((0.0124226804123711)*x2211))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2213=((1.0)*pz);
IkReal x2214=((0.12)*sj3);
IkReal x2215=((0.12)*cj4);
IkReal x2216=((0.001205)*cj5);
IkReal x2217=(r20*sj5);
IkReal x2218=((0.12)*sj4);
IkReal x2219=(r00*sj5);
IkReal x2220=(cj5*r01);
IkReal x2221=(cj5*r21);
IkReal x2222=((0.097)*(IKcos(j1)));
IkReal x2223=((0.001205)*x2217);
IkReal x2224=(r21*x2216);
IkReal x2225=((0.097)*(IKsin(j1)));
IkReal x2226=(r01*x2216);
IkReal x2227=((0.001205)*x2219);
IkReal x2228=(x2226+x2227);
IkReal x2229=(x2224+x2223+x2213);
evalcond[0]=((-0.0022)+x2228+(((-1.0)*x2218*x2219))+px+(((-1.0)*x2225))+(((-1.0)*r02*x2215))+(((-1.0)*x2218*x2220)));
evalcond[1]=(x2222+((x2217*x2218))+((x2218*x2221))+(((-1.0)*x2229))+((r22*x2215)));
evalcond[2]=(x2222+((cj3*r02*x2218))+(((-1.0)*cj5*r00*x2214))+(((-1.0)*cj3*x2215*x2219))+(((-1.0)*x2229))+((r01*sj5*x2214))+(((-1.0)*cj3*x2215*x2220)));
evalcond[3]=((0.0022)+x2225+((cj3*x2215*x2221))+((cj3*x2215*x2217))+(((-1.0)*r21*sj5*x2214))+(((-1.0)*cj3*r22*x2218))+(((-1.0)*px))+(((-1.0)*x2228))+((cj5*r20*x2214)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2230=(sj1*sj4);
IkReal x2231=(cj5*r01);
IkReal x2232=(r20*sj5);
IkReal x2233=(cj4*sj1);
IkReal x2234=(r00*sj5);
IkReal x2235=(cj1*sj4);
IkReal x2236=(cj5*r21);
IkReal x2237=(cj1*cj4);
if( IKabs((((r02*x2237))+(((-1.0)*x2230*x2232))+(((-1.0)*x2230*x2236))+(((-1.0)*r22*x2233))+((x2231*x2235))+((x2234*x2235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2235*x2236))+((x2232*x2235))+((r22*x2237))+((r02*x2233))+((x2230*x2234))+((x2230*x2231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2237))+(((-1.0)*x2230*x2232))+(((-1.0)*x2230*x2236))+(((-1.0)*r22*x2233))+((x2231*x2235))+((x2234*x2235))))+IKsqr((((x2235*x2236))+((x2232*x2235))+((r22*x2237))+((r02*x2233))+((x2230*x2234))+((x2230*x2231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2237))+(((-1.0)*x2230*x2232))+(((-1.0)*x2230*x2236))+(((-1.0)*r22*x2233))+((x2231*x2235))+((x2234*x2235))), (((x2235*x2236))+((x2232*x2235))+((r22*x2237))+((r02*x2233))+((x2230*x2234))+((x2230*x2231))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2238=IKcos(j2);
IkReal x2239=IKsin(j2);
IkReal x2240=(cj3*sj4);
IkReal x2241=((1.0)*cj5);
IkReal x2242=(cj3*cj4);
IkReal x2243=((0.001205)*cj5);
IkReal x2244=(sj3*sj5);
IkReal x2245=(r20*sj5);
IkReal x2246=((1.0)*sj4);
IkReal x2247=(r00*sj5);
IkReal x2248=((1.0)*cj4);
IkReal x2249=(sj1*x2238);
IkReal x2250=(cj1*x2239);
IkReal x2251=(cj1*x2238);
IkReal x2252=(sj1*x2239);
IkReal x2253=(x2249+x2250);
evalcond[0]=(x2253+(((-1.0)*r02*x2248))+(((-1.0)*r01*sj4*x2241))+(((-1.0)*x2246*x2247)));
evalcond[1]=(x2251+(((-1.0)*x2252))+(((-1.0)*r22*x2248))+(((-1.0)*r21*sj4*x2241))+(((-1.0)*x2245*x2246)));
evalcond[2]=((((0.12)*x2251))+(((-1.0)*pz))+(((-0.001205)*x2245))+(((0.097)*cj1))+(((-1.0)*r21*x2243))+(((-0.12)*x2252)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((0.12)*x2250))+(((0.12)*x2249))+(((-1.0)*r01*x2243))+(((-1.0)*px))+(((-0.001205)*x2247)));
evalcond[4]=(x2253+(((-1.0)*r20*sj3*x2241))+(((-1.0)*r21*x2241*x2242))+((r21*x2244))+(((-1.0)*x2242*x2245))+((r22*x2240)));
evalcond[5]=(x2252+(((-1.0)*x2251))+((r01*x2244))+(((-1.0)*r00*sj3*x2241))+(((-1.0)*x2242*x2247))+(((-1.0)*r01*x2241*x2242))+((r02*x2240)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2254=((1.23711340206186)*sj4);
IkReal x2255=(cj5*r21);
IkReal x2256=((1.23711340206186)*cj4);
IkReal x2257=(r00*sj5);
IkReal x2258=(r20*sj5);
IkReal x2259=(cj5*r01);
if( IKabs(((-0.022680412371134)+(((-10.3092783505155)*px))+((x2254*x2257))+((x2254*x2259))+(((-0.0124226804123711)*x2259))+(((-0.0124226804123711)*x2257))+((r02*x2256)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2256))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x2255))+(((0.0124226804123711)*x2258))+(((-1.0)*x2254*x2258))+(((-1.0)*x2254*x2255)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-10.3092783505155)*px))+((x2254*x2257))+((x2254*x2259))+(((-0.0124226804123711)*x2259))+(((-0.0124226804123711)*x2257))+((r02*x2256))))+IKsqr(((((-1.0)*r22*x2256))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x2255))+(((0.0124226804123711)*x2258))+(((-1.0)*x2254*x2258))+(((-1.0)*x2254*x2255))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-10.3092783505155)*px))+((x2254*x2257))+((x2254*x2259))+(((-0.0124226804123711)*x2259))+(((-0.0124226804123711)*x2257))+((r02*x2256))), ((((-1.0)*r22*x2256))+(((10.3092783505155)*pz))+(((0.0124226804123711)*x2255))+(((0.0124226804123711)*x2258))+(((-1.0)*x2254*x2258))+(((-1.0)*x2254*x2255))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2260=((1.0)*px);
IkReal x2261=((0.12)*sj3);
IkReal x2262=((0.12)*cj4);
IkReal x2263=((0.001205)*cj5);
IkReal x2264=(r20*sj5);
IkReal x2265=((0.12)*sj4);
IkReal x2266=(r00*sj5);
IkReal x2267=(cj5*r01);
IkReal x2268=(cj5*r21);
IkReal x2269=((0.001205)*x2264);
IkReal x2270=(r21*x2263);
IkReal x2271=((0.097)*(IKcos(j1)));
IkReal x2272=(r01*x2263);
IkReal x2273=((0.097)*(IKsin(j1)));
IkReal x2274=((0.001205)*x2266);
IkReal x2275=(x2269+x2270);
IkReal x2276=(x2260+x2274+x2273+x2272);
evalcond[0]=(x2271+((r22*x2262))+(((-1.0)*pz))+(((-1.0)*x2275))+((x2264*x2265))+((x2265*x2268)));
evalcond[1]=((-0.0022)+((r02*x2262))+(((-1.0)*x2276))+((x2265*x2266))+((x2265*x2267)));
evalcond[2]=(((r01*sj5*x2261))+x2275+(((-1.0)*cj3*x2262*x2266))+(((-1.0)*cj3*x2262*x2267))+(((-1.0)*cj5*r00*x2261))+((cj3*r02*x2265))+pz+(((-1.0)*x2271)));
evalcond[3]=((-0.0022)+((cj3*r22*x2265))+(((-1.0)*cj5*r20*x2261))+((r21*sj5*x2261))+(((-1.0)*cj3*x2262*x2264))+(((-1.0)*cj3*x2262*x2268))+(((-1.0)*x2276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2277=((1.0)*sj1);
IkReal x2278=(sj4*sj5);
IkReal x2279=(cj4*r22);
IkReal x2280=(cj5*sj4);
IkReal x2281=(cj4*r02);
IkReal x2282=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*x2278*x2282))+(((-1.0)*r01*x2280*x2282))+(((-1.0)*r20*x2277*x2278))+(((-1.0)*x2281*x2282))+(((-1.0)*r21*x2277*x2280))+(((-1.0)*x2277*x2279)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2277*x2281))+((cj1*x2279))+((cj1*r21*x2280))+((cj1*r20*x2278))+(((-1.0)*r00*x2277*x2278))+(((-1.0)*r01*x2277*x2280)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x2278*x2282))+(((-1.0)*r01*x2280*x2282))+(((-1.0)*r20*x2277*x2278))+(((-1.0)*x2281*x2282))+(((-1.0)*r21*x2277*x2280))+(((-1.0)*x2277*x2279))))+IKsqr(((((-1.0)*x2277*x2281))+((cj1*x2279))+((cj1*r21*x2280))+((cj1*r20*x2278))+(((-1.0)*r00*x2277*x2278))+(((-1.0)*r01*x2277*x2280))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r00*x2278*x2282))+(((-1.0)*r01*x2280*x2282))+(((-1.0)*r20*x2277*x2278))+(((-1.0)*x2281*x2282))+(((-1.0)*r21*x2277*x2280))+(((-1.0)*x2277*x2279))), ((((-1.0)*x2277*x2281))+((cj1*x2279))+((cj1*r21*x2280))+((cj1*r20*x2278))+(((-1.0)*r00*x2277*x2278))+(((-1.0)*r01*x2277*x2280))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2283=IKcos(j2);
IkReal x2284=IKsin(j2);
IkReal x2285=(cj3*sj4);
IkReal x2286=((1.0)*cj5);
IkReal x2287=(cj3*cj4);
IkReal x2288=((0.001205)*cj5);
IkReal x2289=(sj3*sj5);
IkReal x2290=(r20*sj5);
IkReal x2291=((1.0)*sj4);
IkReal x2292=(r00*sj5);
IkReal x2293=((1.0)*cj4);
IkReal x2294=(cj1*x2283);
IkReal x2295=(cj1*x2284);
IkReal x2296=(sj1*x2284);
IkReal x2297=(sj1*x2283);
IkReal x2298=((1.0)*x2296);
evalcond[0]=((((-1.0)*r21*sj4*x2286))+x2294+(((-1.0)*x2298))+(((-1.0)*x2290*x2291))+(((-1.0)*r22*x2293)));
evalcond[1]=((((0.12)*x2294))+(((-1.0)*pz))+(((-1.0)*r21*x2288))+(((0.097)*cj1))+(((-0.12)*x2296))+(((-0.001205)*x2290)));
evalcond[2]=((((-1.0)*r01*sj4*x2286))+(((-1.0)*r02*x2293))+(((-1.0)*x2295))+(((-1.0)*x2297))+(((-1.0)*x2291*x2292)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x2288))+(((-0.12)*x2297))+(((-0.12)*x2295))+(((-0.001205)*x2292)));
evalcond[4]=(x2297+x2295+(((-1.0)*x2287*x2290))+(((-1.0)*r20*sj3*x2286))+(((-1.0)*r21*x2286*x2287))+((r21*x2289))+((r22*x2285)));
evalcond[5]=((((-1.0)*r01*x2286*x2287))+x2294+(((-1.0)*x2287*x2292))+((r01*x2289))+(((-1.0)*r00*sj3*x2286))+(((-1.0)*x2298))+((r02*x2285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2299=(cj5*r11);
IkReal x2300=((1.23711340206186)*sj4);
IkReal x2301=(r10*sj5);
IkReal x2302=(r20*sj5);
IkReal x2303=(cj5*r21);
IkReal x2304=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+((r12*x2304))+(((-10.3092783505155)*py))+((x2300*x2301))+(((-0.0124226804123711)*x2299))+(((-0.0124226804123711)*x2301))+((x2299*x2300)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r22*x2304))+(((0.0124226804123711)*x2302))+(((0.0124226804123711)*x2303))+(((-1.0)*x2300*x2302))+(((-1.0)*x2300*x2303))+(((10.3092783505155)*pz)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+((r12*x2304))+(((-10.3092783505155)*py))+((x2300*x2301))+(((-0.0124226804123711)*x2299))+(((-0.0124226804123711)*x2301))+((x2299*x2300))))+IKsqr(((((-1.0)*r22*x2304))+(((0.0124226804123711)*x2302))+(((0.0124226804123711)*x2303))+(((-1.0)*x2300*x2302))+(((-1.0)*x2300*x2303))+(((10.3092783505155)*pz))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+((r12*x2304))+(((-10.3092783505155)*py))+((x2300*x2301))+(((-0.0124226804123711)*x2299))+(((-0.0124226804123711)*x2301))+((x2299*x2300))), ((((-1.0)*r22*x2304))+(((0.0124226804123711)*x2302))+(((0.0124226804123711)*x2303))+(((-1.0)*x2300*x2302))+(((-1.0)*x2300*x2303))+(((10.3092783505155)*pz))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2305=((1.0)*py);
IkReal x2306=((0.12)*r10);
IkReal x2307=(sj4*sj5);
IkReal x2308=(cj5*sj3);
IkReal x2309=((0.12)*r11);
IkReal x2310=(sj3*sj5);
IkReal x2311=((0.001205)*cj5);
IkReal x2312=(cj3*cj4);
IkReal x2313=((0.001205)*sj5);
IkReal x2314=((0.12)*r21);
IkReal x2315=((0.12)*cj4);
IkReal x2316=((0.12)*r20);
IkReal x2317=(cj5*sj4);
IkReal x2318=(r20*x2313);
IkReal x2319=(r21*x2311);
IkReal x2320=((0.097)*(IKcos(j1)));
IkReal x2321=(r11*x2311);
IkReal x2322=(r10*x2313);
IkReal x2323=((0.097)*(IKsin(j1)));
IkReal x2324=((0.12)*cj3*sj4);
IkReal x2325=(x2318+x2319);
IkReal x2326=(x2323+x2322+x2321+x2305);
evalcond[0]=(x2320+((r22*x2315))+(((-1.0)*pz))+((x2314*x2317))+((x2307*x2316))+(((-1.0)*x2325)));
evalcond[1]=((-0.0022)+((x2306*x2307))+((x2309*x2317))+((r12*x2315))+(((-1.0)*x2326)));
evalcond[2]=((((-1.0)*x2306*x2308))+(((-1.0)*sj5*x2306*x2312))+x2325+((x2309*x2310))+((r12*x2324))+pz+(((-1.0)*cj5*x2309*x2312))+(((-1.0)*x2320)));
evalcond[3]=((-0.0022)+((r22*x2324))+(((-1.0)*sj5*x2312*x2316))+(((-1.0)*x2308*x2316))+(((-1.0)*cj5*x2312*x2314))+((x2310*x2314))+(((-1.0)*x2326)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2327=((1.0)*sj1);
IkReal x2328=(sj4*sj5);
IkReal x2329=(cj4*r22);
IkReal x2330=(cj4*r12);
IkReal x2331=((1.0)*cj1);
IkReal x2332=(cj5*r21*sj4);
IkReal x2333=(cj5*r11*sj4);
if( IKabs(((((-1.0)*r20*x2327*x2328))+(((-1.0)*x2331*x2333))+(((-1.0)*r10*x2328*x2331))+(((-1.0)*x2327*x2329))+(((-1.0)*x2327*x2332))+(((-1.0)*x2330*x2331)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2332))+((cj1*x2329))+((cj1*r20*x2328))+(((-1.0)*x2327*x2330))+(((-1.0)*x2327*x2333))+(((-1.0)*r10*x2327*x2328)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2327*x2328))+(((-1.0)*x2331*x2333))+(((-1.0)*r10*x2328*x2331))+(((-1.0)*x2327*x2329))+(((-1.0)*x2327*x2332))+(((-1.0)*x2330*x2331))))+IKsqr((((cj1*x2332))+((cj1*x2329))+((cj1*r20*x2328))+(((-1.0)*x2327*x2330))+(((-1.0)*x2327*x2333))+(((-1.0)*r10*x2327*x2328))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2327*x2328))+(((-1.0)*x2331*x2333))+(((-1.0)*r10*x2328*x2331))+(((-1.0)*x2327*x2329))+(((-1.0)*x2327*x2332))+(((-1.0)*x2330*x2331))), (((cj1*x2332))+((cj1*x2329))+((cj1*r20*x2328))+(((-1.0)*x2327*x2330))+(((-1.0)*x2327*x2333))+(((-1.0)*r10*x2327*x2328))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2334=IKcos(j2);
IkReal x2335=IKsin(j2);
IkReal x2336=(sj3*sj5);
IkReal x2337=((0.001205)*cj5);
IkReal x2338=(r20*sj5);
IkReal x2339=((1.0)*sj4);
IkReal x2340=(r10*sj5);
IkReal x2341=((1.0)*sj1);
IkReal x2342=(cj5*r21);
IkReal x2343=((1.0)*cj4);
IkReal x2344=((0.12)*sj1);
IkReal x2345=(cj3*sj4);
IkReal x2346=(cj5*r11);
IkReal x2347=(cj1*x2334);
IkReal x2348=((1.0)*cj5*sj3);
IkReal x2349=(cj1*x2335);
IkReal x2350=(cj3*x2343);
IkReal x2351=(x2335*x2341);
evalcond[0]=((((-1.0)*x2339*x2342))+x2347+(((-1.0)*x2338*x2339))+(((-1.0)*r22*x2343))+(((-1.0)*x2351)));
evalcond[1]=((((-1.0)*x2335*x2344))+(((-1.0)*pz))+(((-0.001205)*x2338))+(((0.097)*cj1))+(((0.12)*x2347))+(((-1.0)*r21*x2337)));
evalcond[2]=((((-1.0)*x2339*x2346))+(((-1.0)*x2339*x2340))+(((-1.0)*x2349))+(((-1.0)*x2334*x2341))+(((-1.0)*r12*x2343)));
evalcond[3]=((-0.0022)+(((-0.001205)*x2340))+(((-0.097)*sj1))+(((-1.0)*x2334*x2344))+(((-0.12)*x2349))+(((-1.0)*py))+(((-1.0)*r11*x2337)));
evalcond[4]=(((r21*x2336))+x2349+(((-1.0)*r20*x2348))+((r22*x2345))+((sj1*x2334))+(((-1.0)*x2342*x2350))+(((-1.0)*x2338*x2350)));
evalcond[5]=((((-1.0)*x2346*x2350))+x2347+((r12*x2345))+(((-1.0)*x2340*x2350))+((r11*x2336))+(((-1.0)*r10*x2348))+(((-1.0)*x2351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2352=((0.0124226804123711)*cj5);
IkReal x2353=((0.0124226804123711)*sj5);
IkReal x2354=((1.23711340206186)*sj4);
IkReal x2355=((1.23711340206186)*cj4);
if( IKabs(((-0.022680412371134)+(((-1.0)*cj5*r11*x2354))+((r10*x2353))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x2354))+((r11*x2352))+(((-1.0)*r12*x2355)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r20*sj5*x2354))+(((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x2354))+(((-1.0)*r22*x2355))+((r20*x2353))+((r21*x2352)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.022680412371134)+(((-1.0)*cj5*r11*x2354))+((r10*x2353))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x2354))+((r11*x2352))+(((-1.0)*r12*x2355))))+IKsqr(((((-1.0)*r20*sj5*x2354))+(((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x2354))+(((-1.0)*r22*x2355))+((r20*x2353))+((r21*x2352))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-0.022680412371134)+(((-1.0)*cj5*r11*x2354))+((r10*x2353))+(((10.3092783505155)*py))+(((-1.0)*r10*sj5*x2354))+((r11*x2352))+(((-1.0)*r12*x2355))), ((((-1.0)*r20*sj5*x2354))+(((10.3092783505155)*pz))+(((-1.0)*cj5*r21*x2354))+(((-1.0)*r22*x2355))+((r20*x2353))+((r21*x2352))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
IkReal x2356=((1.0)*pz);
IkReal x2357=((0.12)*r10);
IkReal x2358=(sj4*sj5);
IkReal x2359=(cj5*sj3);
IkReal x2360=((0.12)*r11);
IkReal x2361=(sj3*sj5);
IkReal x2362=((0.001205)*cj5);
IkReal x2363=(cj3*cj4);
IkReal x2364=((0.001205)*sj5);
IkReal x2365=((0.12)*r21);
IkReal x2366=((0.12)*cj4);
IkReal x2367=((0.12)*r20);
IkReal x2368=(cj5*sj4);
IkReal x2369=((0.097)*(IKcos(j1)));
IkReal x2370=(r20*x2364);
IkReal x2371=(r21*x2362);
IkReal x2372=((0.097)*(IKsin(j1)));
IkReal x2373=(r11*x2362);
IkReal x2374=(r10*x2364);
IkReal x2375=((0.12)*cj3*sj4);
IkReal x2376=(x2374+x2373);
IkReal x2377=(x2370+x2371+x2356);
evalcond[0]=((-0.0022)+(((-1.0)*x2357*x2358))+x2376+(((-1.0)*x2372))+py+(((-1.0)*x2360*x2368))+(((-1.0)*r12*x2366)));
evalcond[1]=(((x2365*x2368))+x2369+(((-1.0)*x2377))+((x2358*x2367))+((r22*x2366)));
evalcond[2]=((((-1.0)*sj5*x2357*x2363))+(((-1.0)*x2357*x2359))+((r12*x2375))+x2369+(((-1.0)*cj5*x2360*x2363))+(((-1.0)*x2377))+((x2360*x2361)));
evalcond[3]=((0.0022)+x2372+((sj5*x2363*x2367))+(((-1.0)*x2376))+((x2359*x2367))+(((-1.0)*py))+(((-1.0)*x2361*x2365))+(((-1.0)*r22*x2375))+((cj5*x2363*x2365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2378=((1.0)*sj1);
IkReal x2379=(sj4*sj5);
IkReal x2380=(cj4*r12);
IkReal x2381=(cj4*r22);
IkReal x2382=(cj5*sj4);
IkReal x2383=(cj1*x2382);
if( IKabs(((((-1.0)*r20*x2378*x2379))+(((-1.0)*x2378*x2381))+(((-1.0)*r21*x2378*x2382))+((cj1*r10*x2379))+((cj1*x2380))+((r11*x2383)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2382))+((cj1*r20*x2379))+((r10*sj1*x2379))+((r21*x2383))+((cj1*x2381))+((sj1*x2380)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r20*x2378*x2379))+(((-1.0)*x2378*x2381))+(((-1.0)*r21*x2378*x2382))+((cj1*r10*x2379))+((cj1*x2380))+((r11*x2383))))+IKsqr((((r11*sj1*x2382))+((cj1*r20*x2379))+((r10*sj1*x2379))+((r21*x2383))+((cj1*x2381))+((sj1*x2380))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r20*x2378*x2379))+(((-1.0)*x2378*x2381))+(((-1.0)*r21*x2378*x2382))+((cj1*r10*x2379))+((cj1*x2380))+((r11*x2383))), (((r11*sj1*x2382))+((cj1*r20*x2379))+((r10*sj1*x2379))+((r21*x2383))+((cj1*x2381))+((sj1*x2380))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2384=IKcos(j2);
IkReal x2385=IKsin(j2);
IkReal x2386=(sj3*sj5);
IkReal x2387=((0.001205)*cj5);
IkReal x2388=(r20*sj5);
IkReal x2389=((1.0)*sj4);
IkReal x2390=(r10*sj5);
IkReal x2391=(cj5*r21);
IkReal x2392=((1.0)*cj4);
IkReal x2393=(cj3*sj4);
IkReal x2394=(cj5*r11);
IkReal x2395=(sj1*x2384);
IkReal x2396=(cj1*x2385);
IkReal x2397=(cj1*x2384);
IkReal x2398=((1.0)*cj5*sj3);
IkReal x2399=(cj3*x2392);
IkReal x2400=(sj1*x2385);
IkReal x2401=(x2396+x2395);
evalcond[0]=(x2401+(((-1.0)*x2389*x2394))+(((-1.0)*x2389*x2390))+(((-1.0)*r12*x2392)));
evalcond[1]=((((-1.0)*x2400))+x2397+(((-1.0)*x2389*x2391))+(((-1.0)*r22*x2392))+(((-1.0)*x2388*x2389)));
evalcond[2]=((((-0.001205)*x2388))+(((-1.0)*r21*x2387))+(((0.12)*x2397))+(((-1.0)*pz))+(((0.097)*cj1))+(((-0.12)*x2400)));
evalcond[3]=((0.0022)+(((-0.001205)*x2390))+(((0.097)*sj1))+(((0.12)*x2395))+(((0.12)*x2396))+(((-1.0)*py))+(((-1.0)*r11*x2387)));
evalcond[4]=(x2401+(((-1.0)*r20*x2398))+((r22*x2393))+((r21*x2386))+(((-1.0)*x2388*x2399))+(((-1.0)*x2391*x2399)));
evalcond[5]=(((r12*x2393))+(((-1.0)*r10*x2398))+x2400+(((-1.0)*x2390*x2399))+(((-1.0)*x2397))+(((-1.0)*x2394*x2399))+((r11*x2386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2402=(cj5*r21);
IkReal x2403=((1.23711340206186)*sj4);
IkReal x2404=(r20*sj5);
IkReal x2405=((0.001205)*cj0);
IkReal x2406=(r10*sj5);
IkReal x2407=(cj5*r11);
IkReal x2408=((0.12)*cj0);
CheckValue<IkReal> x2409=IKPowWithIntegerCheck(cj0,-2);
if(!x2409.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x2409.value)*(((((-1.0)*x2405*x2407))+(((-1.0)*x2405*x2406))+(((-0.0022)*(cj0*cj0)))+((sj4*x2406*x2408))+((cj4*r12*x2408))+((sj4*x2407*x2408))+(((-1.0)*cj0*py)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0124226804123711)*x2402))+(((0.0124226804123711)*x2404))+(((-1.0)*x2403*x2404))+(((10.3092783505155)*pz))+(((-1.0)*x2402*x2403))+(((-1.23711340206186)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x2409.value)*(((((-1.0)*x2405*x2407))+(((-1.0)*x2405*x2406))+(((-0.0022)*(cj0*cj0)))+((sj4*x2406*x2408))+((cj4*r12*x2408))+((sj4*x2407*x2408))+(((-1.0)*cj0*py))))))+IKsqr(((((0.0124226804123711)*x2402))+(((0.0124226804123711)*x2404))+(((-1.0)*x2403*x2404))+(((10.3092783505155)*pz))+(((-1.0)*x2402*x2403))+(((-1.23711340206186)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x2409.value)*(((((-1.0)*x2405*x2407))+(((-1.0)*x2405*x2406))+(((-0.0022)*(cj0*cj0)))+((sj4*x2406*x2408))+((cj4*r12*x2408))+((sj4*x2407*x2408))+(((-1.0)*cj0*py))))), ((((0.0124226804123711)*x2402))+(((0.0124226804123711)*x2404))+(((-1.0)*x2403*x2404))+(((10.3092783505155)*pz))+(((-1.0)*x2402*x2403))+(((-1.23711340206186)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2410=cj0*cj0;
IkReal x2411=sj0*sj0;
IkReal x2412=IKsin(j1);
IkReal x2413=IKcos(j1);
IkReal x2414=(r00*sj4);
IkReal x2415=(cj3*cj4);
IkReal x2416=((1.0)*py);
IkReal x2417=(cj0*sj0);
IkReal x2418=((0.12)*sj3);
IkReal x2419=(sj0*sj5);
IkReal x2420=((0.001205)*cj5);
IkReal x2421=((1.0)*px);
IkReal x2422=((0.12)*sj0);
IkReal x2423=(cj3*sj4);
IkReal x2424=((0.001205)*sj5);
IkReal x2425=((1.0)*pz);
IkReal x2426=(cj4*r12);
IkReal x2427=((0.12)*sj5);
IkReal x2428=((0.12)*r22);
IkReal x2429=(cj0*sj4);
IkReal x2430=(cj0*r21);
IkReal x2431=(cj5*r01);
IkReal x2432=((0.12)*cj5);
IkReal x2433=(r10*sj4);
IkReal x2434=(cj5*r20);
IkReal x2435=((0.0022)*x2417);
IkReal x2436=(sj0*x2420);
IkReal x2437=(cj0*x2427);
IkReal x2438=((0.097)*x2412);
IkReal x2439=((0.12)*cj4*r02);
IkReal x2440=(cj0*x2424);
IkReal x2441=(r11*x2432);
IkReal x2442=((0.097)*x2413);
IkReal x2443=(x2417*x2438);
IkReal x2444=(x2435+x2443);
evalcond[0]=(x2442+((cj4*x2428))+(((-1.0)*r20*x2424))+(((-1.0)*r21*x2420))+(((-1.0)*x2425))+((r20*sj4*x2427))+((r21*sj4*x2432)));
evalcond[1]=((((-1.0)*cj0*x2416))+(((-0.0022)*x2410))+(((-1.0)*r10*x2440))+((r10*x2427*x2429))+(((-1.0)*cj0*r11*x2420))+((x2429*x2441))+(((-1.0)*x2410*x2438))+(((0.12)*cj0*x2426)));
evalcond[2]=((((-0.0022)*x2411))+(((-1.0)*cj4*r02*x2422))+((r01*x2436))+(((-1.0)*x2411*x2438))+(((-1.0)*sj4*x2422*x2431))+((px*sj0))+(((-0.12)*x2414*x2419))+(((0.001205)*r00*x2419)));
evalcond[3]=((((-1.0)*x2415*x2441))+(((0.12)*r12*x2423))+(((-1.0)*cj5*r10*x2418))+(((-1.0)*cj0*x2442))+((x2420*x2430))+(((-1.0)*r10*x2415*x2427))+((r11*sj5*x2418))+((cj0*pz))+((r20*x2440)));
evalcond[4]=((((-0.12)*x2415*x2431))+(((-0.001205)*r20*x2419))+(((-1.0)*cj5*r00*x2418))+((sj0*x2442))+(((-1.0)*sj0*x2425))+(((-1.0)*r00*x2415*x2427))+((r01*sj5*x2418))+(((0.12)*r02*x2423))+(((-1.0)*r21*x2436)));
evalcond[5]=((((-1.0)*x2415*x2430*x2432))+(((-1.0)*cj0*x2438))+(((-1.0)*cj0*x2418*x2434))+(((-1.0)*r10*x2424))+(((-1.0)*r20*x2415*x2437))+((cj0*x2423*x2428))+(((-1.0)*r11*x2420))+(((-1.0)*x2416))+(((-0.0022)*cj0))+((sj5*x2418*x2430)));
evalcond[6]=((((-1.0)*r01*x2420))+((sj0*x2418*x2434))+((cj5*r21*x2415*x2422))+(((0.0022)*sj0))+(((-1.0)*r22*x2422*x2423))+(((0.12)*r20*x2415*x2419))+(((-1.0)*x2421))+((sj0*x2438))+(((-1.0)*r00*x2424))+(((-1.0)*r21*x2418*x2419)));
evalcond[7]=(x2444+((r11*x2436))+((cj0*x2439))+(((0.12)*x2429*x2431))+(((0.001205)*r10*x2419))+((x2414*x2437))+((py*sj0)));
evalcond[8]=(x2444+(((-1.0)*cj0*r01*x2420))+(((-1.0)*x2422*x2426))+(((-1.0)*cj0*x2421))+(((-0.12)*x2419*x2433))+(((-1.0)*cj5*r11*sj4*x2422))+(((-1.0)*r00*x2440)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2445=(sj1*sj4);
IkReal x2446=(cj5*r01);
IkReal x2447=(r20*sj5);
IkReal x2448=(cj4*sj1);
IkReal x2449=(r00*sj5);
IkReal x2450=(cj1*sj4);
IkReal x2451=(cj5*r21);
IkReal x2452=(cj1*cj4);
if( IKabs((((r02*x2452))+(((-1.0)*r22*x2448))+((x2449*x2450))+(((-1.0)*x2445*x2451))+(((-1.0)*x2445*x2447))+((x2446*x2450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((x2447*x2450))+((r02*x2448))+((r22*x2452))+((x2450*x2451))+((x2445*x2449))+((x2445*x2446)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r02*x2452))+(((-1.0)*r22*x2448))+((x2449*x2450))+(((-1.0)*x2445*x2451))+(((-1.0)*x2445*x2447))+((x2446*x2450))))+IKsqr((((x2447*x2450))+((r02*x2448))+((r22*x2452))+((x2450*x2451))+((x2445*x2449))+((x2445*x2446))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((r02*x2452))+(((-1.0)*r22*x2448))+((x2449*x2450))+(((-1.0)*x2445*x2451))+(((-1.0)*x2445*x2447))+((x2446*x2450))), (((x2447*x2450))+((r02*x2448))+((r22*x2452))+((x2450*x2451))+((x2445*x2449))+((x2445*x2446))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2453=IKcos(j2);
IkReal x2454=IKsin(j2);
IkReal x2455=(cj3*sj4);
IkReal x2456=((1.0)*cj5);
IkReal x2457=(cj3*cj4);
IkReal x2458=((0.001205)*cj5);
IkReal x2459=(sj3*sj5);
IkReal x2460=(r20*sj5);
IkReal x2461=((1.0)*sj4);
IkReal x2462=(r00*sj5);
IkReal x2463=((1.0)*cj4);
IkReal x2464=(sj1*x2453);
IkReal x2465=(cj1*x2454);
IkReal x2466=(cj1*x2453);
IkReal x2467=(sj1*x2454);
IkReal x2468=(x2464+x2465);
evalcond[0]=(x2468+(((-1.0)*r01*sj4*x2456))+(((-1.0)*r02*x2463))+(((-1.0)*x2461*x2462)));
evalcond[1]=((((-1.0)*r22*x2463))+x2466+(((-1.0)*x2467))+(((-1.0)*r21*sj4*x2456))+(((-1.0)*x2460*x2461)));
evalcond[2]=((((-0.001205)*x2460))+(((-1.0)*r21*x2458))+(((-1.0)*pz))+(((-0.12)*x2467))+(((0.097)*cj1))+(((0.12)*x2466)));
evalcond[3]=((0.0022)+(((-0.001205)*x2462))+(((0.097)*sj1))+(((-1.0)*px))+(((-1.0)*r01*x2458))+(((0.12)*x2464))+(((0.12)*x2465)));
evalcond[4]=((((-1.0)*r20*sj3*x2456))+x2468+(((-1.0)*r21*x2456*x2457))+((r22*x2455))+(((-1.0)*x2457*x2460))+((r21*x2459)));
evalcond[5]=(((r02*x2455))+x2467+(((-1.0)*x2466))+((r01*x2459))+(((-1.0)*r00*sj3*x2456))+(((-1.0)*r01*x2456*x2457))+(((-1.0)*x2457*x2462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2469=((1.0)*sj1);
IkReal x2470=(sj4*sj5);
IkReal x2471=(cj4*r22);
IkReal x2472=(cj5*sj4);
IkReal x2473=(cj4*r02);
IkReal x2474=((1.0)*cj1);
if( IKabs(((((-1.0)*r21*x2469*x2472))+(((-1.0)*r00*x2470*x2474))+(((-1.0)*x2473*x2474))+(((-1.0)*r01*x2472*x2474))+(((-1.0)*x2469*x2471))+(((-1.0)*r20*x2469*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x2469*x2470))+((cj1*r21*x2472))+(((-1.0)*x2469*x2473))+(((-1.0)*r01*x2469*x2472))+((cj1*x2471))+((cj1*r20*x2470)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2469*x2472))+(((-1.0)*r00*x2470*x2474))+(((-1.0)*x2473*x2474))+(((-1.0)*r01*x2472*x2474))+(((-1.0)*x2469*x2471))+(((-1.0)*r20*x2469*x2470))))+IKsqr(((((-1.0)*r00*x2469*x2470))+((cj1*r21*x2472))+(((-1.0)*x2469*x2473))+(((-1.0)*r01*x2469*x2472))+((cj1*x2471))+((cj1*r20*x2470))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2469*x2472))+(((-1.0)*r00*x2470*x2474))+(((-1.0)*x2473*x2474))+(((-1.0)*r01*x2472*x2474))+(((-1.0)*x2469*x2471))+(((-1.0)*r20*x2469*x2470))), ((((-1.0)*r00*x2469*x2470))+((cj1*r21*x2472))+(((-1.0)*x2469*x2473))+(((-1.0)*r01*x2469*x2472))+((cj1*x2471))+((cj1*r20*x2470))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2475=IKcos(j2);
IkReal x2476=IKsin(j2);
IkReal x2477=(cj3*sj4);
IkReal x2478=((1.0)*cj5);
IkReal x2479=(cj3*cj4);
IkReal x2480=((0.001205)*cj5);
IkReal x2481=(sj3*sj5);
IkReal x2482=(r20*sj5);
IkReal x2483=((1.0)*sj4);
IkReal x2484=(r00*sj5);
IkReal x2485=((1.0)*cj4);
IkReal x2486=(cj1*x2475);
IkReal x2487=(cj1*x2476);
IkReal x2488=(sj1*x2476);
IkReal x2489=(sj1*x2475);
IkReal x2490=((1.0)*x2488);
evalcond[0]=((((-1.0)*r22*x2485))+x2486+(((-1.0)*r21*sj4*x2478))+(((-1.0)*x2490))+(((-1.0)*x2482*x2483)));
evalcond[1]=((((-1.0)*pz))+(((-1.0)*r21*x2480))+(((-0.12)*x2488))+(((-0.001205)*x2482))+(((0.097)*cj1))+(((0.12)*x2486)));
evalcond[2]=((((-1.0)*x2487))+(((-1.0)*x2489))+(((-1.0)*r02*x2485))+(((-1.0)*r01*sj4*x2478))+(((-1.0)*x2483*x2484)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*r01*x2480))+(((-1.0)*px))+(((-0.12)*x2487))+(((-0.12)*x2489))+(((-0.001205)*x2484)));
evalcond[4]=((((-1.0)*r20*sj3*x2478))+(((-1.0)*r21*x2478*x2479))+x2489+x2487+(((-1.0)*x2479*x2482))+((r21*x2481))+((r22*x2477)));
evalcond[5]=(((r01*x2481))+x2486+(((-1.0)*x2490))+(((-1.0)*x2479*x2484))+((r02*x2477))+(((-1.0)*r00*sj3*x2478))+(((-1.0)*r01*x2478*x2479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2491=((1.0)*sj1);
IkReal x2492=(sj4*sj5);
IkReal x2493=(cj4*r22);
IkReal x2494=(cj4*r12);
IkReal x2495=((1.0)*cj1);
IkReal x2496=(cj5*r21*sj4);
IkReal x2497=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x2495*x2497))+(((-1.0)*x2494*x2495))+(((-1.0)*r20*x2491*x2492))+(((-1.0)*x2491*x2493))+(((-1.0)*x2491*x2496))+(((-1.0)*r10*x2492*x2495)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((cj1*x2493))+((cj1*x2496))+((cj1*r20*x2492))+(((-1.0)*r10*x2491*x2492))+(((-1.0)*x2491*x2494))+(((-1.0)*x2491*x2497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2495*x2497))+(((-1.0)*x2494*x2495))+(((-1.0)*r20*x2491*x2492))+(((-1.0)*x2491*x2493))+(((-1.0)*x2491*x2496))+(((-1.0)*r10*x2492*x2495))))+IKsqr((((cj1*x2493))+((cj1*x2496))+((cj1*r20*x2492))+(((-1.0)*r10*x2491*x2492))+(((-1.0)*x2491*x2494))+(((-1.0)*x2491*x2497))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2495*x2497))+(((-1.0)*x2494*x2495))+(((-1.0)*r20*x2491*x2492))+(((-1.0)*x2491*x2493))+(((-1.0)*x2491*x2496))+(((-1.0)*r10*x2492*x2495))), (((cj1*x2493))+((cj1*x2496))+((cj1*r20*x2492))+(((-1.0)*r10*x2491*x2492))+(((-1.0)*x2491*x2494))+(((-1.0)*x2491*x2497))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2498=IKcos(j2);
IkReal x2499=IKsin(j2);
IkReal x2500=(sj3*sj5);
IkReal x2501=((0.001205)*cj5);
IkReal x2502=(r20*sj5);
IkReal x2503=((1.0)*sj4);
IkReal x2504=(r10*sj5);
IkReal x2505=((1.0)*sj1);
IkReal x2506=(cj5*r21);
IkReal x2507=((1.0)*cj4);
IkReal x2508=((0.12)*sj1);
IkReal x2509=(cj3*sj4);
IkReal x2510=(cj5*r11);
IkReal x2511=(cj1*x2498);
IkReal x2512=((1.0)*cj5*sj3);
IkReal x2513=(cj1*x2499);
IkReal x2514=(cj3*x2507);
IkReal x2515=(x2499*x2505);
evalcond[0]=(x2511+(((-1.0)*x2515))+(((-1.0)*x2503*x2506))+(((-1.0)*x2502*x2503))+(((-1.0)*r22*x2507)));
evalcond[1]=((((-1.0)*pz))+(((-1.0)*x2499*x2508))+(((0.097)*cj1))+(((0.12)*x2511))+(((-0.001205)*x2502))+(((-1.0)*r21*x2501)));
evalcond[2]=((((-1.0)*x2498*x2505))+(((-1.0)*x2503*x2510))+(((-1.0)*r12*x2507))+(((-1.0)*x2503*x2504))+(((-1.0)*x2513)));
evalcond[3]=((-0.0022)+(((-1.0)*x2498*x2508))+(((-0.097)*sj1))+(((-1.0)*r11*x2501))+(((-1.0)*py))+(((-0.12)*x2513))+(((-0.001205)*x2504)));
evalcond[4]=(((sj1*x2498))+x2513+(((-1.0)*x2506*x2514))+((r22*x2509))+(((-1.0)*x2502*x2514))+((r21*x2500))+(((-1.0)*r20*x2512)));
evalcond[5]=(x2511+(((-1.0)*x2515))+((r12*x2509))+(((-1.0)*x2510*x2514))+(((-1.0)*x2504*x2514))+(((-1.0)*r10*x2512))+((r11*x2500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2516=((1.0)*sj1);
IkReal x2517=(sj4*sj5);
IkReal x2518=(cj4*r12);
IkReal x2519=(cj4*r22);
IkReal x2520=(cj5*sj4);
IkReal x2521=(cj1*x2520);
if( IKabs((((cj1*r10*x2517))+(((-1.0)*r20*x2516*x2517))+((r11*x2521))+((cj1*x2518))+(((-1.0)*r21*x2516*x2520))+(((-1.0)*x2516*x2519)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((sj1*x2518))+((cj1*x2519))+((r11*sj1*x2520))+((r10*sj1*x2517))+((cj1*r20*x2517))+((r21*x2521)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj1*r10*x2517))+(((-1.0)*r20*x2516*x2517))+((r11*x2521))+((cj1*x2518))+(((-1.0)*r21*x2516*x2520))+(((-1.0)*x2516*x2519))))+IKsqr((((sj1*x2518))+((cj1*x2519))+((r11*sj1*x2520))+((r10*sj1*x2517))+((cj1*r20*x2517))+((r21*x2521))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj1*r10*x2517))+(((-1.0)*r20*x2516*x2517))+((r11*x2521))+((cj1*x2518))+(((-1.0)*r21*x2516*x2520))+(((-1.0)*x2516*x2519))), (((sj1*x2518))+((cj1*x2519))+((r11*sj1*x2520))+((r10*sj1*x2517))+((cj1*r20*x2517))+((r21*x2521))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2522=IKcos(j2);
IkReal x2523=IKsin(j2);
IkReal x2524=(sj3*sj5);
IkReal x2525=((0.001205)*cj5);
IkReal x2526=(r20*sj5);
IkReal x2527=((1.0)*sj4);
IkReal x2528=(r10*sj5);
IkReal x2529=(cj5*r21);
IkReal x2530=((1.0)*cj4);
IkReal x2531=(cj3*sj4);
IkReal x2532=(cj5*r11);
IkReal x2533=(sj1*x2522);
IkReal x2534=(cj1*x2523);
IkReal x2535=(cj1*x2522);
IkReal x2536=((1.0)*cj5*sj3);
IkReal x2537=(cj3*x2530);
IkReal x2538=(sj1*x2523);
IkReal x2539=(x2533+x2534);
evalcond[0]=(x2539+(((-1.0)*x2527*x2528))+(((-1.0)*x2527*x2532))+(((-1.0)*r12*x2530)));
evalcond[1]=(x2535+(((-1.0)*x2527*x2529))+(((-1.0)*r22*x2530))+(((-1.0)*x2538))+(((-1.0)*x2526*x2527)));
evalcond[2]=((((-1.0)*pz))+(((-1.0)*r21*x2525))+(((0.12)*x2535))+(((0.097)*cj1))+(((-0.001205)*x2526))+(((-0.12)*x2538)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r11*x2525))+(((-1.0)*py))+(((0.12)*x2533))+(((0.12)*x2534))+(((-0.001205)*x2528)));
evalcond[4]=((((-1.0)*r20*x2536))+x2539+(((-1.0)*x2526*x2537))+((r22*x2531))+((r21*x2524))+(((-1.0)*x2529*x2537)));
evalcond[5]=((((-1.0)*x2528*x2537))+x2538+((r11*x2524))+(((-1.0)*r10*x2536))+((r12*x2531))+(((-1.0)*x2535))+(((-1.0)*x2532*x2537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2540=((1.0)*sj1);
IkReal x2541=(sj4*sj5);
IkReal x2542=(cj0*r20);
IkReal x2543=(cj4*r12);
IkReal x2544=(cj0*cj1);
IkReal x2545=(cj4*r22);
IkReal x2546=((1.0)*cj1);
IkReal x2547=(cj5*sj4);
CheckValue<IkReal> x2548=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2548.valid){
continue;
}
CheckValue<IkReal> x2549 = IKatan2WithCheck(IkReal(((((-1.0)*x2543*x2546))+(((-1.0)*cj0*x2540*x2545))+(((-1.0)*r11*x2546*x2547))+(((-1.0)*r10*x2541*x2546))+(((-1.0)*cj0*r21*x2540*x2547))+(((-1.0)*x2540*x2541*x2542)))),IkReal(((((-1.0)*r10*x2540*x2541))+((r21*x2544*x2547))+(((-1.0)*r11*x2540*x2547))+((cj1*x2541*x2542))+(((-1.0)*x2540*x2543))+((x2544*x2545)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2549.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2548.value)))+(x2549.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2550=IKcos(j2);
IkReal x2551=IKsin(j2);
IkReal x2552=(cj3*sj4);
IkReal x2553=((1.0)*r20);
IkReal x2554=(cj5*sj3);
IkReal x2555=(cj3*cj4);
IkReal x2556=((1.0)*r10);
IkReal x2557=(sj3*sj5);
IkReal x2558=((1.0)*cj5);
IkReal x2559=((0.001205)*cj5);
IkReal x2560=((1.0)*r00);
IkReal x2561=((1.0)*cj0);
IkReal x2562=((0.001205)*sj5);
IkReal x2563=(sj4*sj5);
IkReal x2564=((0.097)*sj1);
IkReal x2565=((1.0)*cj4);
IkReal x2566=(cj1*x2550);
IkReal x2567=(sj0*x2551);
IkReal x2568=(cj1*x2551);
IkReal x2569=(sj1*x2551);
IkReal x2570=(sj1*x2550);
IkReal x2571=((0.12)*x2570);
evalcond[0]=(x2566+(((-1.0)*r22*x2565))+(((-1.0)*x2569))+(((-1.0)*r21*sj4*x2558))+(((-1.0)*x2553*x2563)));
evalcond[1]=((((-0.12)*x2569))+(((-1.0)*r20*x2562))+(((0.12)*x2566))+(((-1.0)*r21*x2559))+(((-1.0)*pz))+(((0.097)*cj1)));
evalcond[2]=(((cj1*x2567))+(((-1.0)*r02*x2565))+(((-1.0)*x2560*x2563))+((sj0*x2570))+(((-1.0)*r01*sj4*x2558)));
evalcond[3]=((((-1.0)*x2556*x2563))+(((-1.0)*r11*sj4*x2558))+(((-1.0)*x2561*x2568))+(((-1.0)*r12*x2565))+(((-1.0)*x2561*x2570)));
evalcond[4]=((((-1.0)*r00*x2562))+(((0.0022)*sj0))+(((0.12)*cj1*x2567))+(((-1.0)*px))+(((-1.0)*r01*x2559))+((sj0*x2571))+((sj0*x2564)));
evalcond[5]=((((-1.0)*cj0*x2571))+(((-1.0)*r11*x2559))+(((-1.0)*py))+(((-1.0)*cj0*x2564))+(((-0.0022)*cj0))+(((-1.0)*r10*x2562))+(((-0.12)*cj0*x2568)));
evalcond[6]=(x2568+x2570+((r22*x2552))+(((-1.0)*r21*x2555*x2558))+(((-1.0)*x2553*x2554))+((r21*x2557))+(((-1.0)*sj5*x2553*x2555)));
evalcond[7]=((((-1.0)*sj5*x2555*x2560))+((r01*x2557))+(((-1.0)*sj0*x2566))+((sj1*x2567))+(((-1.0)*r01*x2555*x2558))+(((-1.0)*x2554*x2560))+((r02*x2552)));
evalcond[8]=((((-1.0)*sj5*x2555*x2556))+(((-1.0)*r11*x2555*x2558))+(((-1.0)*x2554*x2556))+((r12*x2552))+((r11*x2557))+((cj0*x2566))+(((-1.0)*x2561*x2569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2572=((1.0)*sj0);
IkReal x2573=(cj1*sj4);
IkReal x2574=(r20*sj5);
IkReal x2575=(cj4*sj1);
IkReal x2576=(r00*sj5);
IkReal x2577=(sj1*sj4);
IkReal x2578=(cj1*cj4);
IkReal x2579=(cj5*x2577);
CheckValue<IkReal> x2580=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2580.valid){
continue;
}
CheckValue<IkReal> x2581 = IKatan2WithCheck(IkReal((((x2573*x2576))+(((-1.0)*x2572*x2574*x2577))+(((-1.0)*r21*x2572*x2579))+((r02*x2578))+((cj5*r01*x2573))+(((-1.0)*r22*x2572*x2575)))),IkReal((((r22*sj0*x2578))+((cj5*r21*sj0*x2573))+((sj0*x2573*x2574))+((r01*x2579))+((x2576*x2577))+((r02*x2575)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2581.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2580.value)))+(x2581.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2582=IKcos(j2);
IkReal x2583=IKsin(j2);
IkReal x2584=(cj3*sj4);
IkReal x2585=((1.0)*r20);
IkReal x2586=(cj5*sj3);
IkReal x2587=(cj3*cj4);
IkReal x2588=((1.0)*r10);
IkReal x2589=(sj3*sj5);
IkReal x2590=((1.0)*cj5);
IkReal x2591=((0.001205)*cj5);
IkReal x2592=((1.0)*r00);
IkReal x2593=((1.0)*cj0);
IkReal x2594=((0.001205)*sj5);
IkReal x2595=(sj4*sj5);
IkReal x2596=((0.097)*sj1);
IkReal x2597=((1.0)*cj4);
IkReal x2598=(cj1*x2582);
IkReal x2599=(sj0*x2583);
IkReal x2600=(cj1*x2583);
IkReal x2601=(sj1*x2583);
IkReal x2602=(sj1*x2582);
IkReal x2603=((0.12)*x2602);
evalcond[0]=(x2598+(((-1.0)*r22*x2597))+(((-1.0)*r21*sj4*x2590))+(((-1.0)*x2585*x2595))+(((-1.0)*x2601)));
evalcond[1]=((((-1.0)*r20*x2594))+(((-1.0)*r21*x2591))+(((0.12)*x2598))+(((-1.0)*pz))+(((0.097)*cj1))+(((-0.12)*x2601)));
evalcond[2]=((((-1.0)*r01*sj4*x2590))+((cj1*x2599))+(((-1.0)*r02*x2597))+((sj0*x2602))+(((-1.0)*x2592*x2595)));
evalcond[3]=((((-1.0)*x2593*x2602))+(((-1.0)*x2593*x2600))+(((-1.0)*x2588*x2595))+(((-1.0)*r11*sj4*x2590))+(((-1.0)*r12*x2597)));
evalcond[4]=((((-1.0)*r00*x2594))+(((-1.0)*r01*x2591))+(((0.12)*cj1*x2599))+(((0.0022)*sj0))+(((-1.0)*px))+((sj0*x2603))+((sj0*x2596)));
evalcond[5]=((((-1.0)*cj0*x2603))+(((-0.12)*cj0*x2600))+(((-1.0)*py))+(((-1.0)*cj0*x2596))+(((-0.0022)*cj0))+(((-1.0)*r10*x2594))+(((-1.0)*r11*x2591)));
evalcond[6]=(((r22*x2584))+(((-1.0)*x2585*x2586))+(((-1.0)*sj5*x2585*x2587))+((r21*x2589))+x2600+x2602+(((-1.0)*r21*x2587*x2590)));
evalcond[7]=(((r01*x2589))+(((-1.0)*sj5*x2587*x2592))+(((-1.0)*r01*x2587*x2590))+(((-1.0)*x2586*x2592))+(((-1.0)*sj0*x2598))+((sj1*x2599))+((r02*x2584)));
evalcond[8]=((((-1.0)*sj5*x2587*x2588))+(((-1.0)*x2593*x2601))+((cj0*x2598))+((r12*x2584))+(((-1.0)*x2586*x2588))+((r11*x2589))+(((-1.0)*r11*x2587*x2590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x2604=(cj5*sj4);
IkReal x2605=(r01*sj0);
IkReal x2606=(r20*sj5);
IkReal x2607=((0.12)*sj0);
IkReal x2608=(r00*sj5);
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(sj0,-2);
if(!x2609.valid){
continue;
}
if( IKabs(((10.3092783505155)*(x2609.value)*(((((-0.12)*x2604*x2605))+(((-1.0)*cj4*r02*x2607))+((px*sj0))+(((-1.0)*sj4*x2607*x2608))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*cj5*x2605))+(((0.001205)*sj0*x2608)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.0124226804123711)*x2606))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((-1.23711340206186)*r21*x2604))+(((-1.23711340206186)*sj4*x2606))+(((-1.23711340206186)*cj4*r22)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((10.3092783505155)*(x2609.value)*(((((-0.12)*x2604*x2605))+(((-1.0)*cj4*r02*x2607))+((px*sj0))+(((-1.0)*sj4*x2607*x2608))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*cj5*x2605))+(((0.001205)*sj0*x2608))))))+IKsqr(((((0.0124226804123711)*x2606))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((-1.23711340206186)*r21*x2604))+(((-1.23711340206186)*sj4*x2606))+(((-1.23711340206186)*cj4*r22))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((10.3092783505155)*(x2609.value)*(((((-0.12)*x2604*x2605))+(((-1.0)*cj4*r02*x2607))+((px*sj0))+(((-1.0)*sj4*x2607*x2608))+(((-0.0022)*(sj0*sj0)))+(((0.001205)*cj5*x2605))+(((0.001205)*sj0*x2608))))), ((((0.0124226804123711)*x2606))+(((0.0124226804123711)*cj5*r21))+(((10.3092783505155)*pz))+(((-1.23711340206186)*r21*x2604))+(((-1.23711340206186)*sj4*x2606))+(((-1.23711340206186)*cj4*r22))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[9];
IkReal x2610=cj0*cj0;
IkReal x2611=sj0*sj0;
IkReal x2612=IKsin(j1);
IkReal x2613=IKcos(j1);
IkReal x2614=(r00*sj4);
IkReal x2615=(cj3*cj4);
IkReal x2616=((1.0)*py);
IkReal x2617=(cj0*sj0);
IkReal x2618=((0.12)*sj3);
IkReal x2619=(sj0*sj5);
IkReal x2620=((0.001205)*cj5);
IkReal x2621=((1.0)*px);
IkReal x2622=((0.12)*sj0);
IkReal x2623=(cj3*sj4);
IkReal x2624=((0.001205)*sj5);
IkReal x2625=((1.0)*pz);
IkReal x2626=(cj4*r12);
IkReal x2627=((0.12)*sj5);
IkReal x2628=((0.12)*r22);
IkReal x2629=(cj0*sj4);
IkReal x2630=(cj0*r21);
IkReal x2631=(cj5*r01);
IkReal x2632=((0.12)*cj5);
IkReal x2633=(r10*sj4);
IkReal x2634=(cj5*r20);
IkReal x2635=((0.0022)*x2617);
IkReal x2636=(sj0*x2620);
IkReal x2637=(cj0*x2627);
IkReal x2638=((0.097)*x2612);
IkReal x2639=((0.12)*cj4*r02);
IkReal x2640=(cj0*x2624);
IkReal x2641=(r11*x2632);
IkReal x2642=((0.097)*x2613);
IkReal x2643=(x2617*x2638);
IkReal x2644=(x2635+x2643);
evalcond[0]=(((cj4*x2628))+((r21*sj4*x2632))+(((-1.0)*x2625))+((r20*sj4*x2627))+(((-1.0)*r21*x2620))+x2642+(((-1.0)*r20*x2624)));
evalcond[1]=(((x2629*x2641))+(((-1.0)*cj0*r11*x2620))+(((-0.0022)*x2610))+(((-1.0)*cj0*x2616))+(((-1.0)*x2610*x2638))+((r10*x2627*x2629))+(((0.12)*cj0*x2626))+(((-1.0)*r10*x2640)));
evalcond[2]=((((0.001205)*r00*x2619))+(((-0.0022)*x2611))+(((-0.12)*x2614*x2619))+(((-1.0)*cj4*r02*x2622))+((r01*x2636))+((px*sj0))+(((-1.0)*x2611*x2638))+(((-1.0)*sj4*x2622*x2631)));
evalcond[3]=(((x2620*x2630))+((r11*sj5*x2618))+(((0.12)*r12*x2623))+(((-1.0)*r10*x2615*x2627))+(((-1.0)*x2615*x2641))+((cj0*pz))+(((-1.0)*cj0*x2642))+(((-1.0)*cj5*r10*x2618))+((r20*x2640)));
evalcond[4]=(((sj0*x2642))+(((-1.0)*cj5*r00*x2618))+(((0.12)*r02*x2623))+(((-1.0)*r00*x2615*x2627))+((r01*sj5*x2618))+(((-0.001205)*r20*x2619))+(((-1.0)*r21*x2636))+(((-0.12)*x2615*x2631))+(((-1.0)*sj0*x2625)));
evalcond[5]=((((-1.0)*x2615*x2630*x2632))+((cj0*x2623*x2628))+(((-1.0)*r11*x2620))+(((-1.0)*cj0*x2618*x2634))+(((-1.0)*r10*x2624))+(((-1.0)*r20*x2615*x2637))+(((-1.0)*cj0*x2638))+((sj5*x2618*x2630))+(((-1.0)*x2616))+(((-0.0022)*cj0)));
evalcond[6]=((((-1.0)*r01*x2620))+((cj5*r21*x2615*x2622))+((sj0*x2618*x2634))+(((-1.0)*r00*x2624))+(((-1.0)*r21*x2618*x2619))+((sj0*x2638))+(((0.0022)*sj0))+(((-1.0)*x2621))+(((0.12)*r20*x2615*x2619))+(((-1.0)*r22*x2622*x2623)));
evalcond[7]=((((0.12)*x2629*x2631))+((r11*x2636))+((cj0*x2639))+((py*sj0))+((x2614*x2637))+(((0.001205)*r10*x2619))+x2644);
evalcond[8]=((((-1.0)*x2622*x2626))+(((-1.0)*cj5*r11*sj4*x2622))+(((-1.0)*r00*x2640))+(((-1.0)*cj0*x2621))+(((-0.12)*x2619*x2633))+x2644+(((-1.0)*cj0*r01*x2620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
j2eval[0]=sj0;
j2eval[1]=IKsign(sj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
j2eval[0]=cj0;
j2eval[1]=IKsign(cj0);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2645=(sj1*sj4);
IkReal x2646=(cj5*r01);
IkReal x2647=(r20*sj5);
IkReal x2648=(cj4*sj1);
IkReal x2649=(r00*sj5);
IkReal x2650=(cj1*sj4);
IkReal x2651=(cj5*r21);
IkReal x2652=(cj1*cj4);
if( IKabs((((x2649*x2650))+(((-1.0)*r22*x2648))+((r02*x2652))+(((-1.0)*x2645*x2651))+(((-1.0)*x2645*x2647))+((x2646*x2650)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*x2648))+((r22*x2652))+((x2645*x2646))+((x2645*x2649))+((x2647*x2650))+((x2650*x2651)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((x2649*x2650))+(((-1.0)*r22*x2648))+((r02*x2652))+(((-1.0)*x2645*x2651))+(((-1.0)*x2645*x2647))+((x2646*x2650))))+IKsqr((((r02*x2648))+((r22*x2652))+((x2645*x2646))+((x2645*x2649))+((x2647*x2650))+((x2650*x2651))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((x2649*x2650))+(((-1.0)*r22*x2648))+((r02*x2652))+(((-1.0)*x2645*x2651))+(((-1.0)*x2645*x2647))+((x2646*x2650))), (((r02*x2648))+((r22*x2652))+((x2645*x2646))+((x2645*x2649))+((x2647*x2650))+((x2650*x2651))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2653=IKcos(j2);
IkReal x2654=IKsin(j2);
IkReal x2655=(cj3*sj4);
IkReal x2656=((1.0)*cj5);
IkReal x2657=(cj3*cj4);
IkReal x2658=((0.001205)*cj5);
IkReal x2659=(sj3*sj5);
IkReal x2660=(r20*sj5);
IkReal x2661=((1.0)*sj4);
IkReal x2662=(r00*sj5);
IkReal x2663=((1.0)*cj4);
IkReal x2664=(sj1*x2653);
IkReal x2665=(cj1*x2654);
IkReal x2666=(cj1*x2653);
IkReal x2667=(sj1*x2654);
IkReal x2668=(x2664+x2665);
evalcond[0]=((((-1.0)*r02*x2663))+(((-1.0)*r01*sj4*x2656))+(((-1.0)*x2661*x2662))+x2668);
evalcond[1]=((((-1.0)*x2667))+(((-1.0)*x2660*x2661))+(((-1.0)*r21*sj4*x2656))+(((-1.0)*r22*x2663))+x2666);
evalcond[2]=((((-0.001205)*x2660))+(((0.12)*x2666))+(((-1.0)*pz))+(((-1.0)*r21*x2658))+(((0.097)*cj1))+(((-0.12)*x2667)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-1.0)*r01*x2658))+(((-0.001205)*x2662))+(((0.12)*x2665))+(((0.12)*x2664))+(((-1.0)*px)));
evalcond[4]=(((r21*x2659))+(((-1.0)*x2657*x2660))+((r22*x2655))+(((-1.0)*r20*sj3*x2656))+(((-1.0)*r21*x2656*x2657))+x2668);
evalcond[5]=((((-1.0)*x2666))+(((-1.0)*r01*x2656*x2657))+(((-1.0)*x2657*x2662))+((r02*x2655))+((r01*x2659))+(((-1.0)*r00*sj3*x2656))+x2667);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2669=((1.0)*sj1);
IkReal x2670=(sj4*sj5);
IkReal x2671=(cj4*r22);
IkReal x2672=(cj5*sj4);
IkReal x2673=(cj4*r02);
IkReal x2674=((1.0)*cj1);
if( IKabs(((((-1.0)*r01*x2672*x2674))+(((-1.0)*x2673*x2674))+(((-1.0)*r00*x2670*x2674))+(((-1.0)*r20*x2669*x2670))+(((-1.0)*x2669*x2671))+(((-1.0)*r21*x2669*x2672)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x2669*x2672))+(((-1.0)*r00*x2669*x2670))+((cj1*x2671))+((cj1*r20*x2670))+((cj1*r21*x2672))+(((-1.0)*x2669*x2673)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r01*x2672*x2674))+(((-1.0)*x2673*x2674))+(((-1.0)*r00*x2670*x2674))+(((-1.0)*r20*x2669*x2670))+(((-1.0)*x2669*x2671))+(((-1.0)*r21*x2669*x2672))))+IKsqr(((((-1.0)*r01*x2669*x2672))+(((-1.0)*r00*x2669*x2670))+((cj1*x2671))+((cj1*r20*x2670))+((cj1*r21*x2672))+(((-1.0)*x2669*x2673))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r01*x2672*x2674))+(((-1.0)*x2673*x2674))+(((-1.0)*r00*x2670*x2674))+(((-1.0)*r20*x2669*x2670))+(((-1.0)*x2669*x2671))+(((-1.0)*r21*x2669*x2672))), ((((-1.0)*r01*x2669*x2672))+(((-1.0)*r00*x2669*x2670))+((cj1*x2671))+((cj1*r20*x2670))+((cj1*r21*x2672))+(((-1.0)*x2669*x2673))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2675=IKcos(j2);
IkReal x2676=IKsin(j2);
IkReal x2677=(cj3*sj4);
IkReal x2678=((1.0)*cj5);
IkReal x2679=(cj3*cj4);
IkReal x2680=((0.001205)*cj5);
IkReal x2681=(sj3*sj5);
IkReal x2682=(r20*sj5);
IkReal x2683=((1.0)*sj4);
IkReal x2684=(r00*sj5);
IkReal x2685=((1.0)*cj4);
IkReal x2686=(cj1*x2675);
IkReal x2687=(cj1*x2676);
IkReal x2688=(sj1*x2676);
IkReal x2689=(sj1*x2675);
IkReal x2690=((1.0)*x2688);
evalcond[0]=((((-1.0)*x2690))+(((-1.0)*r22*x2685))+(((-1.0)*x2682*x2683))+(((-1.0)*r21*sj4*x2678))+x2686);
evalcond[1]=((((-1.0)*pz))+(((-0.001205)*x2682))+(((0.097)*cj1))+(((-0.12)*x2688))+(((-1.0)*r21*x2680))+(((0.12)*x2686)));
evalcond[2]=((((-1.0)*r01*sj4*x2678))+(((-1.0)*r02*x2685))+(((-1.0)*x2683*x2684))+(((-1.0)*x2687))+(((-1.0)*x2689)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-1.0)*r01*x2680))+(((-1.0)*px))+(((-0.001205)*x2684))+(((-0.12)*x2687))+(((-0.12)*x2689)));
evalcond[4]=((((-1.0)*x2679*x2682))+((r22*x2677))+((r21*x2681))+(((-1.0)*r20*sj3*x2678))+x2689+x2687+(((-1.0)*r21*x2678*x2679)));
evalcond[5]=((((-1.0)*x2679*x2684))+((r02*x2677))+((r01*x2681))+(((-1.0)*x2690))+(((-1.0)*r00*sj3*x2678))+(((-1.0)*r01*x2678*x2679))+x2686);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2691=((1.0)*sj1);
IkReal x2692=(sj4*sj5);
IkReal x2693=(cj4*r22);
IkReal x2694=(cj4*r12);
IkReal x2695=((1.0)*cj1);
IkReal x2696=(cj5*r21*sj4);
IkReal x2697=(cj5*r11*sj4);
if( IKabs(((((-1.0)*x2691*x2693))+(((-1.0)*x2691*x2696))+(((-1.0)*r10*x2692*x2695))+(((-1.0)*r20*x2691*x2692))+(((-1.0)*x2695*x2697))+(((-1.0)*x2694*x2695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x2691*x2694))+(((-1.0)*x2691*x2697))+((cj1*x2696))+((cj1*x2693))+(((-1.0)*r10*x2691*x2692))+((cj1*r20*x2692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*x2691*x2693))+(((-1.0)*x2691*x2696))+(((-1.0)*r10*x2692*x2695))+(((-1.0)*r20*x2691*x2692))+(((-1.0)*x2695*x2697))+(((-1.0)*x2694*x2695))))+IKsqr(((((-1.0)*x2691*x2694))+(((-1.0)*x2691*x2697))+((cj1*x2696))+((cj1*x2693))+(((-1.0)*r10*x2691*x2692))+((cj1*r20*x2692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*x2691*x2693))+(((-1.0)*x2691*x2696))+(((-1.0)*r10*x2692*x2695))+(((-1.0)*r20*x2691*x2692))+(((-1.0)*x2695*x2697))+(((-1.0)*x2694*x2695))), ((((-1.0)*x2691*x2694))+(((-1.0)*x2691*x2697))+((cj1*x2696))+((cj1*x2693))+(((-1.0)*r10*x2691*x2692))+((cj1*r20*x2692))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2698=IKcos(j2);
IkReal x2699=IKsin(j2);
IkReal x2700=(sj3*sj5);
IkReal x2701=((0.001205)*cj5);
IkReal x2702=(r20*sj5);
IkReal x2703=((1.0)*sj4);
IkReal x2704=(r10*sj5);
IkReal x2705=((1.0)*sj1);
IkReal x2706=(cj5*r21);
IkReal x2707=((1.0)*cj4);
IkReal x2708=((0.12)*sj1);
IkReal x2709=(cj3*sj4);
IkReal x2710=(cj5*r11);
IkReal x2711=(cj1*x2698);
IkReal x2712=((1.0)*cj5*sj3);
IkReal x2713=(cj1*x2699);
IkReal x2714=(cj3*x2707);
IkReal x2715=(x2699*x2705);
evalcond[0]=(x2711+(((-1.0)*x2702*x2703))+(((-1.0)*r22*x2707))+(((-1.0)*x2715))+(((-1.0)*x2703*x2706)));
evalcond[1]=((((-0.001205)*x2702))+(((-1.0)*pz))+(((0.12)*x2711))+(((-1.0)*r21*x2701))+(((0.097)*cj1))+(((-1.0)*x2699*x2708)));
evalcond[2]=((((-1.0)*x2713))+(((-1.0)*r12*x2707))+(((-1.0)*x2703*x2710))+(((-1.0)*x2703*x2704))+(((-1.0)*x2698*x2705)));
evalcond[3]=((-0.0022)+(((-0.097)*sj1))+(((-0.001205)*x2704))+(((-1.0)*r11*x2701))+(((-1.0)*py))+(((-0.12)*x2713))+(((-1.0)*x2698*x2708)));
evalcond[4]=(x2713+((r22*x2709))+(((-1.0)*r20*x2712))+((sj1*x2698))+(((-1.0)*x2702*x2714))+((r21*x2700))+(((-1.0)*x2706*x2714)));
evalcond[5]=(x2711+((r12*x2709))+(((-1.0)*x2715))+(((-1.0)*x2704*x2714))+((r11*x2700))+(((-1.0)*r10*x2712))+(((-1.0)*x2710*x2714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2716=((1.0)*sj1);
IkReal x2717=(sj4*sj5);
IkReal x2718=(cj4*r12);
IkReal x2719=(cj4*r22);
IkReal x2720=(cj5*sj4);
IkReal x2721=(cj1*x2720);
if( IKabs(((((-1.0)*r21*x2716*x2720))+((cj1*r10*x2717))+((r11*x2721))+(((-1.0)*r20*x2716*x2717))+(((-1.0)*x2716*x2719))+((cj1*x2718)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r11*sj1*x2720))+((sj1*x2718))+((r21*x2721))+((r10*sj1*x2717))+((cj1*r20*x2717))+((cj1*x2719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r21*x2716*x2720))+((cj1*r10*x2717))+((r11*x2721))+(((-1.0)*r20*x2716*x2717))+(((-1.0)*x2716*x2719))+((cj1*x2718))))+IKsqr((((r11*sj1*x2720))+((sj1*x2718))+((r21*x2721))+((r10*sj1*x2717))+((cj1*r20*x2717))+((cj1*x2719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*r21*x2716*x2720))+((cj1*r10*x2717))+((r11*x2721))+(((-1.0)*r20*x2716*x2717))+(((-1.0)*x2716*x2719))+((cj1*x2718))), (((r11*sj1*x2720))+((sj1*x2718))+((r21*x2721))+((r10*sj1*x2717))+((cj1*r20*x2717))+((cj1*x2719))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[6];
IkReal x2722=IKcos(j2);
IkReal x2723=IKsin(j2);
IkReal x2724=(sj3*sj5);
IkReal x2725=((0.001205)*cj5);
IkReal x2726=(r20*sj5);
IkReal x2727=((1.0)*sj4);
IkReal x2728=(r10*sj5);
IkReal x2729=(cj5*r21);
IkReal x2730=((1.0)*cj4);
IkReal x2731=(cj3*sj4);
IkReal x2732=(cj5*r11);
IkReal x2733=(sj1*x2722);
IkReal x2734=(cj1*x2723);
IkReal x2735=(cj1*x2722);
IkReal x2736=((1.0)*cj5*sj3);
IkReal x2737=(cj3*x2730);
IkReal x2738=(sj1*x2723);
IkReal x2739=(x2734+x2733);
evalcond[0]=(x2739+(((-1.0)*x2727*x2732))+(((-1.0)*x2727*x2728))+(((-1.0)*r12*x2730)));
evalcond[1]=(x2735+(((-1.0)*x2727*x2729))+(((-1.0)*x2726*x2727))+(((-1.0)*x2738))+(((-1.0)*r22*x2730)));
evalcond[2]=((((-1.0)*r21*x2725))+(((-0.12)*x2738))+(((-0.001205)*x2726))+(((-1.0)*pz))+(((0.12)*x2735))+(((0.097)*cj1)));
evalcond[3]=((0.0022)+(((0.097)*sj1))+(((-0.001205)*x2728))+(((-1.0)*py))+(((-1.0)*r11*x2725))+(((0.12)*x2733))+(((0.12)*x2734)));
evalcond[4]=(x2739+(((-1.0)*x2726*x2737))+((r22*x2731))+((r21*x2724))+(((-1.0)*r20*x2736))+(((-1.0)*x2729*x2737)));
evalcond[5]=(x2738+(((-1.0)*x2728*x2737))+(((-1.0)*x2735))+((r12*x2731))+((r11*x2724))+(((-1.0)*r10*x2736))+(((-1.0)*x2732*x2737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2740=((1.0)*sj1);
IkReal x2741=(sj4*sj5);
IkReal x2742=(cj0*r20);
IkReal x2743=(cj4*r12);
IkReal x2744=(cj0*cj1);
IkReal x2745=(cj4*r22);
IkReal x2746=((1.0)*cj1);
IkReal x2747=(cj5*sj4);
CheckValue<IkReal> x2748 = IKatan2WithCheck(IkReal(((((-1.0)*x2743*x2746))+(((-1.0)*cj0*x2740*x2745))+(((-1.0)*x2740*x2741*x2742))+(((-1.0)*r10*x2741*x2746))+(((-1.0)*r11*x2746*x2747))+(((-1.0)*cj0*r21*x2740*x2747)))),IkReal(((((-1.0)*r11*x2740*x2747))+((cj1*x2741*x2742))+(((-1.0)*r10*x2740*x2741))+(((-1.0)*x2740*x2743))+((x2744*x2745))+((r21*x2744*x2747)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2748.valid){
continue;
}
CheckValue<IkReal> x2749=IKPowWithIntegerCheck(IKsign(cj0),-1);
if(!x2749.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2748.value)+(((1.5707963267949)*(x2749.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2750=IKcos(j2);
IkReal x2751=IKsin(j2);
IkReal x2752=(cj3*sj4);
IkReal x2753=((1.0)*r20);
IkReal x2754=(cj5*sj3);
IkReal x2755=(cj3*cj4);
IkReal x2756=((1.0)*r10);
IkReal x2757=(sj3*sj5);
IkReal x2758=((1.0)*cj5);
IkReal x2759=((0.001205)*cj5);
IkReal x2760=((1.0)*r00);
IkReal x2761=((1.0)*cj0);
IkReal x2762=((0.001205)*sj5);
IkReal x2763=(sj4*sj5);
IkReal x2764=((0.097)*sj1);
IkReal x2765=((1.0)*cj4);
IkReal x2766=(cj1*x2750);
IkReal x2767=(sj0*x2751);
IkReal x2768=(cj1*x2751);
IkReal x2769=(sj1*x2751);
IkReal x2770=(sj1*x2750);
IkReal x2771=((0.12)*x2770);
evalcond[0]=(x2766+(((-1.0)*r21*sj4*x2758))+(((-1.0)*x2769))+(((-1.0)*x2753*x2763))+(((-1.0)*r22*x2765)));
evalcond[1]=((((-0.12)*x2769))+(((-1.0)*pz))+(((-1.0)*r20*x2762))+(((0.12)*x2766))+(((0.097)*cj1))+(((-1.0)*r21*x2759)));
evalcond[2]=(((cj1*x2767))+(((-1.0)*x2760*x2763))+(((-1.0)*r01*sj4*x2758))+(((-1.0)*r02*x2765))+((sj0*x2770)));
evalcond[3]=((((-1.0)*r12*x2765))+(((-1.0)*x2761*x2768))+(((-1.0)*x2761*x2770))+(((-1.0)*x2756*x2763))+(((-1.0)*r11*sj4*x2758)));
evalcond[4]=((((-1.0)*r01*x2759))+((sj0*x2764))+(((-1.0)*r00*x2762))+(((0.0022)*sj0))+(((-1.0)*px))+(((0.12)*cj1*x2767))+((sj0*x2771)));
evalcond[5]=((((-0.12)*cj0*x2768))+(((-1.0)*cj0*x2764))+(((-1.0)*r10*x2762))+(((-1.0)*py))+(((-1.0)*r11*x2759))+(((-0.0022)*cj0))+(((-1.0)*cj0*x2771)));
evalcond[6]=(x2770+x2768+((r22*x2752))+((r21*x2757))+(((-1.0)*x2753*x2754))+(((-1.0)*sj5*x2753*x2755))+(((-1.0)*r21*x2755*x2758)));
evalcond[7]=(((sj1*x2767))+(((-1.0)*sj0*x2766))+((r01*x2757))+(((-1.0)*sj5*x2755*x2760))+(((-1.0)*r01*x2755*x2758))+(((-1.0)*x2754*x2760))+((r02*x2752)));
evalcond[8]=(((r11*x2757))+(((-1.0)*x2761*x2769))+((r12*x2752))+(((-1.0)*r11*x2755*x2758))+((cj0*x2766))+(((-1.0)*sj5*x2755*x2756))+(((-1.0)*x2754*x2756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x2772=((1.0)*sj0);
IkReal x2773=(cj1*sj4);
IkReal x2774=(r20*sj5);
IkReal x2775=(cj4*sj1);
IkReal x2776=(r00*sj5);
IkReal x2777=(sj1*sj4);
IkReal x2778=(cj1*cj4);
IkReal x2779=(cj5*x2777);
CheckValue<IkReal> x2780 = IKatan2WithCheck(IkReal((((cj5*r01*x2773))+(((-1.0)*r22*x2772*x2775))+(((-1.0)*x2772*x2774*x2777))+(((-1.0)*r21*x2772*x2779))+((r02*x2778))+((x2773*x2776)))),IkReal((((r01*x2779))+((sj0*x2773*x2774))+((x2776*x2777))+((r22*sj0*x2778))+((r02*x2775))+((cj5*r21*sj0*x2773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2780.valid){
continue;
}
CheckValue<IkReal> x2781=IKPowWithIntegerCheck(IKsign(sj0),-1);
if(!x2781.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x2780.value)+(((1.5707963267949)*(x2781.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[9];
IkReal x2782=IKcos(j2);
IkReal x2783=IKsin(j2);
IkReal x2784=(cj3*sj4);
IkReal x2785=((1.0)*r20);
IkReal x2786=(cj5*sj3);
IkReal x2787=(cj3*cj4);
IkReal x2788=((1.0)*r10);
IkReal x2789=(sj3*sj5);
IkReal x2790=((1.0)*cj5);
IkReal x2791=((0.001205)*cj5);
IkReal x2792=((1.0)*r00);
IkReal x2793=((1.0)*cj0);
IkReal x2794=((0.001205)*sj5);
IkReal x2795=(sj4*sj5);
IkReal x2796=((0.097)*sj1);
IkReal x2797=((1.0)*cj4);
IkReal x2798=(cj1*x2782);
IkReal x2799=(sj0*x2783);
IkReal x2800=(cj1*x2783);
IkReal x2801=(sj1*x2783);
IkReal x2802=(sj1*x2782);
IkReal x2803=((0.12)*x2802);
evalcond[0]=(x2798+(((-1.0)*x2801))+(((-1.0)*x2785*x2795))+(((-1.0)*r22*x2797))+(((-1.0)*r21*sj4*x2790)));
evalcond[1]=((((-1.0)*r20*x2794))+(((-1.0)*r21*x2791))+(((0.12)*x2798))+(((-0.12)*x2801))+(((-1.0)*pz))+(((0.097)*cj1)));
evalcond[2]=((((-1.0)*r01*sj4*x2790))+((cj1*x2799))+(((-1.0)*x2792*x2795))+((sj0*x2802))+(((-1.0)*r02*x2797)));
evalcond[3]=((((-1.0)*x2793*x2800))+(((-1.0)*x2793*x2802))+(((-1.0)*r11*sj4*x2790))+(((-1.0)*x2788*x2795))+(((-1.0)*r12*x2797)));
evalcond[4]=((((0.12)*cj1*x2799))+(((0.0022)*sj0))+(((-1.0)*px))+((sj0*x2796))+(((-1.0)*r00*x2794))+(((-1.0)*r01*x2791))+((sj0*x2803)));
evalcond[5]=((((-1.0)*py))+(((-1.0)*r10*x2794))+(((-1.0)*cj0*x2796))+(((-1.0)*cj0*x2803))+(((-0.12)*cj0*x2800))+(((-0.0022)*cj0))+(((-1.0)*r11*x2791)));
evalcond[6]=(((r21*x2789))+(((-1.0)*r21*x2787*x2790))+(((-1.0)*x2785*x2786))+((r22*x2784))+(((-1.0)*sj5*x2785*x2787))+x2802+x2800);
evalcond[7]=((((-1.0)*sj0*x2798))+(((-1.0)*x2786*x2792))+((r02*x2784))+((sj1*x2799))+((r01*x2789))+(((-1.0)*sj5*x2787*x2792))+(((-1.0)*r01*x2787*x2790)));
evalcond[8]=((((-1.0)*x2786*x2788))+((r12*x2784))+(((-1.0)*x2793*x2801))+((r11*x2789))+(((-1.0)*sj5*x2787*x2788))+(((-1.0)*r11*x2787*x2790))+((cj0*x2798)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "dfb2efb0f88348605f0f185310314e6c"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
